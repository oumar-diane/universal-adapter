/* Generated by zwangine build tools - do NOT edit this file! */
package org.zenithblox.component.timer;

import org.zenithblox.ZwangineContext;
import org.zenithblox.spi.GeneratedPropertyConfigurer;
import org.zenithblox.spi.PropertyConfigurerGetter;
import org.zenithblox.support.component.PropertyConfigurerSupport;

import javax.annotation.processing.Generated;

/**
 * Generated by zwangine build tools - do NOT edit this file!
 */
@Generated("org.zenithblox.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class TimerEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(ZwangineContext zwangineContext, Object obj, String name, Object value, boolean ignoreCase) {
        TimerEndpoint target = (TimerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(zwangineContext, boolean.class, value)); return true;
        case "daemon": target.setDaemon(property(zwangineContext, boolean.class, value)); return true;
        case "delay": target.setDelay(property(zwangineContext, java.time.Duration.class, value).toMillis()); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(zwangineContext, org.zenithblox.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(zwangineContext, org.zenithblox.ExchangePattern.class, value)); return true;
        case "fixedrate":
        case "fixedRate": target.setFixedRate(property(zwangineContext, boolean.class, value)); return true;
        case "includemetadata":
        case "includeMetadata": target.setIncludeMetadata(property(zwangineContext, boolean.class, value)); return true;
        case "pattern": target.setPattern(property(zwangineContext, String.class, value)); return true;
        case "period": target.setPeriod(property(zwangineContext, java.time.Duration.class, value).toMillis()); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(zwangineContext, long.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(zwangineContext, org.zenithblox.LoggingLevel.class, value)); return true;
        case "synchronous": target.setSynchronous(property(zwangineContext, boolean.class, value)); return true;
        case "time": target.setTime(property(zwangineContext, java.util.Date.class, value)); return true;
        case "timer": target.setTimer(property(zwangineContext, java.util.Timer.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "daemon": return boolean.class;
        case "delay": return long.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.zenithblox.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.zenithblox.ExchangePattern.class;
        case "fixedrate":
        case "fixedRate": return boolean.class;
        case "includemetadata":
        case "includeMetadata": return boolean.class;
        case "pattern": return String.class;
        case "period": return long.class;
        case "repeatcount":
        case "repeatCount": return long.class;
        case "runlogginglevel":
        case "runLoggingLevel": return org.zenithblox.LoggingLevel.class;
        case "synchronous": return boolean.class;
        case "time": return java.util.Date.class;
        case "timer": return java.util.Timer.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        TimerEndpoint target = (TimerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "daemon": return target.isDaemon();
        case "delay": return target.getDelay();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "fixedrate":
        case "fixedRate": return target.isFixedRate();
        case "includemetadata":
        case "includeMetadata": return target.isIncludeMetadata();
        case "pattern": return target.getPattern();
        case "period": return target.getPeriod();
        case "repeatcount":
        case "repeatCount": return target.getRepeatCount();
        case "runlogginglevel":
        case "runLoggingLevel": return target.getRunLoggingLevel();
        case "synchronous": return target.isSynchronous();
        case "time": return target.getTime();
        case "timer": return target.getTimer();
        default: return null;
        }
    }
}

