/* Generated by Zwangine build tools - do NOT edit this file! */
package org.zenithblox.component.file.watch;

import org.zenithblox.ZwangineContext;
import org.zenithblox.spi.GeneratedPropertyConfigurer;
import org.zenithblox.spi.PropertyConfigurerGetter;
import org.zenithblox.support.component.PropertyConfigurerSupport;

import javax.annotation.processing.Generated;

/**
 * Generated by Zwangine build tools - do NOT edit this file!
 */
@Generated("org.zenithblox.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class FileWatchComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(ZwangineContext ZwangineContext, Object obj, String name, Object value, boolean ignoreCase) {
        FileWatchComponent target = (FileWatchComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(ZwangineContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(ZwangineContext, boolean.class, value)); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.setConcurrentConsumers(property(ZwangineContext, int.class, value)); return true;
        case "filehasher":
        case "fileHasher": target.setFileHasher(property(ZwangineContext, io.methvin.watcher.hashing.FileHasher.class, value)); return true;
        case "pollthreads":
        case "pollThreads": target.setPollThreads(property(ZwangineContext, int.class, value)); return true;
        case "queuesize":
        case "queueSize": target.setQueueSize(property(ZwangineContext, int.class, value)); return true;
        case "usefilehashing":
        case "useFileHashing": target.setUseFileHashing(property(ZwangineContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "concurrentconsumers":
        case "concurrentConsumers": return int.class;
        case "filehasher":
        case "fileHasher": return io.methvin.watcher.hashing.FileHasher.class;
        case "pollthreads":
        case "pollThreads": return int.class;
        case "queuesize":
        case "queueSize": return int.class;
        case "usefilehashing":
        case "useFileHashing": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        FileWatchComponent target = (FileWatchComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "concurrentconsumers":
        case "concurrentConsumers": return target.getConcurrentConsumers();
        case "filehasher":
        case "fileHasher": return target.getFileHasher();
        case "pollthreads":
        case "pollThreads": return target.getPollThreads();
        case "queuesize":
        case "queueSize": return target.getQueueSize();
        case "usefilehashing":
        case "useFileHashing": return target.isUseFileHashing();
        default: return null;
        }
    }
}

