/* Generated by Zwangine build tools - do NOT edit this file! */
package org.zenithblox.component.file.watch;

import org.zenithblox.spi.EndpointUriFactory;

import javax.annotation.processing.Generated;
import java.net.URISyntaxException;
import java.util.*;

/**
 * Generated by Zwangine build tools - do NOT edit this file!
 */
@Generated("org.zenithblox.maven.packaging.GenerateEndpointUriFactoryMojo")
public class FileWatchEndpointUriFactory extends org.zenithblox.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":path";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    private static final Set<String> MULTI_VALUE_PREFIXES;
    static {
        Set<String> props = new HashSet<>(13);
        props.add("antInclude");
        props.add("autoCreate");
        props.add("bridgeErrorHandler");
        props.add("concurrentConsumers");
        props.add("events");
        props.add("exceptionHandler");
        props.add("exchangePattern");
        props.add("fileHasher");
        props.add("path");
        props.add("pollThreads");
        props.add("queueSize");
        props.add("recursive");
        props.add("useFileHashing");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        SECRET_PROPERTY_NAMES = Collections.emptySet();
        MULTI_VALUE_PREFIXES = Collections.emptySet();
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "file-watch".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "path", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

