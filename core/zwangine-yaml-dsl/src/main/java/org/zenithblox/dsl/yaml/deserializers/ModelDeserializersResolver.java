// Generated by zwangine-yaml-dsl-maven-plugin - do NOT edit this file!
package org.zenithblox.dsl.yaml.deserializers;

import org.zenithblox.dsl.yaml.common.YamlDeserializerResolver;
import org.snakeyaml.engine.v2.api.ConstructNode;

public final class ModelDeserializersResolver implements YamlDeserializerResolver {
    @Override
    public int getOrder() {
        return YamlDeserializerResolver.ORDER_LOWEST - 1;
    }

    @Override
    public ConstructNode resolve(String id) {
        switch(id) {
            case "asn1": return new ModelDeserializers.ASN1DataFormatDeserializer();
            case "org.zenithblox.model.dataformat.ASN1DataFormat": return new ModelDeserializers.ASN1DataFormatDeserializer();
            case "aggregate": return new ModelDeserializers.AggregateDefinitionDeserializer();
            case "org.zenithblox.model.AggregateDefinition": return new ModelDeserializers.AggregateDefinitionDeserializer();
            case "api-key": return new ModelDeserializers.ApiKeyDefinitionDeserializer();
            case "apiKey": return new ModelDeserializers.ApiKeyDefinitionDeserializer();
            case "org.zenithblox.model.rest.ApiKeyDefinition": return new ModelDeserializers.ApiKeyDefinitionDeserializer();
            case "avro": return new ModelDeserializers.AvroDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.AvroDataFormat": return new ModelDeserializers.AvroDataFormatDeserializer();
            case "barcode": return new ModelDeserializers.BarcodeDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.BarcodeDataFormat": return new ModelDeserializers.BarcodeDataFormatDeserializer();
            case "base64": return new ModelDeserializers.Base64DataFormatDeserializer();
            case "org.zenithblox.model.dataformat.Base64DataFormat": return new ModelDeserializers.Base64DataFormatDeserializer();
            case "basic-auth": return new ModelDeserializers.BasicAuthDefinitionDeserializer();
            case "basicAuth": return new ModelDeserializers.BasicAuthDefinitionDeserializer();
            case "org.zenithblox.model.rest.BasicAuthDefinition": return new ModelDeserializers.BasicAuthDefinitionDeserializer();
            case "batch-config": return new ModelDeserializers.BatchResequencerConfigDeserializer();
            case "batchConfig": return new ModelDeserializers.BatchResequencerConfigDeserializer();
            case "org.zenithblox.model.config.BatchResequencerConfig": return new ModelDeserializers.BatchResequencerConfigDeserializer();
            case "org.zenithblox.model.app.BeanConstructorDefinition": return new ModelDeserializers.BeanConstructorDefinitionDeserializer();
            case "org.zenithblox.model.app.BeanConstructorsDefinition": return new ModelDeserializers.BeanConstructorsDefinitionDeserializer();
            case "bean": return new ModelDeserializers.BeanDefinitionDeserializer();
            case "org.zenithblox.model.BeanDefinition": return new ModelDeserializers.BeanDefinitionDeserializer();
            case "bean-factory": return new ModelDeserializers.BeanFactoryDefinitionDeserializer();
            case "beanFactory": return new ModelDeserializers.BeanFactoryDefinitionDeserializer();
            case "org.zenithblox.model.BeanFactoryDefinition": return new ModelDeserializers.BeanFactoryDefinitionDeserializer();
            case "org.zenithblox.model.app.BeanPropertiesDefinition": return new ModelDeserializers.BeanPropertiesDefinitionDeserializer();
            case "org.zenithblox.model.app.BeanPropertyDefinition": return new ModelDeserializers.BeanPropertyDefinitionDeserializer();
            case "beanio": return new ModelDeserializers.BeanioDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.BeanioDataFormat": return new ModelDeserializers.BeanioDataFormatDeserializer();
            case "bearer-token": return new ModelDeserializers.BearerTokenDefinitionDeserializer();
            case "bearerToken": return new ModelDeserializers.BearerTokenDefinitionDeserializer();
            case "org.zenithblox.model.rest.BearerTokenDefinition": return new ModelDeserializers.BearerTokenDefinitionDeserializer();
            case "bindy": return new ModelDeserializers.BindyDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.BindyDataFormat": return new ModelDeserializers.BindyDataFormatDeserializer();
            case "blacklist-service-filter": return new ModelDeserializers.BlacklistServiceCallServiceFilterConfigurationDeserializer();
            case "blacklistServiceFilter": return new ModelDeserializers.BlacklistServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.cloud.BlacklistServiceCallServiceFilterConfiguration": return new ModelDeserializers.BlacklistServiceCallServiceFilterConfigurationDeserializer();
            case "cbor": return new ModelDeserializers.CBORDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.CBORDataFormat": return new ModelDeserializers.CBORDataFormatDeserializer();
            case "csimple": return new ModelDeserializers.CSimpleExpressionDeserializer();
            case "org.zenithblox.model.language.CSimpleExpression": return new ModelDeserializers.CSimpleExpressionDeserializer();
            case "caching-service-discovery": return new ModelDeserializers.CachingServiceCallServiceDiscoveryConfigurationDeserializer();
            case "cachingServiceDiscovery": return new ModelDeserializers.CachingServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.CachingServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.CachingServiceCallServiceDiscoveryConfigurationDeserializer();
            case "do-catch": return new ModelDeserializers.CatchDefinitionDeserializer();
            case "doCatch": return new ModelDeserializers.CatchDefinitionDeserializer();
            case "org.zenithblox.model.CatchDefinition": return new ModelDeserializers.CatchDefinitionDeserializer();
            case "choice": return new ModelDeserializers.ChoiceDefinitionDeserializer();
            case "org.zenithblox.model.ChoiceDefinition": return new ModelDeserializers.ChoiceDefinitionDeserializer();
            case "circuit-breaker": return new ModelDeserializers.CircuitBreakerDefinitionDeserializer();
            case "circuitBreaker": return new ModelDeserializers.CircuitBreakerDefinitionDeserializer();
            case "org.zenithblox.model.CircuitBreakerDefinition": return new ModelDeserializers.CircuitBreakerDefinitionDeserializer();
            case "claim-check": return new ModelDeserializers.ClaimCheckDefinitionDeserializer();
            case "claimCheck": return new ModelDeserializers.ClaimCheckDefinitionDeserializer();
            case "org.zenithblox.model.ClaimCheckDefinition": return new ModelDeserializers.ClaimCheckDefinitionDeserializer();
            case "combined-service-discovery": return new ModelDeserializers.CombinedServiceCallServiceDiscoveryConfigurationDeserializer();
            case "combinedServiceDiscovery": return new ModelDeserializers.CombinedServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.CombinedServiceCallServiceDiscoveryConfigurationDeserializer();
            case "combined-service-filter": return new ModelDeserializers.CombinedServiceCallServiceFilterConfigurationDeserializer();
            case "combinedServiceFilter": return new ModelDeserializers.CombinedServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.cloud.CombinedServiceCallServiceFilterConfiguration": return new ModelDeserializers.CombinedServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.app.ComponentScanDefinition": return new ModelDeserializers.ComponentScanDefinitionDeserializer();
            case "constant": return new ModelDeserializers.ConstantExpressionDeserializer();
            case "org.zenithblox.model.language.ConstantExpression": return new ModelDeserializers.ConstantExpressionDeserializer();
            case "consul-service-discovery": return new ModelDeserializers.ConsulServiceCallServiceDiscoveryConfigurationDeserializer();
            case "consulServiceDiscovery": return new ModelDeserializers.ConsulServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.ConsulServiceCallServiceDiscoveryConfigurationDeserializer();
            case "context-scan": return new ModelDeserializers.ContextScanDefinitionDeserializer();
            case "contextScan": return new ModelDeserializers.ContextScanDefinitionDeserializer();
            case "org.zenithblox.model.ContextScanDefinition": return new ModelDeserializers.ContextScanDefinitionDeserializer();
            case "convert-body-to": return new ModelDeserializers.ConvertBodyDefinitionDeserializer();
            case "convertBodyTo": return new ModelDeserializers.ConvertBodyDefinitionDeserializer();
            case "org.zenithblox.model.ConvertBodyDefinition": return new ModelDeserializers.ConvertBodyDefinitionDeserializer();
            case "convert-header-to": return new ModelDeserializers.ConvertHeaderDefinitionDeserializer();
            case "convertHeaderTo": return new ModelDeserializers.ConvertHeaderDefinitionDeserializer();
            case "org.zenithblox.model.ConvertHeaderDefinition": return new ModelDeserializers.ConvertHeaderDefinitionDeserializer();
            case "convert-variable-to": return new ModelDeserializers.ConvertVariableDefinitionDeserializer();
            case "convertVariableTo": return new ModelDeserializers.ConvertVariableDefinitionDeserializer();
            case "org.zenithblox.model.ConvertVariableDefinition": return new ModelDeserializers.ConvertVariableDefinitionDeserializer();
            case "crypto": return new ModelDeserializers.CryptoDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.CryptoDataFormat": return new ModelDeserializers.CryptoDataFormatDeserializer();
            case "csv": return new ModelDeserializers.CsvDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.CsvDataFormat": return new ModelDeserializers.CsvDataFormatDeserializer();
            case "custom": return new ModelDeserializers.CustomDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.CustomDataFormat": return new ModelDeserializers.CustomDataFormatDeserializer();
            case "custom-load-balancer": return new ModelDeserializers.CustomLoadBalancerDefinitionDeserializer();
            case "customLoadBalancer": return new ModelDeserializers.CustomLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.CustomLoadBalancerDefinition": return new ModelDeserializers.CustomLoadBalancerDefinitionDeserializer();
            case "custom-service-filter": return new ModelDeserializers.CustomServiceCallServiceFilterConfigurationDeserializer();
            case "customServiceFilter": return new ModelDeserializers.CustomServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.cloud.CustomServiceCallServiceFilterConfiguration": return new ModelDeserializers.CustomServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.transformer.CustomTransformerDefinition": return new ModelDeserializers.CustomTransformerDefinitionDeserializer();
            case "org.zenithblox.model.validator.CustomValidatorDefinition": return new ModelDeserializers.CustomValidatorDefinitionDeserializer();
            case "org.zenithblox.model.DataFormatDefinition": return new ModelDeserializers.DataFormatDefinitionDeserializer();
            case "org.zenithblox.model.transformer.DataFormatTransformerDefinition": return new ModelDeserializers.DataFormatTransformerDefinitionDeserializer();
            case "data-formats": return new ModelDeserializers.DataFormatsDefinitionDeserializer();
            case "dataFormats": return new ModelDeserializers.DataFormatsDefinitionDeserializer();
            case "org.zenithblox.model.dataformat.DataFormatsDefinition": return new ModelDeserializers.DataFormatsDefinitionDeserializer();
            case "datasonnet": return new ModelDeserializers.DatasonnetExpressionDeserializer();
            case "org.zenithblox.model.language.DatasonnetExpression": return new ModelDeserializers.DatasonnetExpressionDeserializer();
            case "dead-letter-channel": return new ModelDeserializers.DeadLetterChannelDefinitionDeserializer();
            case "deadLetterChannel": return new ModelDeserializers.DeadLetterChannelDefinitionDeserializer();
            case "org.zenithblox.model.errorhandler.DeadLetterChannelDefinition": return new ModelDeserializers.DeadLetterChannelDefinitionDeserializer();
            case "default-error-handler": return new ModelDeserializers.DefaultErrorHandlerDefinitionDeserializer();
            case "defaultErrorHandler": return new ModelDeserializers.DefaultErrorHandlerDefinitionDeserializer();
            case "org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition": return new ModelDeserializers.DefaultErrorHandlerDefinitionDeserializer();
            case "default-load-balancer": return new ModelDeserializers.DefaultServiceCallServiceLoadBalancerConfigurationDeserializer();
            case "defaultLoadBalancer": return new ModelDeserializers.DefaultServiceCallServiceLoadBalancerConfigurationDeserializer();
            case "org.zenithblox.model.cloud.DefaultServiceCallServiceLoadBalancerConfiguration": return new ModelDeserializers.DefaultServiceCallServiceLoadBalancerConfigurationDeserializer();
            case "delay": return new ModelDeserializers.DelayDefinitionDeserializer();
            case "org.zenithblox.model.DelayDefinition": return new ModelDeserializers.DelayDefinitionDeserializer();
            case "delete": return new ModelDeserializers.DeleteDefinitionDeserializer();
            case "org.zenithblox.model.rest.DeleteDefinition": return new ModelDeserializers.DeleteDefinitionDeserializer();
            case "dns-service-discovery": return new ModelDeserializers.DnsServiceCallServiceDiscoveryConfigurationDeserializer();
            case "dnsServiceDiscovery": return new ModelDeserializers.DnsServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.DnsServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.DnsServiceCallServiceDiscoveryConfigurationDeserializer();
            case "dynamic-workflowr": return new ModelDeserializers.DynamicWorkflowrDefinitionDeserializer();
            case "dynamicWorkflowr": return new ModelDeserializers.DynamicWorkflowrDefinitionDeserializer();
            case "org.zenithblox.model.DynamicWorkflowrDefinition": return new ModelDeserializers.DynamicWorkflowrDefinitionDeserializer();
            case "org.zenithblox.model.transformer.EndpointTransformerDefinition": return new ModelDeserializers.EndpointTransformerDefinitionDeserializer();
            case "org.zenithblox.model.validator.EndpointValidatorDefinition": return new ModelDeserializers.EndpointValidatorDefinitionDeserializer();
            case "enrich": return new ModelDeserializers.EnrichDefinitionDeserializer();
            case "org.zenithblox.model.EnrichDefinition": return new ModelDeserializers.EnrichDefinitionDeserializer();
            case "error-handler": return new ModelDeserializers.ErrorHandlerDefinitionDeserializer();
            case "errorHandler": return new ModelDeserializers.ErrorHandlerDefinitionDeserializer();
            case "org.zenithblox.model.ErrorHandlerDefinition": return new ModelDeserializers.ErrorHandlerDefinitionDeserializer();
            case "exchange-property": return new ModelDeserializers.ExchangePropertyExpressionDeserializer();
            case "exchangeProperty": return new ModelDeserializers.ExchangePropertyExpressionDeserializer();
            case "org.zenithblox.model.language.ExchangePropertyExpression": return new ModelDeserializers.ExchangePropertyExpressionDeserializer();
            case "failover-load-balancer": return new ModelDeserializers.FailoverLoadBalancerDefinitionDeserializer();
            case "failoverLoadBalancer": return new ModelDeserializers.FailoverLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.FailoverLoadBalancerDefinition": return new ModelDeserializers.FailoverLoadBalancerDefinitionDeserializer();
            case "fault-tolerance-configuration": return new ModelDeserializers.FaultToleranceConfigurationDefinitionDeserializer();
            case "faultToleranceConfiguration": return new ModelDeserializers.FaultToleranceConfigurationDefinitionDeserializer();
            case "org.zenithblox.model.FaultToleranceConfigurationDefinition": return new ModelDeserializers.FaultToleranceConfigurationDefinitionDeserializer();
            case "fhir-json": return new ModelDeserializers.FhirJsonDataFormatDeserializer();
            case "fhirJson": return new ModelDeserializers.FhirJsonDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.FhirJsonDataFormat": return new ModelDeserializers.FhirJsonDataFormatDeserializer();
            case "fhir-xml": return new ModelDeserializers.FhirXmlDataFormatDeserializer();
            case "fhirXml": return new ModelDeserializers.FhirXmlDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.FhirXmlDataFormat": return new ModelDeserializers.FhirXmlDataFormatDeserializer();
            case "filter": return new ModelDeserializers.FilterDefinitionDeserializer();
            case "org.zenithblox.model.FilterDefinition": return new ModelDeserializers.FilterDefinitionDeserializer();
            case "do-finally": return new ModelDeserializers.FinallyDefinitionDeserializer();
            case "doFinally": return new ModelDeserializers.FinallyDefinitionDeserializer();
            case "org.zenithblox.model.FinallyDefinition": return new ModelDeserializers.FinallyDefinitionDeserializer();
            case "flatpack": return new ModelDeserializers.FlatpackDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.FlatpackDataFormat": return new ModelDeserializers.FlatpackDataFormatDeserializer();
            case "fury": return new ModelDeserializers.FuryDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.FuryDataFormat": return new ModelDeserializers.FuryDataFormatDeserializer();
            case "get": return new ModelDeserializers.GetDefinitionDeserializer();
            case "org.zenithblox.model.rest.GetDefinition": return new ModelDeserializers.GetDefinitionDeserializer();
            case "global-option": return new ModelDeserializers.GlobalOptionDefinitionDeserializer();
            case "globalOption": return new ModelDeserializers.GlobalOptionDefinitionDeserializer();
            case "org.zenithblox.model.GlobalOptionDefinition": return new ModelDeserializers.GlobalOptionDefinitionDeserializer();
            case "global-options": return new ModelDeserializers.GlobalOptionsDefinitionDeserializer();
            case "globalOptions": return new ModelDeserializers.GlobalOptionsDefinitionDeserializer();
            case "org.zenithblox.model.GlobalOptionsDefinition": return new ModelDeserializers.GlobalOptionsDefinitionDeserializer();
            case "grok": return new ModelDeserializers.GrokDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.GrokDataFormat": return new ModelDeserializers.GrokDataFormatDeserializer();
            case "groovy": return new ModelDeserializers.GroovyExpressionDeserializer();
            case "org.zenithblox.model.language.GroovyExpression": return new ModelDeserializers.GroovyExpressionDeserializer();
            case "gzip-deflater": return new ModelDeserializers.GzipDeflaterDataFormatDeserializer();
            case "gzipDeflater": return new ModelDeserializers.GzipDeflaterDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.GzipDeflaterDataFormat": return new ModelDeserializers.GzipDeflaterDataFormatDeserializer();
            case "hl7": return new ModelDeserializers.HL7DataFormatDeserializer();
            case "org.zenithblox.model.dataformat.HL7DataFormat": return new ModelDeserializers.HL7DataFormatDeserializer();
            case "head": return new ModelDeserializers.HeadDefinitionDeserializer();
            case "org.zenithblox.model.rest.HeadDefinition": return new ModelDeserializers.HeadDefinitionDeserializer();
            case "header": return new ModelDeserializers.HeaderExpressionDeserializer();
            case "org.zenithblox.model.language.HeaderExpression": return new ModelDeserializers.HeaderExpressionDeserializer();
            case "healthy-service-filter": return new ModelDeserializers.HealthyServiceCallServiceFilterConfigurationDeserializer();
            case "healthyServiceFilter": return new ModelDeserializers.HealthyServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.cloud.HealthyServiceCallServiceFilterConfiguration": return new ModelDeserializers.HealthyServiceCallServiceFilterConfigurationDeserializer();
            case "hl7terser": return new ModelDeserializers.Hl7TerserExpressionDeserializer();
            case "org.zenithblox.model.language.Hl7TerserExpression": return new ModelDeserializers.Hl7TerserExpressionDeserializer();
            case "ical": return new ModelDeserializers.IcalDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.IcalDataFormat": return new ModelDeserializers.IcalDataFormatDeserializer();
            case "idempotent-consumer": return new ModelDeserializers.IdempotentConsumerDefinitionDeserializer();
            case "idempotentConsumer": return new ModelDeserializers.IdempotentConsumerDefinitionDeserializer();
            case "org.zenithblox.model.IdempotentConsumerDefinition": return new ModelDeserializers.IdempotentConsumerDefinitionDeserializer();
            case "input-type": return new ModelDeserializers.InputTypeDefinitionDeserializer();
            case "inputType": return new ModelDeserializers.InputTypeDefinitionDeserializer();
            case "org.zenithblox.model.InputTypeDefinition": return new ModelDeserializers.InputTypeDefinitionDeserializer();
            case "intercept": return new ModelDeserializers.InterceptDefinitionDeserializer();
            case "org.zenithblox.model.InterceptDefinition": return new ModelDeserializers.InterceptDefinitionDeserializer();
            case "intercept-from": return new ModelDeserializers.InterceptFromDefinitionDeserializer();
            case "interceptFrom": return new ModelDeserializers.InterceptFromDefinitionDeserializer();
            case "org.zenithblox.model.InterceptFromDefinition": return new ModelDeserializers.InterceptFromDefinitionDeserializer();
            case "intercept-send-to-endpoint": return new ModelDeserializers.InterceptSendToEndpointDefinitionDeserializer();
            case "interceptSendToEndpoint": return new ModelDeserializers.InterceptSendToEndpointDefinitionDeserializer();
            case "org.zenithblox.model.InterceptSendToEndpointDefinition": return new ModelDeserializers.InterceptSendToEndpointDefinitionDeserializer();
            case "jackson-xml": return new ModelDeserializers.JacksonXMLDataFormatDeserializer();
            case "jacksonXml": return new ModelDeserializers.JacksonXMLDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.JacksonXMLDataFormat": return new ModelDeserializers.JacksonXMLDataFormatDeserializer();
            case "java": return new ModelDeserializers.JavaExpressionDeserializer();
            case "org.zenithblox.model.language.JavaExpression": return new ModelDeserializers.JavaExpressionDeserializer();
            case "js": return new ModelDeserializers.JavaScriptExpressionDeserializer();
            case "org.zenithblox.model.language.JavaScriptExpression": return new ModelDeserializers.JavaScriptExpressionDeserializer();
            case "jaxb": return new ModelDeserializers.JaxbDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.JaxbDataFormat": return new ModelDeserializers.JaxbDataFormatDeserializer();
            case "joor": return new ModelDeserializers.JoorExpressionDeserializer();
            case "org.zenithblox.model.language.JoorExpression": return new ModelDeserializers.JoorExpressionDeserializer();
            case "jq": return new ModelDeserializers.JqExpressionDeserializer();
            case "org.zenithblox.model.language.JqExpression": return new ModelDeserializers.JqExpressionDeserializer();
            case "json-api": return new ModelDeserializers.JsonApiDataFormatDeserializer();
            case "jsonApi": return new ModelDeserializers.JsonApiDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.JsonApiDataFormat": return new ModelDeserializers.JsonApiDataFormatDeserializer();
            case "json": return new ModelDeserializers.JsonDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.JsonDataFormat": return new ModelDeserializers.JsonDataFormatDeserializer();
            case "jsonpath": return new ModelDeserializers.JsonPathExpressionDeserializer();
            case "org.zenithblox.model.language.JsonPathExpression": return new ModelDeserializers.JsonPathExpressionDeserializer();
            case "jta-transaction-error-handler": return new ModelDeserializers.JtaTransactionErrorHandlerDefinitionDeserializer();
            case "jtaTransactionErrorHandler": return new ModelDeserializers.JtaTransactionErrorHandlerDefinitionDeserializer();
            case "org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition": return new ModelDeserializers.JtaTransactionErrorHandlerDefinitionDeserializer();
            case "kubernetes-service-discovery": return new ModelDeserializers.KubernetesServiceCallServiceDiscoveryConfigurationDeserializer();
            case "kubernetesServiceDiscovery": return new ModelDeserializers.KubernetesServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.KubernetesServiceCallServiceDiscoveryConfigurationDeserializer();
            case "lzf": return new ModelDeserializers.LZFDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.LZFDataFormat": return new ModelDeserializers.LZFDataFormatDeserializer();
            case "lang-chain4j-character-tokenizer": return new ModelDeserializers.LangChain4jCharacterTokenizerDefinitionDeserializer();
            case "langChain4jCharacterTokenizer": return new ModelDeserializers.LangChain4jCharacterTokenizerDefinitionDeserializer();
            case "org.zenithblox.model.tokenizer.LangChain4jCharacterTokenizerDefinition": return new ModelDeserializers.LangChain4jCharacterTokenizerDefinitionDeserializer();
            case "lang-chain4j-line-tokenizer": return new ModelDeserializers.LangChain4jLineTokenizerDefinitionDeserializer();
            case "langChain4jLineTokenizer": return new ModelDeserializers.LangChain4jLineTokenizerDefinitionDeserializer();
            case "org.zenithblox.model.tokenizer.LangChain4jLineTokenizerDefinition": return new ModelDeserializers.LangChain4jLineTokenizerDefinitionDeserializer();
            case "lang-chain4j-paragraph-tokenizer": return new ModelDeserializers.LangChain4jParagraphTokenizerDefinitionDeserializer();
            case "langChain4jParagraphTokenizer": return new ModelDeserializers.LangChain4jParagraphTokenizerDefinitionDeserializer();
            case "org.zenithblox.model.tokenizer.LangChain4jParagraphTokenizerDefinition": return new ModelDeserializers.LangChain4jParagraphTokenizerDefinitionDeserializer();
            case "lang-chain4j-sentence-tokenizer": return new ModelDeserializers.LangChain4jSentenceTokenizerDefinitionDeserializer();
            case "langChain4jSentenceTokenizer": return new ModelDeserializers.LangChain4jSentenceTokenizerDefinitionDeserializer();
            case "org.zenithblox.model.tokenizer.LangChain4jSentenceTokenizerDefinition": return new ModelDeserializers.LangChain4jSentenceTokenizerDefinitionDeserializer();
            case "org.zenithblox.model.tokenizer.LangChain4jTokenizerDefinition": return new ModelDeserializers.LangChain4jTokenizerDefinitionDeserializer();
            case "lang-chain4j-word-tokenizer": return new ModelDeserializers.LangChain4jWordTokenizerDefinitionDeserializer();
            case "langChain4jWordTokenizer": return new ModelDeserializers.LangChain4jWordTokenizerDefinitionDeserializer();
            case "org.zenithblox.model.tokenizer.LangChain4jWordTokenizerDefinition": return new ModelDeserializers.LangChain4jWordTokenizerDefinitionDeserializer();
            case "language": return new ModelDeserializers.LanguageExpressionDeserializer();
            case "org.zenithblox.model.language.LanguageExpression": return new ModelDeserializers.LanguageExpressionDeserializer();
            case "load-balance": return new ModelDeserializers.LoadBalanceDefinitionDeserializer();
            case "loadBalance": return new ModelDeserializers.LoadBalanceDefinitionDeserializer();
            case "org.zenithblox.model.LoadBalanceDefinition": return new ModelDeserializers.LoadBalanceDefinitionDeserializer();
            case "org.zenithblox.model.transformer.LoadTransformerDefinition": return new ModelDeserializers.LoadTransformerDefinitionDeserializer();
            case "log": return new ModelDeserializers.LogDefinitionDeserializer();
            case "org.zenithblox.model.LogDefinition": return new ModelDeserializers.LogDefinitionDeserializer();
            case "loop": return new ModelDeserializers.LoopDefinitionDeserializer();
            case "org.zenithblox.model.LoopDefinition": return new ModelDeserializers.LoopDefinitionDeserializer();
            case "marshal": return new ModelDeserializers.MarshalDefinitionDeserializer();
            case "org.zenithblox.model.MarshalDefinition": return new ModelDeserializers.MarshalDefinitionDeserializer();
            case "method": return new ModelDeserializers.MethodCallExpressionDeserializer();
            case "org.zenithblox.model.language.MethodCallExpression": return new ModelDeserializers.MethodCallExpressionDeserializer();
            case "mime-multipart": return new ModelDeserializers.MimeMultipartDataFormatDeserializer();
            case "mimeMultipart": return new ModelDeserializers.MimeMultipartDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.MimeMultipartDataFormat": return new ModelDeserializers.MimeMultipartDataFormatDeserializer();
            case "multicast": return new ModelDeserializers.MulticastDefinitionDeserializer();
            case "org.zenithblox.model.MulticastDefinition": return new ModelDeserializers.MulticastDefinitionDeserializer();
            case "mutual-tls": return new ModelDeserializers.MutualTLSDefinitionDeserializer();
            case "mutualTLS": return new ModelDeserializers.MutualTLSDefinitionDeserializer();
            case "org.zenithblox.model.rest.MutualTLSDefinition": return new ModelDeserializers.MutualTLSDefinitionDeserializer();
            case "mvel": return new ModelDeserializers.MvelExpressionDeserializer();
            case "org.zenithblox.model.language.MvelExpression": return new ModelDeserializers.MvelExpressionDeserializer();
            case "no-error-handler": return new ModelDeserializers.NoErrorHandlerDefinitionDeserializer();
            case "noErrorHandler": return new ModelDeserializers.NoErrorHandlerDefinitionDeserializer();
            case "org.zenithblox.model.errorhandler.NoErrorHandlerDefinition": return new ModelDeserializers.NoErrorHandlerDefinitionDeserializer();
            case "oauth2": return new ModelDeserializers.OAuth2DefinitionDeserializer();
            case "org.zenithblox.model.rest.OAuth2Definition": return new ModelDeserializers.OAuth2DefinitionDeserializer();
            case "ognl": return new ModelDeserializers.OgnlExpressionDeserializer();
            case "org.zenithblox.model.language.OgnlExpression": return new ModelDeserializers.OgnlExpressionDeserializer();
            case "on-completion": return new ModelDeserializers.OnCompletionDefinitionDeserializer();
            case "onCompletion": return new ModelDeserializers.OnCompletionDefinitionDeserializer();
            case "org.zenithblox.model.OnCompletionDefinition": return new ModelDeserializers.OnCompletionDefinitionDeserializer();
            case "on-exception": return new ModelDeserializers.OnExceptionDefinitionDeserializer();
            case "onException": return new ModelDeserializers.OnExceptionDefinitionDeserializer();
            case "org.zenithblox.model.OnExceptionDefinition": return new ModelDeserializers.OnExceptionDefinitionDeserializer();
            case "on-fallback": return new ModelDeserializers.OnFallbackDefinitionDeserializer();
            case "onFallback": return new ModelDeserializers.OnFallbackDefinitionDeserializer();
            case "org.zenithblox.model.OnFallbackDefinition": return new ModelDeserializers.OnFallbackDefinitionDeserializer();
            case "on-when": return new ModelDeserializers.OnWhenDefinitionDeserializer();
            case "onWhen": return new ModelDeserializers.OnWhenDefinitionDeserializer();
            case "org.zenithblox.model.OnWhenDefinition": return new ModelDeserializers.OnWhenDefinitionDeserializer();
            case "open-api": return new ModelDeserializers.OpenApiDefinitionDeserializer();
            case "openApi": return new ModelDeserializers.OpenApiDefinitionDeserializer();
            case "org.zenithblox.model.rest.OpenApiDefinition": return new ModelDeserializers.OpenApiDefinitionDeserializer();
            case "open-id-connect": return new ModelDeserializers.OpenIdConnectDefinitionDeserializer();
            case "openIdConnect": return new ModelDeserializers.OpenIdConnectDefinitionDeserializer();
            case "org.zenithblox.model.rest.OpenIdConnectDefinition": return new ModelDeserializers.OpenIdConnectDefinitionDeserializer();
            case "optimistic-lock-retry-policy": return new ModelDeserializers.OptimisticLockRetryPolicyDefinitionDeserializer();
            case "optimisticLockRetryPolicy": return new ModelDeserializers.OptimisticLockRetryPolicyDefinitionDeserializer();
            case "org.zenithblox.model.OptimisticLockRetryPolicyDefinition": return new ModelDeserializers.OptimisticLockRetryPolicyDefinitionDeserializer();
            case "otherwise": return new ModelDeserializers.OtherwiseDefinitionDeserializer();
            case "org.zenithblox.model.OtherwiseDefinition": return new ModelDeserializers.OtherwiseDefinitionDeserializer();
            case "org.zenithblox.model.OutputDefinition": return new ModelDeserializers.OutputDefinitionDeserializer();
            case "output-type": return new ModelDeserializers.OutputTypeDefinitionDeserializer();
            case "outputType": return new ModelDeserializers.OutputTypeDefinitionDeserializer();
            case "org.zenithblox.model.OutputTypeDefinition": return new ModelDeserializers.OutputTypeDefinitionDeserializer();
            case "pgp": return new ModelDeserializers.PGPDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.PGPDataFormat": return new ModelDeserializers.PGPDataFormatDeserializer();
            case "package-scan": return new ModelDeserializers.PackageScanDefinitionDeserializer();
            case "packageScan": return new ModelDeserializers.PackageScanDefinitionDeserializer();
            case "org.zenithblox.model.PackageScanDefinition": return new ModelDeserializers.PackageScanDefinitionDeserializer();
            case "param": return new ModelDeserializers.ParamDefinitionDeserializer();
            case "org.zenithblox.model.rest.ParamDefinition": return new ModelDeserializers.ParamDefinitionDeserializer();
            case "parquet-avro": return new ModelDeserializers.ParquetAvroDataFormatDeserializer();
            case "parquetAvro": return new ModelDeserializers.ParquetAvroDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.ParquetAvroDataFormat": return new ModelDeserializers.ParquetAvroDataFormatDeserializer();
            case "pass-through-service-filter": return new ModelDeserializers.PassThroughServiceCallServiceFilterConfigurationDeserializer();
            case "passThroughServiceFilter": return new ModelDeserializers.PassThroughServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.cloud.PassThroughServiceCallServiceFilterConfiguration": return new ModelDeserializers.PassThroughServiceCallServiceFilterConfigurationDeserializer();
            case "patch": return new ModelDeserializers.PatchDefinitionDeserializer();
            case "org.zenithblox.model.rest.PatchDefinition": return new ModelDeserializers.PatchDefinitionDeserializer();
            case "pausable": return new ModelDeserializers.PausableDefinitionDeserializer();
            case "org.zenithblox.model.PausableDefinition": return new ModelDeserializers.PausableDefinitionDeserializer();
            case "pipeline": return new ModelDeserializers.PipelineDefinitionDeserializer();
            case "org.zenithblox.model.PipelineDefinition": return new ModelDeserializers.PipelineDefinitionDeserializer();
            case "policy": return new ModelDeserializers.PolicyDefinitionDeserializer();
            case "org.zenithblox.model.PolicyDefinition": return new ModelDeserializers.PolicyDefinitionDeserializer();
            case "poll": return new ModelDeserializers.PollDefinitionDeserializer();
            case "org.zenithblox.model.PollDefinition": return new ModelDeserializers.PollDefinitionDeserializer();
            case "poll-enrich": return new ModelDeserializers.PollEnrichDefinitionDeserializer();
            case "pollEnrich": return new ModelDeserializers.PollEnrichDefinitionDeserializer();
            case "org.zenithblox.model.PollEnrichDefinition": return new ModelDeserializers.PollEnrichDefinitionDeserializer();
            case "post": return new ModelDeserializers.PostDefinitionDeserializer();
            case "org.zenithblox.model.rest.PostDefinition": return new ModelDeserializers.PostDefinitionDeserializer();
            case "org.zenithblox.model.validator.PredicateValidatorDefinition": return new ModelDeserializers.PredicateValidatorDefinitionDeserializer();
            case "process": return new ModelDeserializers.ProcessDefinitionDeserializer();
            case "org.zenithblox.model.ProcessDefinition": return new ModelDeserializers.ProcessDefinitionDeserializer();
            case "property": return new ModelDeserializers.PropertyDefinitionDeserializer();
            case "org.zenithblox.model.PropertyDefinition": return new ModelDeserializers.PropertyDefinitionDeserializer();
            case "property-expression": return new ModelDeserializers.PropertyExpressionDefinitionDeserializer();
            case "propertyExpression": return new ModelDeserializers.PropertyExpressionDefinitionDeserializer();
            case "org.zenithblox.model.PropertyExpressionDefinition": return new ModelDeserializers.PropertyExpressionDefinitionDeserializer();
            case "protobuf": return new ModelDeserializers.ProtobufDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.ProtobufDataFormat": return new ModelDeserializers.ProtobufDataFormatDeserializer();
            case "put": return new ModelDeserializers.PutDefinitionDeserializer();
            case "org.zenithblox.model.rest.PutDefinition": return new ModelDeserializers.PutDefinitionDeserializer();
            case "python": return new ModelDeserializers.PythonExpressionDeserializer();
            case "org.zenithblox.model.language.PythonExpression": return new ModelDeserializers.PythonExpressionDeserializer();
            case "random-load-balancer": return new ModelDeserializers.RandomLoadBalancerDefinitionDeserializer();
            case "randomLoadBalancer": return new ModelDeserializers.RandomLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.RandomLoadBalancerDefinition": return new ModelDeserializers.RandomLoadBalancerDefinitionDeserializer();
            case "recipient-list": return new ModelDeserializers.RecipientListDefinitionDeserializer();
            case "recipientList": return new ModelDeserializers.RecipientListDefinitionDeserializer();
            case "org.zenithblox.model.RecipientListDefinition": return new ModelDeserializers.RecipientListDefinitionDeserializer();
            case "redelivery-policy": return new ModelDeserializers.RedeliveryPolicyDefinitionDeserializer();
            case "redeliveryPolicy": return new ModelDeserializers.RedeliveryPolicyDefinitionDeserializer();
            case "org.zenithblox.model.RedeliveryPolicyDefinition": return new ModelDeserializers.RedeliveryPolicyDefinitionDeserializer();
            case "ref-error-handler": return new ModelDeserializers.RefErrorHandlerDefinitionDeserializer();
            case "refErrorHandler": return new ModelDeserializers.RefErrorHandlerDefinitionDeserializer();
            case "org.zenithblox.model.errorhandler.RefErrorHandlerDefinition": return new ModelDeserializers.RefErrorHandlerDefinitionDeserializer();
            case "ref": return new ModelDeserializers.RefExpressionDeserializer();
            case "org.zenithblox.model.language.RefExpression": return new ModelDeserializers.RefExpressionDeserializer();
            case "remove-header": return new ModelDeserializers.RemoveHeaderDefinitionDeserializer();
            case "removeHeader": return new ModelDeserializers.RemoveHeaderDefinitionDeserializer();
            case "org.zenithblox.model.RemoveHeaderDefinition": return new ModelDeserializers.RemoveHeaderDefinitionDeserializer();
            case "remove-headers": return new ModelDeserializers.RemoveHeadersDefinitionDeserializer();
            case "removeHeaders": return new ModelDeserializers.RemoveHeadersDefinitionDeserializer();
            case "org.zenithblox.model.RemoveHeadersDefinition": return new ModelDeserializers.RemoveHeadersDefinitionDeserializer();
            case "remove-properties": return new ModelDeserializers.RemovePropertiesDefinitionDeserializer();
            case "removeProperties": return new ModelDeserializers.RemovePropertiesDefinitionDeserializer();
            case "org.zenithblox.model.RemovePropertiesDefinition": return new ModelDeserializers.RemovePropertiesDefinitionDeserializer();
            case "remove-property": return new ModelDeserializers.RemovePropertyDefinitionDeserializer();
            case "removeProperty": return new ModelDeserializers.RemovePropertyDefinitionDeserializer();
            case "org.zenithblox.model.RemovePropertyDefinition": return new ModelDeserializers.RemovePropertyDefinitionDeserializer();
            case "remove-variable": return new ModelDeserializers.RemoveVariableDefinitionDeserializer();
            case "removeVariable": return new ModelDeserializers.RemoveVariableDefinitionDeserializer();
            case "org.zenithblox.model.RemoveVariableDefinition": return new ModelDeserializers.RemoveVariableDefinitionDeserializer();
            case "resequence": return new ModelDeserializers.ResequenceDefinitionDeserializer();
            case "org.zenithblox.model.ResequenceDefinition": return new ModelDeserializers.ResequenceDefinitionDeserializer();
            case "resilience4j-configuration": return new ModelDeserializers.Resilience4jConfigurationDefinitionDeserializer();
            case "resilience4jConfiguration": return new ModelDeserializers.Resilience4jConfigurationDefinitionDeserializer();
            case "org.zenithblox.model.Resilience4jConfigurationDefinition": return new ModelDeserializers.Resilience4jConfigurationDefinitionDeserializer();
            case "response-header": return new ModelDeserializers.ResponseHeaderDefinitionDeserializer();
            case "responseHeader": return new ModelDeserializers.ResponseHeaderDefinitionDeserializer();
            case "org.zenithblox.model.rest.ResponseHeaderDefinition": return new ModelDeserializers.ResponseHeaderDefinitionDeserializer();
            case "response-message": return new ModelDeserializers.ResponseMessageDefinitionDeserializer();
            case "responseMessage": return new ModelDeserializers.ResponseMessageDefinitionDeserializer();
            case "org.zenithblox.model.rest.ResponseMessageDefinition": return new ModelDeserializers.ResponseMessageDefinitionDeserializer();
            case "rest-binding": return new ModelDeserializers.RestBindingDefinitionDeserializer();
            case "restBinding": return new ModelDeserializers.RestBindingDefinitionDeserializer();
            case "org.zenithblox.model.rest.RestBindingDefinition": return new ModelDeserializers.RestBindingDefinitionDeserializer();
            case "rest-configuration": return new ModelDeserializers.RestConfigurationDefinitionDeserializer();
            case "restConfiguration": return new ModelDeserializers.RestConfigurationDefinitionDeserializer();
            case "org.zenithblox.model.rest.RestConfigurationDefinition": return new ModelDeserializers.RestConfigurationDefinitionDeserializer();
            case "rest-context-ref": return new ModelDeserializers.RestContextRefDefinitionDeserializer();
            case "restContextRef": return new ModelDeserializers.RestContextRefDefinitionDeserializer();
            case "org.zenithblox.model.RestContextRefDefinition": return new ModelDeserializers.RestContextRefDefinitionDeserializer();
            case "rest": return new ModelDeserializers.RestDefinitionDeserializer();
            case "org.zenithblox.model.rest.RestDefinition": return new ModelDeserializers.RestDefinitionDeserializer();
            case "rest-property": return new ModelDeserializers.RestPropertyDefinitionDeserializer();
            case "restProperty": return new ModelDeserializers.RestPropertyDefinitionDeserializer();
            case "org.zenithblox.model.rest.RestPropertyDefinition": return new ModelDeserializers.RestPropertyDefinitionDeserializer();
            case "security-definitions": return new ModelDeserializers.RestSecuritiesDefinitionDeserializer();
            case "securityDefinitions": return new ModelDeserializers.RestSecuritiesDefinitionDeserializer();
            case "org.zenithblox.model.rest.RestSecuritiesDefinition": return new ModelDeserializers.RestSecuritiesDefinitionDeserializer();
            case "rests": return new ModelDeserializers.RestsDefinitionDeserializer();
            case "org.zenithblox.model.rest.RestsDefinition": return new ModelDeserializers.RestsDefinitionDeserializer();
            case "resumable": return new ModelDeserializers.ResumableDefinitionDeserializer();
            case "org.zenithblox.model.ResumableDefinition": return new ModelDeserializers.ResumableDefinitionDeserializer();
            case "rollback": return new ModelDeserializers.RollbackDefinitionDeserializer();
            case "org.zenithblox.model.RollbackDefinition": return new ModelDeserializers.RollbackDefinitionDeserializer();
            case "round-robin-load-balancer": return new ModelDeserializers.RoundRobinLoadBalancerDefinitionDeserializer();
            case "roundRobinLoadBalancer": return new ModelDeserializers.RoundRobinLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.RoundRobinLoadBalancerDefinition": return new ModelDeserializers.RoundRobinLoadBalancerDefinitionDeserializer();
            case "workflow-builder": return new ModelDeserializers.WorkflowBuilderDefinitionDeserializer();
            case "workflowBuilder": return new ModelDeserializers.WorkflowBuilderDefinitionDeserializer();
            case "org.zenithblox.model.WorkflowBuilderDefinition": return new ModelDeserializers.WorkflowBuilderDefinitionDeserializer();
            case "workflow-configuration-context-ref": return new ModelDeserializers.WorkflowConfigurationContextRefDefinitionDeserializer();
            case "workflowConfigurationContextRef": return new ModelDeserializers.WorkflowConfigurationContextRefDefinitionDeserializer();
            case "org.zenithblox.model.WorkflowConfigurationContextRefDefinition": return new ModelDeserializers.WorkflowConfigurationContextRefDefinitionDeserializer();
            case "workflow-context-ref": return new ModelDeserializers.WorkflowContextRefDefinitionDeserializer();
            case "workflowContextRef": return new ModelDeserializers.WorkflowContextRefDefinitionDeserializer();
            case "org.zenithblox.model.WorkflowContextRefDefinition": return new ModelDeserializers.WorkflowContextRefDefinitionDeserializer();
            case "workflow": return new ModelDeserializers.WorkflowDefinitionDeserializer();
            case "org.zenithblox.model.WorkflowDefinition": return new ModelDeserializers.WorkflowDefinitionDeserializer();
            case "template-parameter": return new ModelDeserializers.WorkflowTemplateParameterDefinitionDeserializer();
            case "templateParameter": return new ModelDeserializers.WorkflowTemplateParameterDefinitionDeserializer();
            case "org.zenithblox.model.WorkflowTemplateParameterDefinition": return new ModelDeserializers.WorkflowTemplateParameterDefinitionDeserializer();
            case "routing-slip": return new ModelDeserializers.RoutingSlipDefinitionDeserializer();
            case "routingSlip": return new ModelDeserializers.RoutingSlipDefinitionDeserializer();
            case "org.zenithblox.model.RoutingSlipDefinition": return new ModelDeserializers.RoutingSlipDefinitionDeserializer();
            case "rss": return new ModelDeserializers.RssDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.RssDataFormat": return new ModelDeserializers.RssDataFormatDeserializer();
            case "org.zenithblox.model.SagaActionUriDefinition": return new ModelDeserializers.SagaActionUriDefinitionDeserializer();
            case "saga": return new ModelDeserializers.SagaDefinitionDeserializer();
            case "org.zenithblox.model.SagaDefinition": return new ModelDeserializers.SagaDefinitionDeserializer();
            case "sample": return new ModelDeserializers.SamplingDefinitionDeserializer();
            case "org.zenithblox.model.SamplingDefinition": return new ModelDeserializers.SamplingDefinitionDeserializer();
            case "script": return new ModelDeserializers.ScriptDefinitionDeserializer();
            case "org.zenithblox.model.ScriptDefinition": return new ModelDeserializers.ScriptDefinitionDeserializer();
            case "security": return new ModelDeserializers.SecurityDefinitionDeserializer();
            case "org.zenithblox.model.rest.SecurityDefinition": return new ModelDeserializers.SecurityDefinitionDeserializer();
            case "service-call-configuration": return new ModelDeserializers.ServiceCallConfigurationDefinitionDeserializer();
            case "serviceCallConfiguration": return new ModelDeserializers.ServiceCallConfigurationDefinitionDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallConfigurationDefinition": return new ModelDeserializers.ServiceCallConfigurationDefinitionDeserializer();
            case "service-call": return new ModelDeserializers.ServiceCallDefinitionDeserializer();
            case "serviceCall": return new ModelDeserializers.ServiceCallDefinitionDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallDefinition": return new ModelDeserializers.ServiceCallDefinitionDeserializer();
            case "service-expression": return new ModelDeserializers.ServiceCallExpressionConfigurationDeserializer();
            case "serviceExpression": return new ModelDeserializers.ServiceCallExpressionConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallExpressionConfiguration": return new ModelDeserializers.ServiceCallExpressionConfigurationDeserializer();
            case "service-chooser-configuration": return new ModelDeserializers.ServiceCallServiceChooserConfigurationDeserializer();
            case "serviceChooserConfiguration": return new ModelDeserializers.ServiceCallServiceChooserConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallServiceChooserConfiguration": return new ModelDeserializers.ServiceCallServiceChooserConfigurationDeserializer();
            case "service-discovery-configuration": return new ModelDeserializers.ServiceCallServiceDiscoveryConfigurationDeserializer();
            case "serviceDiscoveryConfiguration": return new ModelDeserializers.ServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.ServiceCallServiceDiscoveryConfigurationDeserializer();
            case "service-filter-configuration": return new ModelDeserializers.ServiceCallServiceFilterConfigurationDeserializer();
            case "serviceFilterConfiguration": return new ModelDeserializers.ServiceCallServiceFilterConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallServiceFilterConfiguration": return new ModelDeserializers.ServiceCallServiceFilterConfigurationDeserializer();
            case "load-balancer-configuration": return new ModelDeserializers.ServiceCallServiceLoadBalancerConfigurationDeserializer();
            case "loadBalancerConfiguration": return new ModelDeserializers.ServiceCallServiceLoadBalancerConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ServiceCallServiceLoadBalancerConfiguration": return new ModelDeserializers.ServiceCallServiceLoadBalancerConfigurationDeserializer();
            case "set-body": return new ModelDeserializers.SetBodyDefinitionDeserializer();
            case "setBody": return new ModelDeserializers.SetBodyDefinitionDeserializer();
            case "org.zenithblox.model.SetBodyDefinition": return new ModelDeserializers.SetBodyDefinitionDeserializer();
            case "set-exchange-pattern": return new ModelDeserializers.SetExchangePatternDefinitionDeserializer();
            case "setExchangePattern": return new ModelDeserializers.SetExchangePatternDefinitionDeserializer();
            case "org.zenithblox.model.SetExchangePatternDefinition": return new ModelDeserializers.SetExchangePatternDefinitionDeserializer();
            case "set-header": return new ModelDeserializers.SetHeaderDefinitionDeserializer();
            case "setHeader": return new ModelDeserializers.SetHeaderDefinitionDeserializer();
            case "org.zenithblox.model.SetHeaderDefinition": return new ModelDeserializers.SetHeaderDefinitionDeserializer();
            case "set-headers": return new ModelDeserializers.SetHeadersDefinitionDeserializer();
            case "setHeaders": return new ModelDeserializers.SetHeadersDefinitionDeserializer();
            case "org.zenithblox.model.SetHeadersDefinition": return new ModelDeserializers.SetHeadersDefinitionDeserializer();
            case "set-property": return new ModelDeserializers.SetPropertyDefinitionDeserializer();
            case "setProperty": return new ModelDeserializers.SetPropertyDefinitionDeserializer();
            case "org.zenithblox.model.SetPropertyDefinition": return new ModelDeserializers.SetPropertyDefinitionDeserializer();
            case "set-variable": return new ModelDeserializers.SetVariableDefinitionDeserializer();
            case "setVariable": return new ModelDeserializers.SetVariableDefinitionDeserializer();
            case "org.zenithblox.model.SetVariableDefinition": return new ModelDeserializers.SetVariableDefinitionDeserializer();
            case "set-variables": return new ModelDeserializers.SetVariablesDefinitionDeserializer();
            case "setVariables": return new ModelDeserializers.SetVariablesDefinitionDeserializer();
            case "org.zenithblox.model.SetVariablesDefinition": return new ModelDeserializers.SetVariablesDefinitionDeserializer();
            case "simple": return new ModelDeserializers.SimpleExpressionDeserializer();
            case "org.zenithblox.model.language.SimpleExpression": return new ModelDeserializers.SimpleExpressionDeserializer();
            case "smooks": return new ModelDeserializers.SmooksDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.SmooksDataFormat": return new ModelDeserializers.SmooksDataFormatDeserializer();
            case "soap": return new ModelDeserializers.SoapDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.SoapDataFormat": return new ModelDeserializers.SoapDataFormatDeserializer();
            case "sort": return new ModelDeserializers.SortDefinitionDeserializer();
            case "org.zenithblox.model.SortDefinition": return new ModelDeserializers.SortDefinitionDeserializer();
            case "spel": return new ModelDeserializers.SpELExpressionDeserializer();
            case "org.zenithblox.model.language.SpELExpression": return new ModelDeserializers.SpELExpressionDeserializer();
            case "split": return new ModelDeserializers.SplitDefinitionDeserializer();
            case "org.zenithblox.model.SplitDefinition": return new ModelDeserializers.SplitDefinitionDeserializer();
            case "spring-transaction-error-handler": return new ModelDeserializers.SpringTransactionErrorHandlerDefinitionDeserializer();
            case "springTransactionErrorHandler": return new ModelDeserializers.SpringTransactionErrorHandlerDefinitionDeserializer();
            case "org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition": return new ModelDeserializers.SpringTransactionErrorHandlerDefinitionDeserializer();
            case "static-service-discovery": return new ModelDeserializers.StaticServiceCallServiceDiscoveryConfigurationDeserializer();
            case "staticServiceDiscovery": return new ModelDeserializers.StaticServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.StaticServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.StaticServiceCallServiceDiscoveryConfigurationDeserializer();
            case "step": return new ModelDeserializers.StepDefinitionDeserializer();
            case "org.zenithblox.model.StepDefinition": return new ModelDeserializers.StepDefinitionDeserializer();
            case "sticky-load-balancer": return new ModelDeserializers.StickyLoadBalancerDefinitionDeserializer();
            case "stickyLoadBalancer": return new ModelDeserializers.StickyLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.StickyLoadBalancerDefinition": return new ModelDeserializers.StickyLoadBalancerDefinitionDeserializer();
            case "stop": return new ModelDeserializers.StopDefinitionDeserializer();
            case "org.zenithblox.model.StopDefinition": return new ModelDeserializers.StopDefinitionDeserializer();
            case "stream-config": return new ModelDeserializers.StreamResequencerConfigDeserializer();
            case "streamConfig": return new ModelDeserializers.StreamResequencerConfigDeserializer();
            case "org.zenithblox.model.config.StreamResequencerConfig": return new ModelDeserializers.StreamResequencerConfigDeserializer();
            case "swift-mt": return new ModelDeserializers.SwiftMtDataFormatDeserializer();
            case "swiftMt": return new ModelDeserializers.SwiftMtDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.SwiftMtDataFormat": return new ModelDeserializers.SwiftMtDataFormatDeserializer();
            case "swift-mx": return new ModelDeserializers.SwiftMxDataFormatDeserializer();
            case "swiftMx": return new ModelDeserializers.SwiftMxDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.SwiftMxDataFormat": return new ModelDeserializers.SwiftMxDataFormatDeserializer();
            case "syslog": return new ModelDeserializers.SyslogDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.SyslogDataFormat": return new ModelDeserializers.SyslogDataFormatDeserializer();
            case "tar-file": return new ModelDeserializers.TarFileDataFormatDeserializer();
            case "tarFile": return new ModelDeserializers.TarFileDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.TarFileDataFormat": return new ModelDeserializers.TarFileDataFormatDeserializer();
            case "templated-workflow-parameter": return new ModelDeserializers.TemplatedWorkflowParameterDefinitionDeserializer();
            case "templatedWorkflowParameter": return new ModelDeserializers.TemplatedWorkflowParameterDefinitionDeserializer();
            case "org.zenithblox.model.TemplatedWorkflowParameterDefinition": return new ModelDeserializers.TemplatedWorkflowParameterDefinitionDeserializer();
            case "thread-pool-profile": return new ModelDeserializers.ThreadPoolProfileDefinitionDeserializer();
            case "threadPoolProfile": return new ModelDeserializers.ThreadPoolProfileDefinitionDeserializer();
            case "org.zenithblox.model.ThreadPoolProfileDefinition": return new ModelDeserializers.ThreadPoolProfileDefinitionDeserializer();
            case "threads": return new ModelDeserializers.ThreadsDefinitionDeserializer();
            case "org.zenithblox.model.ThreadsDefinition": return new ModelDeserializers.ThreadsDefinitionDeserializer();
            case "thrift": return new ModelDeserializers.ThriftDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.ThriftDataFormat": return new ModelDeserializers.ThriftDataFormatDeserializer();
            case "throttle": return new ModelDeserializers.ThrottleDefinitionDeserializer();
            case "org.zenithblox.model.ThrottleDefinition": return new ModelDeserializers.ThrottleDefinitionDeserializer();
            case "throw-exception": return new ModelDeserializers.ThrowExceptionDefinitionDeserializer();
            case "throwException": return new ModelDeserializers.ThrowExceptionDefinitionDeserializer();
            case "org.zenithblox.model.ThrowExceptionDefinition": return new ModelDeserializers.ThrowExceptionDefinitionDeserializer();
            case "tidy-markup": return new ModelDeserializers.TidyMarkupDataFormatDeserializer();
            case "tidyMarkup": return new ModelDeserializers.TidyMarkupDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.TidyMarkupDataFormat": return new ModelDeserializers.TidyMarkupDataFormatDeserializer();
            case "to": return new ModelDeserializers.ToDefinitionDeserializer();
            case "org.zenithblox.model.ToDefinition": return new ModelDeserializers.ToDefinitionDeserializer();
            case "to-d": return new ModelDeserializers.ToDynamicDefinitionDeserializer();
            case "toD": return new ModelDeserializers.ToDynamicDefinitionDeserializer();
            case "org.zenithblox.model.ToDynamicDefinition": return new ModelDeserializers.ToDynamicDefinitionDeserializer();
            case "tokenizer": return new ModelDeserializers.TokenizerDefinitionDeserializer();
            case "org.zenithblox.model.TokenizerDefinition": return new ModelDeserializers.TokenizerDefinitionDeserializer();
            case "tokenize": return new ModelDeserializers.TokenizerExpressionDeserializer();
            case "org.zenithblox.model.language.TokenizerExpression": return new ModelDeserializers.TokenizerExpressionDeserializer();
            case "org.zenithblox.model.TokenizerImplementationDefinition": return new ModelDeserializers.TokenizerImplementationDefinitionDeserializer();
            case "topic-load-balancer": return new ModelDeserializers.TopicLoadBalancerDefinitionDeserializer();
            case "topicLoadBalancer": return new ModelDeserializers.TopicLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.TopicLoadBalancerDefinition": return new ModelDeserializers.TopicLoadBalancerDefinitionDeserializer();
            case "transacted": return new ModelDeserializers.TransactedDefinitionDeserializer();
            case "org.zenithblox.model.TransactedDefinition": return new ModelDeserializers.TransactedDefinitionDeserializer();
            case "transform": return new ModelDeserializers.TransformDefinitionDeserializer();
            case "org.zenithblox.model.TransformDefinition": return new ModelDeserializers.TransformDefinitionDeserializer();
            case "transformers": return new ModelDeserializers.TransformersDefinitionDeserializer();
            case "org.zenithblox.model.transformer.TransformersDefinition": return new ModelDeserializers.TransformersDefinitionDeserializer();
            case "do-try": return new ModelDeserializers.TryDefinitionDeserializer();
            case "doTry": return new ModelDeserializers.TryDefinitionDeserializer();
            case "org.zenithblox.model.TryDefinition": return new ModelDeserializers.TryDefinitionDeserializer();
            case "univocity-csv": return new ModelDeserializers.UniVocityCsvDataFormatDeserializer();
            case "univocityCsv": return new ModelDeserializers.UniVocityCsvDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.UniVocityCsvDataFormat": return new ModelDeserializers.UniVocityCsvDataFormatDeserializer();
            case "univocity-fixed": return new ModelDeserializers.UniVocityFixedDataFormatDeserializer();
            case "univocityFixed": return new ModelDeserializers.UniVocityFixedDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.UniVocityFixedDataFormat": return new ModelDeserializers.UniVocityFixedDataFormatDeserializer();
            case "univocity-header": return new ModelDeserializers.UniVocityHeaderDeserializer();
            case "univocityHeader": return new ModelDeserializers.UniVocityHeaderDeserializer();
            case "org.zenithblox.model.dataformat.UniVocityHeader": return new ModelDeserializers.UniVocityHeaderDeserializer();
            case "univocity-tsv": return new ModelDeserializers.UniVocityTsvDataFormatDeserializer();
            case "univocityTsv": return new ModelDeserializers.UniVocityTsvDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.UniVocityTsvDataFormat": return new ModelDeserializers.UniVocityTsvDataFormatDeserializer();
            case "unmarshal": return new ModelDeserializers.UnmarshalDefinitionDeserializer();
            case "org.zenithblox.model.UnmarshalDefinition": return new ModelDeserializers.UnmarshalDefinitionDeserializer();
            case "validate": return new ModelDeserializers.ValidateDefinitionDeserializer();
            case "org.zenithblox.model.ValidateDefinition": return new ModelDeserializers.ValidateDefinitionDeserializer();
            case "validators": return new ModelDeserializers.ValidatorsDefinitionDeserializer();
            case "org.zenithblox.model.validator.ValidatorsDefinition": return new ModelDeserializers.ValidatorsDefinitionDeserializer();
            case "value": return new ModelDeserializers.ValueDefinitionDeserializer();
            case "org.zenithblox.model.ValueDefinition": return new ModelDeserializers.ValueDefinitionDeserializer();
            case "variable": return new ModelDeserializers.VariableExpressionDeserializer();
            case "org.zenithblox.model.language.VariableExpression": return new ModelDeserializers.VariableExpressionDeserializer();
            case "wasm": return new ModelDeserializers.WasmExpressionDeserializer();
            case "org.zenithblox.model.language.WasmExpression": return new ModelDeserializers.WasmExpressionDeserializer();
            case "weighted-load-balancer": return new ModelDeserializers.WeightedLoadBalancerDefinitionDeserializer();
            case "weightedLoadBalancer": return new ModelDeserializers.WeightedLoadBalancerDefinitionDeserializer();
            case "org.zenithblox.model.loadbalancer.WeightedLoadBalancerDefinition": return new ModelDeserializers.WeightedLoadBalancerDefinitionDeserializer();
            case "when": return new ModelDeserializers.WhenDefinitionDeserializer();
            case "org.zenithblox.model.WhenDefinition": return new ModelDeserializers.WhenDefinitionDeserializer();
            case "wire-tap": return new ModelDeserializers.WireTapDefinitionDeserializer();
            case "wireTap": return new ModelDeserializers.WireTapDefinitionDeserializer();
            case "org.zenithblox.model.WireTapDefinition": return new ModelDeserializers.WireTapDefinitionDeserializer();
            case "xml-security": return new ModelDeserializers.XMLSecurityDataFormatDeserializer();
            case "xmlSecurity": return new ModelDeserializers.XMLSecurityDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.XMLSecurityDataFormat": return new ModelDeserializers.XMLSecurityDataFormatDeserializer();
            case "xtokenize": return new ModelDeserializers.XMLTokenizerExpressionDeserializer();
            case "org.zenithblox.model.language.XMLTokenizerExpression": return new ModelDeserializers.XMLTokenizerExpressionDeserializer();
            case "xpath": return new ModelDeserializers.XPathExpressionDeserializer();
            case "org.zenithblox.model.language.XPathExpression": return new ModelDeserializers.XPathExpressionDeserializer();
            case "xquery": return new ModelDeserializers.XQueryExpressionDeserializer();
            case "org.zenithblox.model.language.XQueryExpression": return new ModelDeserializers.XQueryExpressionDeserializer();
            case "yaml": return new ModelDeserializers.YAMLDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.YAMLDataFormat": return new ModelDeserializers.YAMLDataFormatDeserializer();
            case "type-filter": return new ModelDeserializers.YAMLTypeFilterDefinitionDeserializer();
            case "typeFilter": return new ModelDeserializers.YAMLTypeFilterDefinitionDeserializer();
            case "org.zenithblox.model.dataformat.YAMLTypeFilterDefinition": return new ModelDeserializers.YAMLTypeFilterDefinitionDeserializer();
            case "zip-deflater": return new ModelDeserializers.ZipDeflaterDataFormatDeserializer();
            case "zipDeflater": return new ModelDeserializers.ZipDeflaterDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.ZipDeflaterDataFormat": return new ModelDeserializers.ZipDeflaterDataFormatDeserializer();
            case "zip-file": return new ModelDeserializers.ZipFileDataFormatDeserializer();
            case "zipFile": return new ModelDeserializers.ZipFileDataFormatDeserializer();
            case "org.zenithblox.model.dataformat.ZipFileDataFormat": return new ModelDeserializers.ZipFileDataFormatDeserializer();
            case "zookeeper-service-discovery": return new ModelDeserializers.ZooKeeperServiceCallServiceDiscoveryConfigurationDeserializer();
            case "zookeeperServiceDiscovery": return new ModelDeserializers.ZooKeeperServiceCallServiceDiscoveryConfigurationDeserializer();
            case "org.zenithblox.model.cloud.ZooKeeperServiceCallServiceDiscoveryConfiguration": return new ModelDeserializers.ZooKeeperServiceCallServiceDiscoveryConfigurationDeserializer();
        }
        return null;
    }
}
