// Generated by zwangine-yaml-dsl-maven-plugin - do NOT edit this file!
package org.zenithblox.dsl.yaml.deserializers;

import org.zenithblox.dsl.yaml.common.YamlDeserializationContext;
import org.zenithblox.dsl.yaml.common.YamlDeserializerSupport;
import org.zenithblox.model.language.ExpressionDefinition;
import org.zenithblox.spi.annotations.YamlProperty;
import org.zenithblox.spi.annotations.YamlType;
import org.snakeyaml.engine.v2.api.ConstructNode;
import org.snakeyaml.engine.v2.nodes.MappingNode;
import org.snakeyaml.engine.v2.nodes.Node;
import org.snakeyaml.engine.v2.nodes.NodeTuple;

@SuppressWarnings("PMD.UnnecessaryFullyQualifiedName")
public final class ExpressionDeserializers extends YamlDeserializerSupport {
    private ExpressionDeserializers() {
    }

    public static ExpressionDefinition constructExpressionType(Node node) {
        MappingNode mn = asMappingNode(node);
        if (mn.getValue().size() != 1) {
            return null;
        }
        NodeTuple nt = mn.getValue().get(0);
        YamlDeserializationContext dc = getDeserializationContext(node);
        String key = asText(nt.getKeyNode());
        Node val = setDeserializationContext(nt.getValueNode(), dc);
        ExpressionDefinition answer = constructExpressionType(key, val);
        if (answer == null) {
            throw new org.zenithblox.dsl.yaml.common.exception.InvalidExpressionException(node, "Unknown expression with id: " + key);
        }
        return answer;
    }

    public static ExpressionDefinition constructExpressionType(String id, Node node) {
        switch(id) {
            case "constant": {
                return asType(node, org.zenithblox.model.language.ConstantExpression.class);
            }
            case "csimple": {
                return asType(node, org.zenithblox.model.language.CSimpleExpression.class);
            }
            case "datasonnet": {
                return asType(node, org.zenithblox.model.language.DatasonnetExpression.class);
            }
            case "exchangeProperty": {
                return asType(node, org.zenithblox.model.language.ExchangePropertyExpression.class);
            }
            case "groovy": {
                return asType(node, org.zenithblox.model.language.GroovyExpression.class);
            }
            case "header": {
                return asType(node, org.zenithblox.model.language.HeaderExpression.class);
            }
            case "hl7terser": {
                return asType(node, org.zenithblox.model.language.Hl7TerserExpression.class);
            }
            case "java": {
                return asType(node, org.zenithblox.model.language.JavaExpression.class);
            }
            case "joor": {
                return asType(node, org.zenithblox.model.language.JoorExpression.class);
            }
            case "jq": {
                return asType(node, org.zenithblox.model.language.JqExpression.class);
            }
            case "js": {
                return asType(node, org.zenithblox.model.language.JavaScriptExpression.class);
            }
            case "jsonpath": {
                return asType(node, org.zenithblox.model.language.JsonPathExpression.class);
            }
            case "language": {
                return asType(node, org.zenithblox.model.language.LanguageExpression.class);
            }
            case "method": {
                return asType(node, org.zenithblox.model.language.MethodCallExpression.class);
            }
            case "mvel": {
                return asType(node, org.zenithblox.model.language.MvelExpression.class);
            }
            case "ognl": {
                return asType(node, org.zenithblox.model.language.OgnlExpression.class);
            }
            case "python": {
                return asType(node, org.zenithblox.model.language.PythonExpression.class);
            }
            case "ref": {
                return asType(node, org.zenithblox.model.language.RefExpression.class);
            }
            case "simple": {
                return asType(node, org.zenithblox.model.language.SimpleExpression.class);
            }
            case "spel": {
                return asType(node, org.zenithblox.model.language.SpELExpression.class);
            }
            case "tokenize": {
                return asType(node, org.zenithblox.model.language.TokenizerExpression.class);
            }
            case "variable": {
                return asType(node, org.zenithblox.model.language.VariableExpression.class);
            }
            case "wasm": {
                return asType(node, org.zenithblox.model.language.WasmExpression.class);
            }
            case "xpath": {
                return asType(node, org.zenithblox.model.language.XPathExpression.class);
            }
            case "xquery": {
                return asType(node, org.zenithblox.model.language.XQueryExpression.class);
            }
            case "xtokenize": {
                return asType(node, org.zenithblox.model.language.XMLTokenizerExpression.class);
            }
            case "expression": {
                return constructExpressionType(node);
            }
            case "expression-type": {
                return constructExpressionType(node);
            }
            case "expressionType": {
                return constructExpressionType(node);
            }
        }
        return null;
    }

    @YamlType(
            types = org.zenithblox.model.language.ExpressionDefinition.class,
            order = org.zenithblox.dsl.yaml.common.YamlDeserializerResolver.ORDER_LOWEST - 1,
            properties = {
                    @YamlProperty(name = "constant", type = "object:org.zenithblox.model.language.ConstantExpression", oneOf = "expression"),
                    @YamlProperty(name = "csimple", type = "object:org.zenithblox.model.language.CSimpleExpression", oneOf = "expression"),
                    @YamlProperty(name = "datasonnet", type = "object:org.zenithblox.model.language.DatasonnetExpression", oneOf = "expression"),
                    @YamlProperty(name = "exchangeProperty", type = "object:org.zenithblox.model.language.ExchangePropertyExpression", oneOf = "expression"),
                    @YamlProperty(name = "groovy", type = "object:org.zenithblox.model.language.GroovyExpression", oneOf = "expression"),
                    @YamlProperty(name = "header", type = "object:org.zenithblox.model.language.HeaderExpression", oneOf = "expression"),
                    @YamlProperty(name = "hl7terser", type = "object:org.zenithblox.model.language.Hl7TerserExpression", oneOf = "expression"),
                    @YamlProperty(name = "java", type = "object:org.zenithblox.model.language.JavaExpression", oneOf = "expression"),
                    @YamlProperty(name = "joor", type = "object:org.zenithblox.model.language.JoorExpression", oneOf = "expression"),
                    @YamlProperty(name = "jq", type = "object:org.zenithblox.model.language.JqExpression", oneOf = "expression"),
                    @YamlProperty(name = "js", type = "object:org.zenithblox.model.language.JavaScriptExpression", oneOf = "expression"),
                    @YamlProperty(name = "jsonpath", type = "object:org.zenithblox.model.language.JsonPathExpression", oneOf = "expression"),
                    @YamlProperty(name = "language", type = "object:org.zenithblox.model.language.LanguageExpression", oneOf = "expression"),
                    @YamlProperty(name = "method", type = "object:org.zenithblox.model.language.MethodCallExpression", oneOf = "expression"),
                    @YamlProperty(name = "mvel", type = "object:org.zenithblox.model.language.MvelExpression", oneOf = "expression"),
                    @YamlProperty(name = "ognl", type = "object:org.zenithblox.model.language.OgnlExpression", oneOf = "expression"),
                    @YamlProperty(name = "python", type = "object:org.zenithblox.model.language.PythonExpression", oneOf = "expression"),
                    @YamlProperty(name = "ref", type = "object:org.zenithblox.model.language.RefExpression", oneOf = "expression"),
                    @YamlProperty(name = "simple", type = "object:org.zenithblox.model.language.SimpleExpression", oneOf = "expression"),
                    @YamlProperty(name = "spel", type = "object:org.zenithblox.model.language.SpELExpression", oneOf = "expression"),
                    @YamlProperty(name = "tokenize", type = "object:org.zenithblox.model.language.TokenizerExpression", oneOf = "expression"),
                    @YamlProperty(name = "variable", type = "object:org.zenithblox.model.language.VariableExpression", oneOf = "expression"),
                    @YamlProperty(name = "wasm", type = "object:org.zenithblox.model.language.WasmExpression", oneOf = "expression"),
                    @YamlProperty(name = "xpath", type = "object:org.zenithblox.model.language.XPathExpression", oneOf = "expression"),
                    @YamlProperty(name = "xquery", type = "object:org.zenithblox.model.language.XQueryExpression", oneOf = "expression"),
                    @YamlProperty(name = "xtokenize", type = "object:org.zenithblox.model.language.XMLTokenizerExpression", oneOf = "expression")
            }
    )
    public static class ExpressionDefinitionDeserializers implements ConstructNode {
        @Override
        public Object construct(Node node) {
            return constructExpressionType(node);
        }
    }

    @YamlType(
            types = org.zenithblox.model.ExpressionSubElementDefinition.class,
            order = org.zenithblox.dsl.yaml.common.YamlDeserializerResolver.ORDER_LOWEST - 1,
            properties = {
                    @YamlProperty(name = "constant", type = "object:org.zenithblox.model.language.ConstantExpression", oneOf = "expression"),
                    @YamlProperty(name = "csimple", type = "object:org.zenithblox.model.language.CSimpleExpression", oneOf = "expression"),
                    @YamlProperty(name = "datasonnet", type = "object:org.zenithblox.model.language.DatasonnetExpression", oneOf = "expression"),
                    @YamlProperty(name = "exchangeProperty", type = "object:org.zenithblox.model.language.ExchangePropertyExpression", oneOf = "expression"),
                    @YamlProperty(name = "groovy", type = "object:org.zenithblox.model.language.GroovyExpression", oneOf = "expression"),
                    @YamlProperty(name = "header", type = "object:org.zenithblox.model.language.HeaderExpression", oneOf = "expression"),
                    @YamlProperty(name = "hl7terser", type = "object:org.zenithblox.model.language.Hl7TerserExpression", oneOf = "expression"),
                    @YamlProperty(name = "java", type = "object:org.zenithblox.model.language.JavaExpression", oneOf = "expression"),
                    @YamlProperty(name = "joor", type = "object:org.zenithblox.model.language.JoorExpression", oneOf = "expression"),
                    @YamlProperty(name = "jq", type = "object:org.zenithblox.model.language.JqExpression", oneOf = "expression"),
                    @YamlProperty(name = "js", type = "object:org.zenithblox.model.language.JavaScriptExpression", oneOf = "expression"),
                    @YamlProperty(name = "jsonpath", type = "object:org.zenithblox.model.language.JsonPathExpression", oneOf = "expression"),
                    @YamlProperty(name = "language", type = "object:org.zenithblox.model.language.LanguageExpression", oneOf = "expression"),
                    @YamlProperty(name = "method", type = "object:org.zenithblox.model.language.MethodCallExpression", oneOf = "expression"),
                    @YamlProperty(name = "mvel", type = "object:org.zenithblox.model.language.MvelExpression", oneOf = "expression"),
                    @YamlProperty(name = "ognl", type = "object:org.zenithblox.model.language.OgnlExpression", oneOf = "expression"),
                    @YamlProperty(name = "python", type = "object:org.zenithblox.model.language.PythonExpression", oneOf = "expression"),
                    @YamlProperty(name = "ref", type = "object:org.zenithblox.model.language.RefExpression", oneOf = "expression"),
                    @YamlProperty(name = "simple", type = "object:org.zenithblox.model.language.SimpleExpression", oneOf = "expression"),
                    @YamlProperty(name = "spel", type = "object:org.zenithblox.model.language.SpELExpression", oneOf = "expression"),
                    @YamlProperty(name = "tokenize", type = "object:org.zenithblox.model.language.TokenizerExpression", oneOf = "expression"),
                    @YamlProperty(name = "variable", type = "object:org.zenithblox.model.language.VariableExpression", oneOf = "expression"),
                    @YamlProperty(name = "wasm", type = "object:org.zenithblox.model.language.WasmExpression", oneOf = "expression"),
                    @YamlProperty(name = "xpath", type = "object:org.zenithblox.model.language.XPathExpression", oneOf = "expression"),
                    @YamlProperty(name = "xquery", type = "object:org.zenithblox.model.language.XQueryExpression", oneOf = "expression"),
                    @YamlProperty(name = "xtokenize", type = "object:org.zenithblox.model.language.XMLTokenizerExpression", oneOf = "expression")
            }
    )
    public static class ExpressionSubElementDefinitionDeserializers implements ConstructNode {
        @Override
        public Object construct(Node node) {
            ExpressionDefinition val = constructExpressionType(node);
            return new org.zenithblox.model.ExpressionSubElementDefinition(val);
        }
    }
}
