{
  "dataFormats" : {
    "model" : {
      "kind" : "model",
      "name" : "dataFormats",
      "title" : "Data formats",
      "description" : "Configure data formats.",
      "deprecated" : false,
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.DataFormatsDefinition",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "dataFormats" : {
        "index" : 0,
        "kind" : "element",
        "displayName" : "Data Formats",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.DataFormatDefinition>",
        "oneOf" : [ "asn1", "avro", "barcode", "base64", "beanio", "bindy", "cbor", "crypto", "csv", "custom", "fhirJson", "fhirXml", "flatpack", "fury", "grok", "gzipDeflater", "hl7", "ical", "jacksonXml", "jaxb", "json", "jsonApi", "lzf", "mimeMultipart", "parquetAvro", "pgp", "protobuf", "rss", "smooks", "soap", "swiftMt", "swiftMx", "syslog", "tarFile", "thrift", "tidyMarkup", "univocityCsv", "univocityFixed", "univocityTsv", "xmlSecurity", "yaml", "zipDeflater", "zipFile" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A list holding the configured data formats"
      }
    },
    "propertiesSchema" : {
      "type" : "array",
      "additionalProperties" : false,
      "items" : {
        "$ref" : "#/definitions/org.zenithblox.model.dataformat.DataFormatsDefinition"
      },
      "definitions" : {
        "org.zenithblox.model.dataformat.DataFormatsDefinition" : {
          "title" : "Data formats",
          "description" : "Configure data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "asn1" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ASN1DataFormat"
            },
            "avro" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.AvroDataFormat"
            },
            "barcode" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BarcodeDataFormat"
            },
            "base64" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.Base64DataFormat"
            },
            "beanio" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BeanioDataFormat"
            },
            "bindy" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BindyDataFormat"
            },
            "cbor" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CBORDataFormat"
            },
            "crypto" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CryptoDataFormat"
            },
            "csv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CsvDataFormat"
            },
            "custom" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CustomDataFormat"
            },
            "fhirJson" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FhirJsonDataFormat"
            },
            "fhirXml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FhirXmlDataFormat"
            },
            "flatpack" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FlatpackDataFormat"
            },
            "fury" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FuryDataFormat"
            },
            "grok" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.GrokDataFormat"
            },
            "gzipDeflater" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.GzipDeflaterDataFormat"
            },
            "hl7" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.HL7DataFormat"
            },
            "ical" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.IcalDataFormat"
            },
            "jacksonXml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JacksonXMLDataFormat"
            },
            "jaxb" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JaxbDataFormat"
            },
            "json" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JsonDataFormat"
            },
            "jsonApi" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JsonApiDataFormat"
            },
            "lzf" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.LZFDataFormat"
            },
            "mimeMultipart" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.MimeMultipartDataFormat"
            },
            "parquetAvro" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ParquetAvroDataFormat"
            },
            "pgp" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.PGPDataFormat"
            },
            "protobuf" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ProtobufDataFormat"
            },
            "rss" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.RssDataFormat"
            },
            "smooks" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SmooksDataFormat"
            },
            "soap" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SoapDataFormat"
            },
            "swiftMt" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SwiftMtDataFormat"
            },
            "swiftMx" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SwiftMxDataFormat"
            },
            "syslog" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SyslogDataFormat"
            },
            "tarFile" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.TarFileDataFormat"
            },
            "thrift" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ThriftDataFormat"
            },
            "tidyMarkup" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.TidyMarkupDataFormat"
            },
            "univocityCsv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityCsvDataFormat"
            },
            "univocityFixed" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityFixedDataFormat"
            },
            "univocityTsv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityTsvDataFormat"
            },
            "xmlSecurity" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.XMLSecurityDataFormat"
            },
            "yaml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLDataFormat"
            },
            "zipDeflater" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ZipDeflaterDataFormat"
            },
            "zipFile" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ZipFileDataFormat"
            }
          }
        },
        "org.zenithblox.model.dataformat.ASN1DataFormat" : {
          "title" : "ASN.1 File",
          "description" : "Encode and decode data structures using Abstract Syntax Notation One (ASN.1).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class to use when unmarshalling.",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the asn1 file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.AvroDataFormat" : {
          "title" : "Avro",
          "description" : "Serialize and deserialize messages using Apache Avro binary data format.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClassName" : {
              "type" : "string",
              "title" : "Instance Class Name",
              "description" : "Class name to use for marshal and unmarshalling",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which Avro library to use.",
              "default" : "avroJackson",
              "enum" : [ "ApacheAvro", "Jackson" ],
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.component.jackson.SchemaResolver"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.BarcodeDataFormat" : {
          "title" : "Barcode",
          "description" : "Transform strings to various 1D/2D barcode bitmap formats and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "barcodeFormat" : {
              "type" : "string",
              "title" : "Barcode Format",
              "description" : "Barcode format such as QR-Code",
              "$comment" : "group:common"
            },
            "imageType" : {
              "type" : "string",
              "title" : "Image Type",
              "description" : "Image type of the barcode such as png",
              "$comment" : "group:common"
            },
            "width" : {
              "type" : "number",
              "title" : "Width",
              "description" : "Width of the barcode",
              "$comment" : "group:common"
            },
            "height" : {
              "type" : "number",
              "title" : "Height",
              "description" : "Height of the barcode",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.Base64DataFormat" : {
          "title" : "Base64",
          "description" : "Encode and decode data using Base64.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "lineLength" : {
              "type" : "number",
              "title" : "Line Length",
              "description" : "To specific a maximum line length for the encoded data. By default 76 is used.",
              "default" : "76",
              "$comment" : "group:common"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separators to use. Uses new line characters (CRLF) by default.",
              "$comment" : "group:advanced"
            },
            "urlSafe" : {
              "type" : "boolean",
              "title" : "Url Safe",
              "description" : "Instead of emitting '' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes. Is by default false.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.BeanioDataFormat" : {
          "title" : "BeanIO",
          "description" : "Marshal and unmarshal Java beans to and from flat files (such as CSV, delimited, or fixed length formats).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "mapping" : {
              "type" : "string",
              "title" : "Mapping",
              "description" : "The BeanIO mapping file. Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file.",
              "$comment" : "group:common"
            },
            "streamName" : {
              "type" : "string",
              "title" : "Stream Name",
              "description" : "The name of the stream to use.",
              "$comment" : "group:common"
            },
            "ignoreUnidentifiedRecords" : {
              "type" : "boolean",
              "title" : "Ignore Unidentified Records",
              "description" : "Whether to ignore unidentified records.",
              "$comment" : "group:common"
            },
            "ignoreUnexpectedRecords" : {
              "type" : "boolean",
              "title" : "Ignore Unexpected Records",
              "description" : "Whether to ignore unexpected records.",
              "$comment" : "group:common"
            },
            "ignoreInvalidRecords" : {
              "type" : "boolean",
              "title" : "Ignore Invalid Records",
              "description" : "Whether to ignore invalid records.",
              "$comment" : "group:common"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "The charset to use. Is by default the JVM platform default charset.",
              "$comment" : "group:advanced"
            },
            "beanReaderErrorHandlerType" : {
              "type" : "string",
              "title" : "Bean Reader Error Handler Type",
              "description" : "To use a custom org.zenithblox.dataformat.beanio.BeanIOErrorHandler as error handler while parsing. Configure the fully qualified class name of the error handler. Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords may not be in use when you use a custom error handler.",
              "$comment" : "group:advanced"
            },
            "unmarshalSingleObject" : {
              "type" : "boolean",
              "title" : "Unmarshal Single Object",
              "description" : "This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter is only intended in special use-cases where beanio maps the Zwangine message to a single POJO bean.",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "mapping", "streamName" ]
        },
        "org.zenithblox.model.dataformat.BindyDataFormat" : {
          "title" : "Bindy",
          "description" : "Marshal and unmarshal Java beans from and to flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to use Csv, Fixed, or KeyValue.",
              "enum" : [ "Csv", "Fixed", "KeyValue" ],
              "$comment" : "group:common"
            },
            "classType" : {
              "type" : "string",
              "title" : "Class Type",
              "description" : "Name of model class to use.",
              "$comment" : "group:common"
            },
            "allowEmptyStream" : {
              "type" : "boolean",
              "title" : "Allow Empty Stream",
              "description" : "Whether to allow empty streams in the unmarshal process. If true, no exception will be thrown when a body without records is provided.",
              "$comment" : "group:common"
            },
            "unwrapSingleInstance" : {
              "type" : "boolean",
              "title" : "Unwrap Single Instance",
              "description" : "When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a java.util.List.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "locale" : {
              "type" : "string",
              "title" : "Locale",
              "description" : "To configure a default locale to use, such as us for united states. To use the JVM platform default locale then use the name default",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "type" ]
        },
        "org.zenithblox.model.dataformat.CBORDataFormat" : {
          "title" : "CBOR",
          "description" : "Unmarshal a CBOR payload to POJO and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson CBOR ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson CBOR is allowed to attempt to use the ZwangineCBORUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.CryptoDataFormat" : {
          "title" : "Crypto (Java Cryptographic Extension)",
          "description" : "Encrypt and decrypt messages using Java Cryptography Extension (JCE).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "algorithm" : {
              "type" : "string",
              "title" : "Algorithm",
              "description" : "The JCE algorithm name indicating the cryptographic algorithm that will be used.",
              "$comment" : "group:common"
            },
            "keyRef" : {
              "type" : "string",
              "title" : "Key Ref",
              "description" : "Refers to the secret key to lookup from the register to use.",
              "$comment" : "group:common"
            },
            "cryptoProvider" : {
              "type" : "string",
              "title" : "Crypto Provider",
              "description" : "The name of the JCE Security Provider that should be used.",
              "$comment" : "group:advanced"
            },
            "initVectorRef" : {
              "type" : "string",
              "title" : "Init Vector Ref",
              "description" : "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher.",
              "$comment" : "group:advanced"
            },
            "algorithmParameterRef" : {
              "type" : "string",
              "title" : "Algorithm Parameter Ref",
              "description" : "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type.",
              "$comment" : "group:advanced"
            },
            "bufferSize" : {
              "type" : "number",
              "title" : "Buffer Size",
              "description" : "The size of the buffer used in the signature process.",
              "default" : "4096",
              "$comment" : "group:common"
            },
            "macAlgorithm" : {
              "type" : "string",
              "title" : "Mac Algorithm",
              "description" : "The JCE algorithm name indicating the Message Authentication algorithm.",
              "default" : "HmacSHA1",
              "$comment" : "group:common"
            },
            "shouldAppendHMAC" : {
              "type" : "boolean",
              "title" : "Should Append HMAC",
              "description" : "Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data.",
              "$comment" : "group:common",
              "default" : true
            },
            "inline" : {
              "type" : "boolean",
              "title" : "Inline",
              "description" : "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.CsvDataFormat" : {
          "title" : "CSV",
          "description" : "Handle CSV (Comma Separated Values) payloads.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "formatRef" : {
              "type" : "string",
              "title" : "Format Ref",
              "description" : "The reference format to use, it will be updated with the other format options, the default value is CSVFormat.DEFAULT",
              "$comment" : "group:advanced"
            },
            "formatName" : {
              "type" : "string",
              "title" : "Format Name",
              "description" : "The name of the format to use, the default value is CSVFormat.DEFAULT",
              "default" : "DEFAULT",
              "enum" : [ "DEFAULT", "EXCEL", "INFORMIX_UNLOAD", "INFORMIX_UNLOAD_CSV", "MYSQL", "RFC4180" ],
              "$comment" : "group:advanced"
            },
            "commentMarkerDisabled" : {
              "type" : "boolean",
              "title" : "Comment Marker Disabled",
              "description" : "Disables the comment marker of the reference format.",
              "$comment" : "group:advanced"
            },
            "commentMarker" : {
              "type" : "string",
              "title" : "Comment Marker",
              "description" : "Sets the comment marker of the reference format.",
              "$comment" : "group:advanced"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "Sets the delimiter to use. The default value is , (comma)",
              "$comment" : "group:common"
            },
            "escapeDisabled" : {
              "type" : "boolean",
              "title" : "Escape Disabled",
              "description" : "Use for disabling using escape character",
              "$comment" : "group:advanced"
            },
            "escape" : {
              "type" : "string",
              "title" : "Escape",
              "description" : "Sets the escape character to use",
              "$comment" : "group:advanced"
            },
            "headerDisabled" : {
              "type" : "boolean",
              "title" : "Header Disabled",
              "description" : "Use for disabling headers",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "To configure the CSV headers",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:common"
            },
            "allowMissingColumnNames" : {
              "type" : "boolean",
              "title" : "Allow Missing Column Names",
              "description" : "Whether to allow missing column names.",
              "$comment" : "group:common"
            },
            "ignoreEmptyLines" : {
              "type" : "boolean",
              "title" : "Ignore Empty Lines",
              "description" : "Whether to ignore empty lines.",
              "$comment" : "group:common"
            },
            "ignoreSurroundingSpaces" : {
              "type" : "boolean",
              "title" : "Ignore Surrounding Spaces",
              "description" : "Whether to ignore surrounding spaces",
              "$comment" : "group:common"
            },
            "nullStringDisabled" : {
              "type" : "boolean",
              "title" : "Null String Disabled",
              "description" : "Used to disable null strings",
              "$comment" : "group:advanced"
            },
            "nullString" : {
              "type" : "string",
              "title" : "Null String",
              "description" : "Sets the null string",
              "$comment" : "group:advanced"
            },
            "quoteDisabled" : {
              "type" : "boolean",
              "title" : "Quote Disabled",
              "description" : "Used to disable quotes",
              "$comment" : "group:common"
            },
            "quote" : {
              "type" : "string",
              "title" : "Quote",
              "description" : "Sets the quote to use which by default is double-quote character",
              "$comment" : "group:common"
            },
            "recordSeparatorDisabled" : {
              "type" : "string",
              "title" : "Record Separator Disabled",
              "description" : "Used for disabling record separator",
              "$comment" : "group:common"
            },
            "recordSeparator" : {
              "type" : "string",
              "title" : "Record Separator",
              "description" : "Sets the record separator (aka new line) which by default is new line characters (CRLF)",
              "$comment" : "group:common"
            },
            "skipHeaderRecord" : {
              "type" : "boolean",
              "title" : "Skip Header Record",
              "description" : "Whether to skip the header record in the output",
              "$comment" : "group:common"
            },
            "quoteMode" : {
              "type" : "string",
              "title" : "Quote Mode",
              "description" : "Sets the quote mode",
              "enum" : [ "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE" ],
              "$comment" : "group:common"
            },
            "ignoreHeaderCase" : {
              "type" : "boolean",
              "title" : "Ignore Header Case",
              "description" : "Sets whether or not to ignore case when accessing header names.",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Sets whether or not to trim leading and trailing blanks.",
              "$comment" : "group:common"
            },
            "trailingDelimiter" : {
              "type" : "boolean",
              "title" : "Trailing Delimiter",
              "description" : "Sets whether or not to add a trailing delimiter.",
              "$comment" : "group:common"
            },
            "marshallerFactoryRef" : {
              "type" : "string",
              "title" : "Marshaller Factory Ref",
              "description" : "Sets the implementation of the CsvMarshallerFactory interface which is able to customize marshalling/unmarshalling behavior by extending CsvMarshaller or creating it from scratch.",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one.",
              "$comment" : "group:advanced"
            },
            "useMaps" : {
              "type" : "boolean",
              "title" : "Use Maps",
              "description" : "Whether the unmarshalling should produce maps (HashMap)for the lines values instead of lists. It requires to have header (either defined or collected).",
              "$comment" : "group:common"
            },
            "useOrderedMaps" : {
              "type" : "boolean",
              "title" : "Use Ordered Maps",
              "description" : "Whether the unmarshalling should produce ordered maps (LinkedHashMap) for the lines values instead of lists. It requires to have header (either defined or collected).",
              "$comment" : "group:common"
            },
            "recordConverterRef" : {
              "type" : "string",
              "title" : "Record Converter Ref",
              "description" : "Refers to a custom CsvRecordConverter to lookup from the registry to use.",
              "$comment" : "group:advanced"
            },
            "captureHeaderRecord" : {
              "type" : "boolean",
              "title" : "Capture Header Record",
              "description" : "Whether the unmarshalling should capture the header record and store it in the message header",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.CustomDataFormat" : {
          "title" : "Custom",
          "description" : "Delegate to a custom org.zenithblox.spi.DataFormat implementation via Zwangine registry.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to the custom org.zenithblox.spi.DataFormat to lookup from the Zwangine registry.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.FhirJsonDataFormat" : {
          "title" : "FHIR JSon",
          "description" : "Marshall and unmarshall FHIR objects to/from JSON.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "fhirVersion" : {
              "type" : "string",
              "title" : "Fhir Version",
              "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
              "default" : "R4",
              "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
              "$comment" : "group:common"
            },
            "fhirContext" : {
              "type" : "string",
              "title" : "Fhir Context",
              "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
              "$comment" : "group:common"
            },
            "parserErrorHandler" : {
              "type" : "string",
              "title" : "Parser Error Handler",
              "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
              "$comment" : "group:advanced"
            },
            "parserOptions" : {
              "type" : "string",
              "title" : "Parser Options",
              "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
              "$comment" : "group:advanced"
            },
            "preferTypes" : {
              "type" : "string",
              "title" : "Prefer Types",
              "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "forceResourceId" : {
              "type" : "string",
              "title" : "Force Resource Id",
              "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
              "$comment" : "group:advanced"
            },
            "serverBaseUrl" : {
              "type" : "string",
              "title" : "Server Base Url",
              "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
              "$comment" : "group:advanced"
            },
            "omitResourceId" : {
              "type" : "boolean",
              "title" : "Omit Resource Id",
              "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
              "$comment" : "group:advanced"
            },
            "encodeElementsAppliesToChildResourcesOnly" : {
              "type" : "boolean",
              "title" : "Encode Elements Applies To Child Resources Only",
              "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
              "$comment" : "group:advanced"
            },
            "encodeElements" : {
              "type" : "string",
              "title" : "Encode Elements",
              "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
              "$comment" : "group:advanced"
            },
            "dontEncodeElements" : {
              "type" : "string",
              "title" : "Dont Encode Elements",
              "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
              "$comment" : "group:advanced"
            },
            "stripVersionsFromReferences" : {
              "type" : "boolean",
              "title" : "Strip Versions From References",
              "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
              "$comment" : "group:advanced"
            },
            "overrideResourceIdWithBundleEntryFullUrl" : {
              "type" : "boolean",
              "title" : "Override Resource Id With Bundle Entry Full Url",
              "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
              "$comment" : "group:advanced"
            },
            "summaryMode" : {
              "type" : "boolean",
              "title" : "Summary Mode",
              "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
              "$comment" : "group:advanced"
            },
            "suppressNarratives" : {
              "type" : "boolean",
              "title" : "Suppress Narratives",
              "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
              "$comment" : "group:advanced"
            },
            "dontStripVersionsFromReferencesAtPaths" : {
              "type" : "string",
              "title" : "Dont Strip Versions From References At Paths",
              "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.FhirXmlDataFormat" : {
          "title" : "FHIR XML",
          "description" : "Marshall and unmarshall FHIR objects to/from XML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "fhirVersion" : {
              "type" : "string",
              "title" : "Fhir Version",
              "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
              "default" : "R4",
              "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
              "$comment" : "group:common"
            },
            "fhirContext" : {
              "type" : "string",
              "title" : "Fhir Context",
              "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
              "$comment" : "group:common"
            },
            "parserErrorHandler" : {
              "type" : "string",
              "title" : "Parser Error Handler",
              "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
              "$comment" : "group:advanced"
            },
            "parserOptions" : {
              "type" : "string",
              "title" : "Parser Options",
              "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
              "$comment" : "group:advanced"
            },
            "preferTypes" : {
              "type" : "string",
              "title" : "Prefer Types",
              "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "forceResourceId" : {
              "type" : "string",
              "title" : "Force Resource Id",
              "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
              "$comment" : "group:advanced"
            },
            "serverBaseUrl" : {
              "type" : "string",
              "title" : "Server Base Url",
              "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
              "$comment" : "group:advanced"
            },
            "omitResourceId" : {
              "type" : "boolean",
              "title" : "Omit Resource Id",
              "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
              "$comment" : "group:advanced"
            },
            "encodeElementsAppliesToChildResourcesOnly" : {
              "type" : "boolean",
              "title" : "Encode Elements Applies To Child Resources Only",
              "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
              "$comment" : "group:advanced"
            },
            "encodeElements" : {
              "type" : "string",
              "title" : "Encode Elements",
              "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
              "$comment" : "group:advanced"
            },
            "dontEncodeElements" : {
              "type" : "string",
              "title" : "Dont Encode Elements",
              "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
              "$comment" : "group:advanced"
            },
            "stripVersionsFromReferences" : {
              "type" : "boolean",
              "title" : "Strip Versions From References",
              "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
              "$comment" : "group:advanced"
            },
            "overrideResourceIdWithBundleEntryFullUrl" : {
              "type" : "boolean",
              "title" : "Override Resource Id With Bundle Entry Full Url",
              "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
              "$comment" : "group:advanced"
            },
            "summaryMode" : {
              "type" : "boolean",
              "title" : "Summary Mode",
              "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
              "$comment" : "group:advanced"
            },
            "suppressNarratives" : {
              "type" : "boolean",
              "title" : "Suppress Narratives",
              "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
              "$comment" : "group:advanced"
            },
            "dontStripVersionsFromReferencesAtPaths" : {
              "type" : "string",
              "title" : "Dont Strip Versions From References At Paths",
              "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.FlatpackDataFormat" : {
          "title" : "Flatpack",
          "description" : "Marshal and unmarshal Java lists and maps to/from flat files (such as CSV, delimited, or fixed length formats) using Flatpack library.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "definition" : {
              "type" : "string",
              "title" : "Definition",
              "description" : "The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap.",
              "$comment" : "group:common"
            },
            "fixed" : {
              "type" : "boolean",
              "title" : "Fixed",
              "description" : "Delimited or fixed. Is by default false = delimited",
              "$comment" : "group:common"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "The delimiter char (could be ; , or similar)",
              "default" : ",",
              "$comment" : "group:common"
            },
            "ignoreFirstRecord" : {
              "type" : "boolean",
              "title" : "Ignore First Record",
              "description" : "Whether the first line is ignored for delimited files (for the column headers). Is by default true.",
              "$comment" : "group:common",
              "default" : true
            },
            "allowShortLines" : {
              "type" : "boolean",
              "title" : "Allow Short Lines",
              "description" : "Allows for lines to be shorter than expected and ignores the extra characters",
              "$comment" : "group:common"
            },
            "ignoreExtraColumns" : {
              "type" : "boolean",
              "title" : "Ignore Extra Columns",
              "description" : "Allows for lines to be longer than expected and ignores the extra characters.",
              "$comment" : "group:common"
            },
            "textQualifier" : {
              "type" : "string",
              "title" : "Text Qualifier",
              "description" : "If the text is qualified with a character. Uses quote character by default.",
              "$comment" : "group:advanced"
            },
            "parserFactoryRef" : {
              "type" : "string",
              "title" : "Parser Factory Ref",
              "description" : "References to a custom parser factory to lookup in the registry",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.FuryDataFormat" : {
          "title" : "Fury",
          "description" : "Serialize and deserialize messages using Apache Fury",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "requireClassRegistration" : {
              "type" : "boolean",
              "title" : "Require Class Registration",
              "description" : "Whether to require register classes",
              "$comment" : "group:advanced",
              "default" : true
            },
            "threadSafe" : {
              "type" : "boolean",
              "title" : "Thread Safe",
              "description" : "Whether to use the threadsafe fury",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowAutoWiredFury" : {
              "type" : "boolean",
              "title" : "Allow Auto Wired Fury",
              "description" : "Whether to auto-discover Fury from the registry",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.GrokDataFormat" : {
          "title" : "Grok",
          "description" : "Unmarshal unstructured data to objects using Logstash based Grok patterns.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "pattern" : {
              "type" : "string",
              "title" : "Pattern",
              "description" : "The grok pattern to match lines of input",
              "$comment" : "group:common"
            },
            "flattened" : {
              "type" : "boolean",
              "title" : "Flattened",
              "description" : "Turns on flattened mode. In flattened mode the exception is thrown when there are multiple pattern matches with same key.",
              "$comment" : "group:common"
            },
            "allowMultipleMatchesPerLine" : {
              "type" : "boolean",
              "title" : "Allow Multiple Matches Per Line",
              "description" : "If false, every line of input is matched for pattern only once. Otherwise the line can be scanned multiple times when non-terminal pattern is used.",
              "$comment" : "group:common",
              "default" : true
            },
            "namedOnly" : {
              "type" : "boolean",
              "title" : "Named Only",
              "description" : "Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})",
              "$comment" : "group:common"
            }
          },
          "required" : [ "pattern" ]
        },
        "org.zenithblox.model.dataformat.GzipDeflaterDataFormat" : {
          "title" : "GZip Deflater",
          "description" : "Compress and decompress messages using java.util.zip.GZIPStream.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.HL7DataFormat" : {
          "title" : "HL7",
          "description" : "Marshal and unmarshal HL7 (Health Care) model objects using the HL7 MLLP codec.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the HL7 message Is by default true.",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.IcalDataFormat" : {
          "title" : "iCal",
          "description" : "Marshal and unmarshal iCal (.ics) documents to/from model objects.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "validating" : {
              "type" : "boolean",
              "title" : "Validating",
              "description" : "Whether to validate.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.JacksonXMLDataFormat" : {
          "title" : "Jackson XML",
          "description" : "Unmarshal an XML payloads to POJOs and back using XMLMapper extension of Jackson.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "xmlMapper" : {
              "type" : "string",
              "title" : "Xml Mapper",
              "description" : "Lookup and use the existing XmlMapper with the given id.",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "enableJaxbAnnotationModule" : {
              "type" : "boolean",
              "title" : "Enable Jaxb Annotation Module",
              "description" : "Whether to enable the JAXB annotations module when using jackson. When enabled then JAXB annotations can be used by Jackson.",
              "$comment" : "group:advanced"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.JaxbDataFormat" : {
          "title" : "JAXB",
          "description" : "Unmarshal XML payloads to POJOs and back using JAXB2 XML marshalling standard.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "contextPath" : {
              "type" : "string",
              "title" : "Context Path",
              "description" : "Package name where your JAXB classes are located.",
              "$comment" : "group:common"
            },
            "contextPathIsClassName" : {
              "type" : "boolean",
              "title" : "Context Path Is Class Name",
              "description" : "This can be set to true to mark that the contextPath is referring to a classname and not a package name.",
              "$comment" : "group:common"
            },
            "schema" : {
              "type" : "string",
              "title" : "Schema",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "$comment" : "group:common"
            },
            "schemaSeverityLevel" : {
              "type" : "string",
              "title" : "Schema Severity Level",
              "description" : "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error.",
              "default" : "0",
              "enum" : [ "0", "1", "2" ],
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common",
              "default" : true
            },
            "objectFactory" : {
              "type" : "boolean",
              "title" : "Object Factory",
              "description" : "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "ignoreJAXBElement" : {
              "type" : "boolean",
              "title" : "Ignore JAXBElement",
              "description" : "Whether to ignore JAXBElement elements - only needed to be set to false in very special use-cases.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "mustBeJAXBElement" : {
              "type" : "boolean",
              "title" : "Must Be JAXBElement",
              "description" : "Whether marhsalling must be java objects with JAXB annotations. And if not then it fails. This option can be set to false to relax that, such as when the data is already in XML format.",
              "$comment" : "group:advanced"
            },
            "filterNonXmlChars" : {
              "type" : "boolean",
              "title" : "Filter Non Xml Chars",
              "description" : "To ignore non xml characheters and replace them with an empty space.",
              "$comment" : "group:advanced"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "To overrule and use a specific encoding",
              "$comment" : "group:common"
            },
            "fragment" : {
              "type" : "boolean",
              "title" : "Fragment",
              "description" : "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Zwangine will pass this class to JAXB's unmarshaler.",
              "$comment" : "group:advanced"
            },
            "partClass" : {
              "type" : "string",
              "title" : "Part Class",
              "description" : "Name of class used for fragment parsing. See more details at the fragment option.",
              "$comment" : "group:advanced"
            },
            "partNamespace" : {
              "type" : "string",
              "title" : "Part Namespace",
              "description" : "XML namespace to use for fragment parsing. See more details at the fragment option.",
              "$comment" : "group:advanced"
            },
            "namespacePrefixRef" : {
              "type" : "string",
              "title" : "Namespace Prefix Ref",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping.",
              "$comment" : "group:advanced"
            },
            "xmlStreamWriterWrapper" : {
              "type" : "string",
              "title" : "Xml Stream Writer Wrapper",
              "description" : "To use a custom xml stream writer.",
              "$comment" : "group:advanced"
            },
            "schemaLocation" : {
              "type" : "string",
              "title" : "Schema Location",
              "description" : "To define the location of the schema",
              "$comment" : "group:common"
            },
            "noNamespaceSchemaLocation" : {
              "type" : "string",
              "title" : "No Namespace Schema Location",
              "description" : "To define the location of the namespaceless schema",
              "$comment" : "group:advanced"
            },
            "jaxbProviderProperties" : {
              "type" : "string",
              "title" : "Jaxb Provider Properties",
              "description" : "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller.",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "accessExternalSchemaProtocols" : {
              "type" : "string",
              "title" : "Access External Schema Protocols",
              "description" : "Only in use if schema validation has been enabled. Restrict access to the protocols specified for external reference set by the schemaLocation attribute, Import and Include element. Examples of protocols are file, http, jar:file. false or none to deny all access to external references; a specific protocol, such as file, to give permission to only the protocol; the keyword all to grant permission to all protocols.",
              "default" : "false",
              "$comment" : "group:security"
            }
          },
          "required" : [ "contextPath" ]
        },
        "org.zenithblox.model.dataformat.JsonDataFormat" : {
          "title" : "JSon",
          "description" : "Marshal POJOs to JSON and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:common"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will look for an objectMapper to use from the registry",
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which json library to use.",
              "default" : "Jackson",
              "enum" : [ "Fastjson", "Gson", "Jackson", "Johnzon", "Jsonb" ],
              "$comment" : "group:common"
            },
            "combineUnicodeSurrogates" : {
              "type" : "boolean",
              "title" : "Combine Unicode Surrogates",
              "description" : "Force generator that outputs JSON content to combine surrogate pairs (if any) into 4-byte characters. This should be preferred when using 4-byte characters such as Japanese.",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:advanced"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:advanced"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows using different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:advanced"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:advanced"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling. This option will have no effect on the others Json DataFormat, like gson and fastjson.",
              "$comment" : "group:advanced"
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.component.jackson.SchemaResolver"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namingStrategy" : {
              "type" : "string",
              "title" : "Naming Strategy",
              "description" : "If set then Jackson will use the the defined Property Naming Strategy.Possible values are: LOWER_CAMEL_CASE, LOWER_DOT_CASE, LOWER_CASE, KEBAB_CASE, SNAKE_CASE and UPPER_CAMEL_CASE",
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "dateFormatPattern" : {
              "type" : "string",
              "title" : "Date Format Pattern",
              "description" : "To configure the date format while marshall or unmarshall Date fields in JSON using Gson",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.JsonApiDataFormat" : {
          "title" : "JSonApi",
          "description" : "Marshal and unmarshal JSON:API resources using JSONAPI-Converter library.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "dataFormatTypes" : {
              "type" : "string",
              "title" : "Data Format Types",
              "description" : "The classes to take into account for the marshalling. Multiple classes can be separated by comma.",
              "$comment" : "group:common"
            },
            "mainFormatType" : {
              "type" : "string",
              "title" : "Main Format Type",
              "description" : "The class to take into account while unmarshalling.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.LZFDataFormat" : {
          "title" : "LZF Deflate Compression",
          "description" : "Compress and decompress streams using LZF deflate algorithm.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingParallelCompression" : {
              "type" : "boolean",
              "title" : "Using Parallel Compression",
              "description" : "Enable encoding (compress) using multiple processing cores.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.MimeMultipartDataFormat" : {
          "title" : "MIME Multipart",
          "description" : "Marshal Zwangine messages with attachments into MIME-Multipart messages and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "multipartSubType" : {
              "type" : "string",
              "title" : "Multipart Sub Type",
              "description" : "Specify the subtype of the MIME Multipart. Default is mixed.",
              "default" : "mixed",
              "$comment" : "group:common"
            },
            "multipartWithoutAttachment" : {
              "type" : "boolean",
              "title" : "Multipart Without Attachment",
              "description" : "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false.",
              "$comment" : "group:common"
            },
            "headersInline" : {
              "type" : "boolean",
              "title" : "Headers Inline",
              "description" : "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Zwangine headers (false). Default is false.",
              "$comment" : "group:common"
            },
            "includeHeaders" : {
              "type" : "string",
              "title" : "Include Headers",
              "description" : "A regex that defines which Zwangine headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers",
              "$comment" : "group:common"
            },
            "binaryContent" : {
              "type" : "boolean",
              "title" : "Binary Content",
              "description" : "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ParquetAvroDataFormat" : {
          "title" : "Parquet File",
          "description" : "Parquet Avro serialization and de-serialization.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "compressionCodecName" : {
              "type" : "string",
              "title" : "Compression Codec Name",
              "description" : "Compression codec to use when marshalling.",
              "default" : "GZIP",
              "enum" : [ "UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD", "LZ4_RAW" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class to use when (un)marshalling. If omitted, parquet files are converted into Avro's GenericRecords for unmarshalling and input objects are assumed as GenericRecords for marshalling.",
              "$comment" : "group:common"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator of records or read all the records at once.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.PGPDataFormat" : {
          "title" : "PGP",
          "description" : "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "keyUserid" : {
              "type" : "string",
              "title" : "Key Userid",
              "description" : "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID.",
              "$comment" : "group:common"
            },
            "signatureKeyUserid" : {
              "type" : "string",
              "title" : "Signature Key Userid",
              "description" : "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID.",
              "$comment" : "group:common"
            },
            "password" : {
              "type" : "string",
              "title" : "Password",
              "description" : "Password used when opening the private key (not used for encryption).",
              "$comment" : "group:common"
            },
            "signaturePassword" : {
              "type" : "string",
              "title" : "Signature Password",
              "description" : "Password used when opening the private key used for signing (during encryption).",
              "$comment" : "group:common"
            },
            "keyFileName" : {
              "type" : "string",
              "title" : "Key File Name",
              "description" : "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
              "$comment" : "group:common"
            },
            "signatureKeyFileName" : {
              "type" : "string",
              "title" : "Signature Key File Name",
              "description" : "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
              "$comment" : "group:common"
            },
            "signatureKeyRing" : {
              "type" : "string",
              "title" : "Signature Key Ring",
              "description" : "Keyring used for signing/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time.",
              "$comment" : "group:common"
            },
            "armored" : {
              "type" : "boolean",
              "title" : "Armored",
              "description" : "This option will cause PGP to base64 encode the encrypted text, making it available for copy/paste, etc.",
              "$comment" : "group:common"
            },
            "integrity" : {
              "type" : "boolean",
              "title" : "Integrity",
              "description" : "Adds an integrity check/sign into the encryption file. The default value is true.",
              "$comment" : "group:common",
              "default" : true
            },
            "provider" : {
              "type" : "string",
              "title" : "Provider",
              "description" : "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work.",
              "$comment" : "group:common"
            },
            "algorithm" : {
              "type" : "number",
              "title" : "Algorithm",
              "description" : "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting.",
              "$comment" : "group:common"
            },
            "compressionAlgorithm" : {
              "type" : "number",
              "title" : "Compression Algorithm",
              "description" : "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting.",
              "$comment" : "group:common"
            },
            "hashAlgorithm" : {
              "type" : "number",
              "title" : "Hash Algorithm",
              "description" : "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing.",
              "$comment" : "group:common"
            },
            "signatureVerificationOption" : {
              "type" : "string",
              "title" : "Signature Verification Option",
              "description" : "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ProtobufDataFormat" : {
          "title" : "Protobuf",
          "description" : "Serialize and deserialize Java objects using Google's Protocol buffers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClass" : {
              "type" : "string",
              "title" : "Instance Class",
              "description" : "Name of class to use when unmarshalling",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which Protobuf library to use.",
              "default" : "GoogleProtobuf",
              "enum" : [ "GoogleProtobuf", "Jackson" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:common"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            },
            "contentTypeFormat" : {
              "type" : "string",
              "title" : "Content Type Format",
              "description" : "Defines a content type format in which protobuf message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native protobuf or json fields representation. The default value is native.",
              "default" : "native",
              "enum" : [ "native", "json" ],
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.RssDataFormat" : {
          "title" : "RSS",
          "description" : "Transform from ROME SyndFeed Java Objects to XML and vice-versa.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.SmooksDataFormat" : {
          "title" : "Smooks",
          "description" : "Transform and bind XML as well as non-XML data, including EDI, CSV, JSON, and YAML using Smooks.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "smooksConfig" : {
              "type" : "string",
              "title" : "Smooks Config",
              "description" : "Path to the Smooks configuration file.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "smooksConfig" ]
        },
        "org.zenithblox.model.dataformat.SoapDataFormat" : {
          "title" : "SOAP",
          "description" : "Marshal Java objects to SOAP messages and back.",
          "required" : [ "contextPath" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "contextPath" : {
              "type" : "string",
              "title" : "Context Path",
              "description" : "Package name where your JAXB classes are located.",
              "$comment" : "group:common"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "To overrule and use a specific encoding",
              "$comment" : "group:common"
            },
            "elementNameStrategyRef" : {
              "type" : "string",
              "title" : "Element Name Strategy Ref",
              "description" : "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.zenithblox.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.",
              "$comment" : "group:advanced"
            },
            "version" : {
              "type" : "string",
              "title" : "Version",
              "description" : "SOAP version should either be 1.1 or 1.2. Is by default 1.1",
              "default" : "1.1",
              "enum" : [ "1.1", "1.2" ],
              "$comment" : "group:common"
            },
            "namespacePrefixRef" : {
              "type" : "string",
              "title" : "Namespace Prefix Ref",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping.",
              "$comment" : "group:advanced"
            },
            "schema" : {
              "type" : "string",
              "title" : "Schema",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.SwiftMtDataFormat" : {
          "title" : "SWIFT MT",
          "description" : "Encode and decode SWIFT MT messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "writeInJson" : {
              "type" : "boolean",
              "title" : "Write In Json",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.SwiftMxDataFormat" : {
          "title" : "SWIFT MX",
          "description" : "Encode and decode SWIFT MX messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "writeConfigRef" : {
              "type" : "string",
              "title" : "Write Config Ref",
              "description" : "Refers to a specific configuration to use when marshalling a message to lookup from the registry.",
              "$comment" : "group:advanced"
            },
            "writeInJson" : {
              "type" : "boolean",
              "title" : "Write In Json",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "$comment" : "group:advanced"
            },
            "readMessageId" : {
              "type" : "string",
              "title" : "Read Message Id",
              "description" : "The type of MX message to produce when unmarshalling an input stream. If not set, it will be automatically detected from the namespace used.",
              "$comment" : "group:advanced"
            },
            "readConfigRef" : {
              "type" : "string",
              "title" : "Read Config Ref",
              "description" : "Refers to a specific configuration to use when unmarshalling an input stream to lookup from the registry.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.SyslogDataFormat" : {
          "title" : "Syslog",
          "description" : "Marshall SyslogMessages to RFC3164 and RFC5424 messages and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.TarFileDataFormat" : {
          "title" : "Tar File",
          "description" : "Archive files into tarballs or extract files from tarballs.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the tar file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            },
            "allowEmptyDirectory" : {
              "type" : "boolean",
              "title" : "Allow Empty Directory",
              "description" : "If the tar file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
              "$comment" : "group:common"
            },
            "preservePathElements" : {
              "type" : "boolean",
              "title" : "Preserve Path Elements",
              "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the tar file.",
              "$comment" : "group:common"
            },
            "maxDecompressedSize" : {
              "type" : "number",
              "title" : "Max Decompressed Size",
              "description" : "Set the maximum decompressed size of a tar file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
              "default" : "1073741824",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.ThriftDataFormat" : {
          "title" : "Thrift",
          "description" : "Serialize and deserialize messages using Apache Thrift binary data format.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClass" : {
              "type" : "string",
              "title" : "Instance Class",
              "description" : "Name of class to use when unmarshalling",
              "$comment" : "group:common"
            },
            "contentTypeFormat" : {
              "type" : "string",
              "title" : "Content Type Format",
              "description" : "Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native binary thrift, json or simple json fields representation. The default value is binary.",
              "default" : "binary",
              "enum" : [ "binary", "json", "sjson" ],
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.TidyMarkupDataFormat" : {
          "title" : "TidyMarkup",
          "description" : "Parse (potentially invalid) HTML into valid HTML or DOM.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "dataObjectType" : {
              "type" : "string",
              "title" : "Data Object Type",
              "description" : "What data type to unmarshal as, can either be org.w3c.dom.Node or java.lang.String. Is by default org.w3c.dom.Node",
              "default" : "org.w3c.dom.Node",
              "enum" : [ "org.w3c.dom.Node", "java.lang.String" ],
              "$comment" : "group:common"
            },
            "omitXmlDeclaration" : {
              "type" : "boolean",
              "title" : "Omit Xml Declaration",
              "description" : "When returning a String, do we omit the XML declaration in the top.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityCsvDataFormat" : {
          "title" : "uniVocity CSV",
          "description" : "Marshal and unmarshal Java objects from and to CSV (Comma Separated Values) using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "The delimiter of values",
              "default" : ",",
              "$comment" : "group:common"
            },
            "quoteAllFields" : {
              "type" : "boolean",
              "title" : "Quote All Fields",
              "description" : "Whether or not all values must be quoted when writing them.",
              "$comment" : "group:common"
            },
            "quote" : {
              "type" : "string",
              "title" : "Quote",
              "description" : "The quote symbol.",
              "default" : "\"",
              "$comment" : "group:advanced"
            },
            "quoteEscape" : {
              "type" : "string",
              "title" : "Quote Escape",
              "description" : "The quote escape symbol",
              "default" : "\"",
              "$comment" : "group:advanced"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityHeader" : {
          "title" : "uniVocity Header",
          "description" : "To configure headers for UniVocity data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Header name",
              "$comment" : "group:common"
            },
            "length" : {
              "type" : "string",
              "title" : "Length",
              "description" : "Header length",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.dataformat.UniVocityFixedDataFormat" : {
          "title" : "uniVocity Fixed Length",
          "description" : "Marshal and unmarshal Java objects from and to fixed length records using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "padding" : {
              "type" : "string",
              "title" : "Padding",
              "description" : "The padding character. The default value is a space",
              "$comment" : "group:common"
            },
            "skipTrailingCharsUntilNewline" : {
              "type" : "boolean",
              "title" : "Skip Trailing Chars Until Newline",
              "description" : "Whether or not the trailing characters until new line must be ignored. The default value is false",
              "$comment" : "group:common"
            },
            "recordEndsOnNewline" : {
              "type" : "boolean",
              "title" : "Record Ends On Newline",
              "description" : "Whether or not the record ends on new line. The default value is false",
              "$comment" : "group:common"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityTsvDataFormat" : {
          "title" : "uniVocity TSV",
          "description" : "Marshal and unmarshal Java objects from and to TSV (Tab-Separated Values) records using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "escapeChar" : {
              "type" : "string",
              "title" : "Escape Char",
              "description" : "The escape character.",
              "default" : "\\",
              "$comment" : "group:advanced"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.XMLSecurityDataFormat" : {
          "title" : "XML Security",
          "description" : "Encrypt and decrypt XML payloads using Apache Santuario.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "xmlCipherAlgorithm" : {
              "type" : "string",
              "title" : "Xml Cipher Algorithm",
              "description" : "The cipher algorithm to be used for encryption/decryption of the XML message content. The available choices are: XMLCipher.TRIPLEDES XMLCipher.AES_128 XMLCipher.AES_128_GCM XMLCipher.AES_192 XMLCipher.AES_192_GCM XMLCipher.AES_256 XMLCipher.AES_256_GCM XMLCipher.SEED_128 XMLCipher.CAMELLIA_128 XMLCipher.CAMELLIA_192 XMLCipher.CAMELLIA_256 The default value is XMLCipher.AES_256_GCM",
              "default" : "AES-256-GCM",
              "enum" : [ "TRIPLEDES", "AES_128", "AES_128_GCM", "AES_192", "AES_192_GCM", "AES_256", "AES_256_GCM", "SEED_128", "CAMELLIA_128", "CAMELLIA_192", "CAMELLIA_256" ],
              "$comment" : "group:common"
            },
            "passPhrase" : {
              "type" : "string",
              "title" : "Pass Phrase",
              "description" : "A String used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
              "$comment" : "group:common"
            },
            "passPhraseByte" : {
              "type" : "string",
              "title" : "Pass Phrase Byte",
              "description" : "A byte used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
              "format" : "binary",
              "$comment" : "group:advanced"
            },
            "secureTag" : {
              "type" : "string",
              "title" : "Secure Tag",
              "description" : "The XPath reference to the XML Element selected for encryption/decryption. If no tag is specified, the entire payload is encrypted/decrypted.",
              "$comment" : "group:common"
            },
            "secureTagContents" : {
              "type" : "boolean",
              "title" : "Secure Tag Contents",
              "description" : "A boolean value to specify whether the XML Element is to be encrypted or the contents of the XML Element. false = Element Level. true = Element Content Level.",
              "$comment" : "group:common"
            },
            "keyCipherAlgorithm" : {
              "type" : "string",
              "title" : "Key Cipher Algorithm",
              "description" : "The cipher algorithm to be used for encryption/decryption of the asymmetric key. The available choices are: XMLCipher.RSA_v1dot5 XMLCipher.RSA_OAEP XMLCipher.RSA_OAEP_11 The default value is XMLCipher.RSA_OAEP",
              "default" : "RSA_OAEP",
              "enum" : [ "RSA_v1dot5", "RSA_OAEP", "RSA_OAEP_11" ],
              "$comment" : "group:common"
            },
            "recipientKeyAlias" : {
              "type" : "string",
              "title" : "Recipient Key Alias",
              "description" : "The key alias to be used when retrieving the recipient's public or private key from a KeyStore when performing asymmetric key encryption or decryption.",
              "$comment" : "group:common"
            },
            "keyOrTrustStoreParametersRef" : {
              "type" : "string",
              "title" : "Key Or Trust Store Parameters Ref",
              "description" : "Refers to a KeyStore instance to lookup in the registry, which is used for configuration options for creating and loading a KeyStore instance that represents the sender's trustStore or recipient's keyStore.",
              "$comment" : "group:common"
            },
            "keyPassword" : {
              "type" : "string",
              "title" : "Key Password",
              "description" : "The password to be used for retrieving the private key from the KeyStore. This key is used for asymmetric decryption.",
              "$comment" : "group:common"
            },
            "digestAlgorithm" : {
              "type" : "string",
              "title" : "Digest Algorithm",
              "description" : "The digest algorithm to use with the RSA OAEP algorithm. The available choices are: XMLCipher.SHA1 XMLCipher.SHA256 XMLCipher.SHA512 The default value is XMLCipher.SHA1",
              "default" : "SHA1",
              "enum" : [ "SHA1", "SHA256", "SHA512" ],
              "$comment" : "group:common"
            },
            "mgfAlgorithm" : {
              "type" : "string",
              "title" : "Mgf Algorithm",
              "description" : "The MGF Algorithm to use with the RSA OAEP algorithm. The available choices are: EncryptionConstants.MGF1_SHA1 EncryptionConstants.MGF1_SHA256 EncryptionConstants.MGF1_SHA512 The default value is EncryptionConstants.MGF1_SHA1",
              "default" : "MGF1_SHA1",
              "enum" : [ "MGF1_SHA1", "MGF1_SHA256", "MGF1_SHA512" ],
              "$comment" : "group:common"
            },
            "addKeyValueForEncryptedKey" : {
              "type" : "boolean",
              "title" : "Add Key Value For Encrypted Key",
              "description" : "Whether to add the public key used to encrypt the session key as a KeyValue in the EncryptedKey structure or not.",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.YAMLDataFormat" : {
          "title" : "YAML",
          "description" : "Marshal and unmarshal Java objects to and from YAML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which yaml library to use. By default it is SnakeYAML",
              "default" : "SnakeYAML",
              "enum" : [ "SnakeYAML" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "constructor" : {
              "type" : "string",
              "title" : "Constructor",
              "description" : "BaseConstructor to construct incoming documents.",
              "$comment" : "group:advanced"
            },
            "representer" : {
              "type" : "string",
              "title" : "Representer",
              "description" : "Representer to emit outgoing objects.",
              "$comment" : "group:advanced"
            },
            "dumperOptions" : {
              "type" : "string",
              "title" : "Dumper Options",
              "description" : "DumperOptions to configure outgoing objects.",
              "$comment" : "group:advanced"
            },
            "resolver" : {
              "type" : "string",
              "title" : "Resolver",
              "description" : "Resolver to detect implicit type",
              "$comment" : "group:advanced"
            },
            "useApplicationContextClassLoader" : {
              "type" : "boolean",
              "title" : "Use Application Context Class Loader",
              "description" : "Use ApplicationContextClassLoader as custom ClassLoader",
              "$comment" : "group:common",
              "default" : true
            },
            "prettyFlow" : {
              "type" : "boolean",
              "title" : "Pretty Flow",
              "description" : "Force the emitter to produce a pretty YAML document when using the flow style.",
              "$comment" : "group:common"
            },
            "allowAnyType" : {
              "type" : "boolean",
              "title" : "Allow Any Type",
              "description" : "Allow any class to be un-marshaled",
              "$comment" : "group:common"
            },
            "typeFilter" : {
              "type" : "array",
              "title" : "Type Filter",
              "description" : "Set the types SnakeYAML is allowed to un-marshall",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLTypeFilterDefinition"
              },
              "$comment" : "group:common"
            },
            "maxAliasesForCollections" : {
              "type" : "number",
              "title" : "Max Aliases For Collections",
              "description" : "Set the maximum amount of aliases allowed for collections.",
              "default" : "50",
              "$comment" : "group:advanced"
            },
            "allowRecursiveKeys" : {
              "type" : "boolean",
              "title" : "Allow Recursive Keys",
              "description" : "Set whether recursive keys are allowed.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.YAMLTypeFilterDefinition" : {
          "title" : "YAML Type Filter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Value of type such as class name or regular expression",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to filter by class type or regular expression",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.model.dataformat.YAMLTypeFilterType"
            }
          }
        },
        "org.zenithblox.model.dataformat.ZipDeflaterDataFormat" : {
          "title" : "Zip Deflater",
          "description" : "Compress and decompress streams using java.util.zip.Deflater and java.util.zip.Inflater.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "compressionLevel" : {
              "type" : "string",
              "title" : "Compression Level",
              "description" : "To specify a specific compression between 0-9. -1 is default compression, 0 is no compression, and 9 is the best compression.",
              "default" : "-1",
              "enum" : [ "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ],
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ZipFileDataFormat" : {
          "title" : "Zip File",
          "description" : "Compression and decompress streams using java.util.zip.ZipStream.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the zip file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            },
            "allowEmptyDirectory" : {
              "type" : "boolean",
              "title" : "Allow Empty Directory",
              "description" : "If the zip file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
              "$comment" : "group:common"
            },
            "preservePathElements" : {
              "type" : "boolean",
              "title" : "Preserve Path Elements",
              "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file.",
              "$comment" : "group:common"
            },
            "maxDecompressedSize" : {
              "type" : "number",
              "title" : "Max Decompressed Size",
              "description" : "Set the maximum decompressed size of a zip file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
              "default" : "1073741824",
              "$comment" : "group:advanced"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "properties" : { }
    }
  },
  "from" : {
    "model" : {
      "kind" : "model",
      "name" : "from",
      "title" : "From",
      "description" : "Act as a message source as input to a workflow",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.FromDefinition",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "uri" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Uri",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the URI of the endpoint to use"
      },
      "variableReceive" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store a copy of the received message body (only body, not headers). This is handy for easy access to the received message body via variables."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "$ref" : "#/items/definitions/org.zenithblox.dsl.yaml.deserializers.OutputAwareFromDefinition",
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "uri" : {
          "type" : "string",
          "title" : "Uri",
          "description" : "Sets the URI of the endpoint to use",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable to store a copy of the received message body (only body, not headers). This is handy for easy access to the received message body via variables.",
          "$comment" : "group:common"
        },
        "parameters" : {
          "type" : "object"
        }
      },
      "required" : [ "steps", "uri" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "onCompletion" : {
    "model" : {
      "kind" : "model",
      "name" : "onCompletion",
      "title" : "On Completion",
      "description" : "Workflow to be executed when normal workflow processing completes",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.OnCompletionDefinition",
      "abstract" : true,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "mode" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Mode",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.OnCompletionMode",
        "enum" : [ "AfterConsumer", "BeforeConsumer" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "AfterConsumer",
        "description" : "Sets the on completion mode. The default value is AfterConsumer"
      },
      "onCompleteOnly" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "On Complete Only",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will only synchronize when the org.zenithblox.Exchange completed successfully (no errors)."
      },
      "onFailureOnly" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "On Failure Only",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will only synchronize when the org.zenithblox.Exchange ended with failure (exception or FAULT message)."
      },
      "parallelProcessing" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Parallel Processing",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then the on completion process will run asynchronously by a separate thread from a thread pool. By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the workflow."
      },
      "executorService" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well."
      },
      "useOriginalMessage" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Use Original Message",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will use the original input message body when an org.zenithblox.Exchange for this on completion. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off."
      },
      "onWhen" : {
        "index" : 9,
        "kind" : "element",
        "displayName" : "On When",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.WhenDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets an additional predicate that should be true before the onCompletion is triggered. To be used for fine grained controlling whether a completion callback should be invoked or not"
      },
      "outputs" : {
        "index" : 10,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicWorkflowr", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineOnCompletion" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "On Completion",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Flag to mark that this exchange is currently being executed as onCompletion"
      }
    },
    "propertiesSchema" : {
      "title" : "On Completion",
      "description" : "Workflow to be executed when normal workflow processing completes",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "mode" : {
          "type" : "string",
          "title" : "Mode",
          "description" : "Sets the on completion mode. The default value is AfterConsumer",
          "default" : "AfterConsumer",
          "enum" : [ "AfterConsumer", "BeforeConsumer" ],
          "$comment" : "group:advanced"
        },
        "onCompleteOnly" : {
          "type" : "boolean",
          "title" : "On Complete Only",
          "description" : "Will only synchronize when the org.zenithblox.Exchange completed successfully (no errors).",
          "$comment" : "group:common"
        },
        "onFailureOnly" : {
          "type" : "boolean",
          "title" : "On Failure Only",
          "description" : "Will only synchronize when the org.zenithblox.Exchange ended with failure (exception or FAULT message).",
          "$comment" : "group:common"
        },
        "parallelProcessing" : {
          "type" : "boolean",
          "title" : "Parallel Processing",
          "description" : "If enabled then the on completion process will run asynchronously by a separate thread from a thread pool. By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the workflow.",
          "$comment" : "group:advanced"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "useOriginalMessage" : {
          "type" : "boolean",
          "title" : "Use Original Message",
          "description" : "Will use the original input message body when an org.zenithblox.Exchange for this on completion. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
          "$comment" : "group:advanced"
        },
        "onWhen" : {
          "title" : "On When",
          "description" : "Sets an additional predicate that should be true before the onCompletion is triggered. To be used for fine grained controlling whether a completion callback should be invoked or not",
          "$ref" : "#/definitions/org.zenithblox.model.WhenDefinition",
          "$comment" : "group:common"
        }
      },
      "definitions" : {
        "org.zenithblox.model.WhenDefinition" : {
          "title" : "When",
          "description" : "Triggers a workflow when the expression evaluates to true",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "expression" ]
                }, {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "expression" ],
              "properties" : {
                "expression" : {
                  "title" : "Expression",
                  "description" : "Expression used as the predicate to evaluate whether this when should trigger and workflow the message or not.",
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
                }
              }
            } ],
            "format" : "expression"
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "expression" : { },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
              }
            },
            "constant" : { },
            "simple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          },
          "required" : [ "expression" ]
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "simple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the workflow startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using camel-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with camel-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires camel-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "onException" : {
    "model" : {
      "kind" : "model",
      "name" : "onException",
      "title" : "On Exception",
      "description" : "Workflow to be executed when an exception is thrown",
      "deprecated" : false,
      "label" : "error",
      "javaType" : "org.zenithblox.model.OnExceptionDefinition",
      "abstract" : true,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "exception" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Exception",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<java.lang.String>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A set of exceptions to react upon."
      },
      "onWhen" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "On When",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.WhenDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets an additional predicate that should be true before the onException is triggered. To be used for fine grained controlling whether a thrown exception should be intercepted by this exception type or not."
      },
      "retryWhile" : {
        "index" : 5,
        "kind" : "expression",
        "displayName" : "Retry While",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "simple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets the retry while predicate. Will continue retrying until predicate returns false."
      },
      "redeliveryPolicy" : {
        "index" : 6,
        "kind" : "element",
        "displayName" : "Redelivery Policy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.RedeliveryPolicyDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Used for configuring redelivery options"
      },
      "redeliveryPolicyRef" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Redelivery Policy Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a redelivery policy to lookup in the org.zenithblox.spi.Registry to be used."
      },
      "handled" : {
        "index" : 8,
        "kind" : "expression",
        "displayName" : "Handled",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "simple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets whether the exchange should be marked as handled or not."
      },
      "continued" : {
        "index" : 9,
        "kind" : "expression",
        "displayName" : "Continued",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "simple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets whether the exchange should handle and continue routing from the point of failure. If this option is enabled then its considered handled as well."
      },
      "onRedeliveryRef" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "On Redelivery Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered."
      },
      "onExceptionOccurredRef" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "On Exception Occurred Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored."
      },
      "useOriginalMessage" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Use Original Message",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off."
      },
      "useOriginalBody" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Use Original Body",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off."
      },
      "outputs" : {
        "index" : 14,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicWorkflowr", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineExceptionCaught" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Exception Caught",
        "label" : "producer",
        "required" : false,
        "javaType" : "java.lang.Exception",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Stores the caught exception due to a processing error of the current Exchange"
      },
      "ZwangineFailureEndpoint" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Failure Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where the Exchange failed during processing"
      },
      "ZwangineFailureWorkflowId" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "Failure Workflow Id",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Workflow ID where the Exchange failed during processing"
      }
    },
    "propertiesSchema" : {
      "title" : "On Exception",
      "description" : "Workflow to be executed when an exception is thrown",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "exception" : {
          "type" : "array",
          "title" : "Exception",
          "description" : "A set of exceptions to react upon.",
          "items" : {
            "type" : "string"
          },
          "$comment" : "group:common"
        },
        "onWhen" : {
          "title" : "On When",
          "description" : "Sets an additional predicate that should be true before the onException is triggered. To be used for fine grained controlling whether a thrown exception should be intercepted by this exception type or not.",
          "$ref" : "#/definitions/org.zenithblox.model.WhenDefinition",
          "$comment" : "group:common"
        },
        "retryWhile" : {
          "title" : "Retry While",
          "description" : "Sets the retry while predicate. Will continue retrying until predicate returns false.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:advanced",
          "format" : "expressionProperty"
        },
        "redeliveryPolicy" : {
          "title" : "Redelivery Policy",
          "description" : "Used for configuring redelivery options",
          "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
          "$comment" : "group:common"
        },
        "redeliveryPolicyRef" : {
          "type" : "string",
          "title" : "Redelivery Policy Ref",
          "description" : "Sets a reference to a redelivery policy to lookup in the org.zenithblox.spi.Registry to be used.",
          "$comment" : "group:advanced"
        },
        "handled" : {
          "title" : "Handled",
          "description" : "Sets whether the exchange should be marked as handled or not.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:common",
          "format" : "expressionProperty"
        },
        "continued" : {
          "title" : "Continued",
          "description" : "Sets whether the exchange should handle and continue routing from the point of failure. If this option is enabled then its considered handled as well.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:advanced",
          "format" : "expressionProperty"
        },
        "onRedeliveryRef" : {
          "type" : "string",
          "title" : "On Redelivery Ref",
          "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
          "$comment" : "group:advanced"
        },
        "onExceptionOccurredRef" : {
          "type" : "string",
          "title" : "On Exception Occurred Ref",
          "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
          "$comment" : "group:advanced"
        },
        "useOriginalMessage" : {
          "type" : "boolean",
          "title" : "Use Original Message",
          "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
          "$comment" : "group:advanced"
        },
        "useOriginalBody" : {
          "type" : "boolean",
          "title" : "Use Original Body",
          "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the split message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
          "$comment" : "group:advanced"
        }
      },
      "definitions" : {
        "org.zenithblox.model.ExpressionSubElementDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "simple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the workflow startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using camel-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with camel-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires camel-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.WhenDefinition" : {
          "title" : "When",
          "description" : "Triggers a workflow when the expression evaluates to true",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "expression" ]
                }, {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "expression" ],
              "properties" : {
                "expression" : {
                  "title" : "Expression",
                  "description" : "Expression used as the predicate to evaluate whether this when should trigger and workflow the message or not.",
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
                }
              }
            } ],
            "format" : "expression"
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "expression" : { },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
              }
            },
            "constant" : { },
            "simple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          },
          "required" : [ "expression" ]
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "simple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.RedeliveryPolicyDefinition" : {
          "title" : "Redelivery Policy",
          "description" : "To configure re-delivery for error handling",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "maximumRedeliveries" : {
              "type" : "number",
              "title" : "Maximum Redeliveries",
              "description" : "Sets the maximum redeliveries x = redeliver at most x times 0 = no redeliveries -1 = redeliver forever",
              "$comment" : "group:common"
            },
            "redeliveryDelay" : {
              "type" : "string",
              "title" : "Redelivery Delay",
              "description" : "Sets the initial redelivery delay",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "asyncDelayedRedelivery" : {
              "type" : "boolean",
              "title" : "Async Delayed Redelivery",
              "description" : "Allow asynchronous delayed redelivery. The workflow, in particular the consumer's component, must support the Asynchronous Routing Engine (e.g. seda).",
              "$comment" : "group:advanced"
            },
            "backOffMultiplier" : {
              "type" : "number",
              "title" : "Back Off Multiplier",
              "description" : "Sets the back off multiplier",
              "default" : "2.0",
              "$comment" : "group:common"
            },
            "useExponentialBackOff" : {
              "type" : "boolean",
              "title" : "Use Exponential Back Off",
              "description" : "Turn on exponential back off",
              "$comment" : "group:advanced"
            },
            "collisionAvoidanceFactor" : {
              "type" : "number",
              "title" : "Collision Avoidance Factor",
              "description" : "Sets the collision avoidance factor",
              "default" : "0.15",
              "$comment" : "group:advanced"
            },
            "useCollisionAvoidance" : {
              "type" : "boolean",
              "title" : "Use Collision Avoidance",
              "description" : "Turn on collision avoidance.",
              "$comment" : "group:advanced"
            },
            "maximumRedeliveryDelay" : {
              "type" : "string",
              "title" : "Maximum Redelivery Delay",
              "description" : "Sets the maximum delay between redelivery",
              "default" : "60000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "retriesExhaustedLogLevel" : {
              "type" : "string",
              "title" : "Retries Exhausted Log Level",
              "description" : "Sets the logging level to use when retries have been exhausted",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "retryAttemptedLogLevel" : {
              "type" : "string",
              "title" : "Retry Attempted Log Level",
              "description" : "Sets the logging level to use for logging retry attempts",
              "default" : "DEBUG",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "retryAttemptedLogInterval" : {
              "type" : "number",
              "title" : "Retry Attempted Log Interval",
              "description" : "Sets the interval to use for logging retry attempts",
              "default" : "1",
              "$comment" : "group:advanced"
            },
            "logRetryAttempted" : {
              "type" : "boolean",
              "title" : "Log Retry Attempted",
              "description" : "Sets whether retry attempts should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logStackTrace" : {
              "type" : "boolean",
              "title" : "Log Stack Trace",
              "description" : "Sets whether stack traces should be logged. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logRetryStackTrace" : {
              "type" : "boolean",
              "title" : "Log Retry Stack Trace",
              "description" : "Sets whether stack traces should be logged when an retry attempt failed. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logHandled" : {
              "type" : "boolean",
              "title" : "Log Handled",
              "description" : "Sets whether handled exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logNewException" : {
              "type" : "boolean",
              "title" : "Log New Exception",
              "description" : "Sets whether new exceptions should be logged or not. Can be used to include or reduce verbose. A new exception is an exception that was thrown while handling a previous exception.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logContinued" : {
              "type" : "boolean",
              "title" : "Log Continued",
              "description" : "Sets whether continued exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:common"
            },
            "logExhausted" : {
              "type" : "boolean",
              "title" : "Log Exhausted",
              "description" : "Sets whether exhausted exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logExhaustedMessageHistory" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message History",
              "description" : "Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logExhaustedMessageBody" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message Body",
              "description" : "Sets whether exhausted message body should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose. Requires logExhaustedMessageHistory to be enabled.",
              "$comment" : "group:advanced"
            },
            "disableRedelivery" : {
              "type" : "boolean",
              "title" : "Disable Redelivery",
              "description" : "Disables redelivery (same as setting maximum redeliveries to 0)",
              "$comment" : "group:advanced"
            },
            "delayPattern" : {
              "type" : "string",
              "title" : "Delay Pattern",
              "description" : "Sets the delay pattern with delay intervals.",
              "$comment" : "group:advanced"
            },
            "allowRedeliveryWhileStopping" : {
              "type" : "boolean",
              "title" : "Allow Redelivery While Stopping",
              "description" : "Controls whether to allow redelivery while stopping/shutting down a workflow that uses error handling.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "exchangeFormatterRef" : {
              "type" : "string",
              "title" : "Exchange Formatter Ref",
              "description" : "Sets the reference of the instance of org.zenithblox.spi.ExchangeFormatter to generate the log message from exchange.",
              "$comment" : "group:advanced"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "exception" ]
    }
  },
  "workflowConfiguration" : {
    "model" : {
      "kind" : "model",
      "name" : "workflowConfiguration",
      "title" : "Workflow Configuration",
      "description" : "Reusable configuration for Zwangine workflow(s).",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.WorkflowConfigurationDefinition",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "errorHandler" : {
        "index" : 2,
        "kind" : "element",
        "displayName" : "Error Handler",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ErrorHandlerDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the error handler to use, for workflows that has not already been configured with an error handler."
      },
      "intercept" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Intercept",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.InterceptDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Adds a workflow for an interceptor that intercepts every processing step."
      },
      "interceptFrom" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Intercept From",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.InterceptFromDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Adds a workflow for an interceptor that intercepts incoming messages on the given endpoint."
      },
      "interceptSendToEndpoint" : {
        "index" : 5,
        "kind" : "element",
        "displayName" : "Intercept Send To Endpoint",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.InterceptSendToEndpointDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Applies a workflow for an interceptor if an exchange is send to the given endpoint"
      },
      "onException" : {
        "index" : 6,
        "kind" : "element",
        "displayName" : "On Exception",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.OnExceptionDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Exception clause for catching certain exceptions and handling them."
      },
      "onCompletion" : {
        "index" : 7,
        "kind" : "element",
        "displayName" : "On Completion",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.OnCompletionDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "On completion callback for doing custom routing when the org.zenithblox.Exchange is complete."
      },
      "precondition" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Precondition",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The predicate of the precondition in simple language to evaluate in order to determine if this workflow configuration should be included or not."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "errorHandler" : {
          "$ref" : "#/definitions/org.zenithblox.model.ErrorHandlerDefinition",
          "title" : "Error Handler",
          "description" : "Sets the error handler to use, for workflows that has not already been configured with an error handler.",
          "$comment" : "group:common"
        },
        "intercept" : {
          "type" : "array",
          "items" : {
            "additionalProperties" : false,
            "type" : "object",
            "properties" : {
              "intercept" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.InterceptDefinition"
              }
            }
          },
          "title" : "Intercept",
          "description" : "Adds a workflow for an interceptor that intercepts every processing step.",
          "$comment" : "group:common"
        },
        "interceptFrom" : {
          "type" : "array",
          "items" : {
            "additionalProperties" : false,
            "type" : "object",
            "properties" : {
              "interceptFrom" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.InterceptFromDefinition"
              }
            }
          },
          "title" : "Intercept From",
          "description" : "Adds a workflow for an interceptor that intercepts incoming messages on the given endpoint.",
          "$comment" : "group:common"
        },
        "interceptSendToEndpoint" : {
          "type" : "array",
          "items" : {
            "additionalProperties" : false,
            "type" : "object",
            "properties" : {
              "interceptSendToEndpoint" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.InterceptSendToEndpointDefinition"
              }
            }
          },
          "title" : "Intercept Send To Endpoint",
          "description" : "Applies a workflow for an interceptor if an exchange is send to the given endpoint",
          "$comment" : "group:common"
        },
        "onException" : {
          "type" : "array",
          "items" : {
            "additionalProperties" : false,
            "type" : "object",
            "properties" : {
              "onException" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.OnExceptionDefinition"
              }
            }
          },
          "title" : "On Exception",
          "description" : "Exception clause for catching certain exceptions and handling them.",
          "$comment" : "group:common"
        },
        "onCompletion" : {
          "type" : "array",
          "items" : {
            "additionalProperties" : false,
            "type" : "object",
            "properties" : {
              "onCompletion" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.OnCompletionDefinition"
              }
            }
          },
          "title" : "On Completion",
          "description" : "On completion callback for doing custom routing when the org.zenithblox.Exchange is complete.",
          "$comment" : "group:common"
        },
        "precondition" : {
          "type" : "string",
          "title" : "Precondition",
          "description" : "The predicate of the precondition in simple language to evaluate in order to determine if this workflow configuration should be included or not.",
          "$comment" : "group:advanced"
        }
      },
      "definitions" : {
        "org.zenithblox.model.ErrorHandlerDefinition" : {
          "title" : "Error Handler",
          "description" : "Zwangine error handling.",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "deadLetterChannel" ],
              "properties" : {
                "deadLetterChannel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.DeadLetterChannelDefinition"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "deadLetterChannel" ]
                }, {
                  "required" : [ "defaultErrorHandler" ]
                }, {
                  "required" : [ "jtaTransactionErrorHandler" ]
                }, {
                  "required" : [ "noErrorHandler" ]
                }, {
                  "required" : [ "refErrorHandler" ]
                }, {
                  "required" : [ "springTransactionErrorHandler" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "defaultErrorHandler" ],
              "properties" : {
                "defaultErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jtaTransactionErrorHandler" ],
              "properties" : {
                "jtaTransactionErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "noErrorHandler" ],
              "properties" : {
                "noErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.NoErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "refErrorHandler" ],
              "properties" : {
                "refErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.RefErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "springTransactionErrorHandler" ],
              "properties" : {
                "springTransactionErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition"
                }
              }
            } ]
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "deadLetterChannel" : { },
            "defaultErrorHandler" : { },
            "jtaTransactionErrorHandler" : { },
            "noErrorHandler" : { },
            "refErrorHandler" : { },
            "springTransactionErrorHandler" : { }
          }
        },
        "org.zenithblox.model.errorhandler.DeadLetterChannelDefinition" : {
          "title" : "Dead Letter Channel",
          "description" : "Error handler with dead letter queue.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "deadLetterUri" : {
              "type" : "string",
              "title" : "Dead Letter Uri",
              "description" : "The dead letter endpoint uri for the Dead Letter error handler.",
              "$comment" : "group:common"
            },
            "deadLetterHandleNewException" : {
              "type" : "boolean",
              "title" : "Dead Letter Handle New Exception",
              "description" : "Whether the dead letter channel should handle (and ignore) any new exception that may been thrown during sending the message to the dead letter endpoint. The default value is true which means any such kind of exception is handled and ignored. Set this to false to let the exception be propagated back on the org.zenithblox.Exchange . This can be used in situations where you use transactions, and want to use Zwangine's dead letter channel to deal with exceptions during routing, but if the dead letter channel itself fails because of a new exception being thrown, then by setting this to false the new exceptions is propagated back and set on the org.zenithblox.Exchange , which allows the transaction to detect the exception, and rollback.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          },
          "required" : [ "deadLetterUri" ]
        },
        "org.zenithblox.model.RedeliveryPolicyDefinition" : {
          "title" : "Redelivery Policy",
          "description" : "To configure re-delivery for error handling",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "maximumRedeliveries" : {
              "type" : "number",
              "title" : "Maximum Redeliveries",
              "description" : "Sets the maximum redeliveries x = redeliver at most x times 0 = no redeliveries -1 = redeliver forever",
              "$comment" : "group:common"
            },
            "redeliveryDelay" : {
              "type" : "string",
              "title" : "Redelivery Delay",
              "description" : "Sets the initial redelivery delay",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "asyncDelayedRedelivery" : {
              "type" : "boolean",
              "title" : "Async Delayed Redelivery",
              "description" : "Allow asynchronous delayed redelivery. The workflow, in particular the consumer's component, must support the Asynchronous Routing Engine (e.g. seda).",
              "$comment" : "group:advanced"
            },
            "backOffMultiplier" : {
              "type" : "number",
              "title" : "Back Off Multiplier",
              "description" : "Sets the back off multiplier",
              "default" : "2.0",
              "$comment" : "group:common"
            },
            "useExponentialBackOff" : {
              "type" : "boolean",
              "title" : "Use Exponential Back Off",
              "description" : "Turn on exponential back off",
              "$comment" : "group:advanced"
            },
            "collisionAvoidanceFactor" : {
              "type" : "number",
              "title" : "Collision Avoidance Factor",
              "description" : "Sets the collision avoidance factor",
              "default" : "0.15",
              "$comment" : "group:advanced"
            },
            "useCollisionAvoidance" : {
              "type" : "boolean",
              "title" : "Use Collision Avoidance",
              "description" : "Turn on collision avoidance.",
              "$comment" : "group:advanced"
            },
            "maximumRedeliveryDelay" : {
              "type" : "string",
              "title" : "Maximum Redelivery Delay",
              "description" : "Sets the maximum delay between redelivery",
              "default" : "60000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "retriesExhaustedLogLevel" : {
              "type" : "string",
              "title" : "Retries Exhausted Log Level",
              "description" : "Sets the logging level to use when retries have been exhausted",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "retryAttemptedLogLevel" : {
              "type" : "string",
              "title" : "Retry Attempted Log Level",
              "description" : "Sets the logging level to use for logging retry attempts",
              "default" : "DEBUG",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "retryAttemptedLogInterval" : {
              "type" : "number",
              "title" : "Retry Attempted Log Interval",
              "description" : "Sets the interval to use for logging retry attempts",
              "default" : "1",
              "$comment" : "group:advanced"
            },
            "logRetryAttempted" : {
              "type" : "boolean",
              "title" : "Log Retry Attempted",
              "description" : "Sets whether retry attempts should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logStackTrace" : {
              "type" : "boolean",
              "title" : "Log Stack Trace",
              "description" : "Sets whether stack traces should be logged. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logRetryStackTrace" : {
              "type" : "boolean",
              "title" : "Log Retry Stack Trace",
              "description" : "Sets whether stack traces should be logged when an retry attempt failed. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logHandled" : {
              "type" : "boolean",
              "title" : "Log Handled",
              "description" : "Sets whether handled exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logNewException" : {
              "type" : "boolean",
              "title" : "Log New Exception",
              "description" : "Sets whether new exceptions should be logged or not. Can be used to include or reduce verbose. A new exception is an exception that was thrown while handling a previous exception.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logContinued" : {
              "type" : "boolean",
              "title" : "Log Continued",
              "description" : "Sets whether continued exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:common"
            },
            "logExhausted" : {
              "type" : "boolean",
              "title" : "Log Exhausted",
              "description" : "Sets whether exhausted exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logExhaustedMessageHistory" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message History",
              "description" : "Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logExhaustedMessageBody" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message Body",
              "description" : "Sets whether exhausted message body should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose. Requires logExhaustedMessageHistory to be enabled.",
              "$comment" : "group:advanced"
            },
            "disableRedelivery" : {
              "type" : "boolean",
              "title" : "Disable Redelivery",
              "description" : "Disables redelivery (same as setting maximum redeliveries to 0)",
              "$comment" : "group:advanced"
            },
            "delayPattern" : {
              "type" : "string",
              "title" : "Delay Pattern",
              "description" : "Sets the delay pattern with delay intervals.",
              "$comment" : "group:advanced"
            },
            "allowRedeliveryWhileStopping" : {
              "type" : "boolean",
              "title" : "Allow Redelivery While Stopping",
              "description" : "Controls whether to allow redelivery while stopping/shutting down a workflow that uses error handling.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "exchangeFormatterRef" : {
              "type" : "string",
              "title" : "Exchange Formatter Ref",
              "description" : "Sets the reference of the instance of org.zenithblox.spi.ExchangeFormatter to generate the log message from exchange.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition" : {
          "title" : "Default Error Handler",
          "description" : "The default error handler.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition" : {
          "title" : "Jta Transaction Error Handler",
          "description" : "JTA based transactional error handler (requires camel-jta).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "transactedPolicyRef" : {
              "type" : "string",
              "title" : "Transacted Policy Ref",
              "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Zwangine will attempt to auto-discover.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.spi.TransactedPolicy"
            },
            "rollbackLoggingLevel" : {
              "type" : "string",
              "title" : "Rollback Logging Level",
              "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
              "default" : "WARN",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.errorhandler.NoErrorHandlerDefinition" : {
          "title" : "No Error Handler",
          "description" : "To not use an error handler.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.errorhandler.RefErrorHandlerDefinition" : {
          "title" : "Ref Error Handler",
          "description" : "References to an existing or custom error handler.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "References to an existing or custom error handler.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.ErrorHandlerFactory"
            }
          }
        },
        "org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition" : {
          "title" : "Spring Transaction Error Handler",
          "description" : "Spring based transactional error handler (requires camel-spring).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "transactedPolicyRef" : {
              "type" : "string",
              "title" : "Transacted Policy Ref",
              "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Zwangine will attempt to auto-discover.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.spi.TransactedPolicy"
            },
            "rollbackLoggingLevel" : {
              "type" : "string",
              "title" : "Rollback Logging Level",
              "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
              "default" : "WARN",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "workflow" : {
    "model" : {
      "kind" : "model",
      "name" : "workflow",
      "title" : "Workflow",
      "description" : "A Zwangine workflow",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.WorkflowDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "group" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Group",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The group that this workflow belongs to; could be the name of the WorkflowBuilder class or be explicitly configured in the XML. May be null."
      },
      "nodePrefixId" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Node Prefix Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a prefix to use for all node ids (not workflow id)."
      },
      "workflowConfigurationId" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Workflow Configuration Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The workflow configuration id or pattern this workflow should use for configuration. Multiple id/pattern can be separated by comma."
      },
      "autoStartup" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Auto Startup",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "true",
        "description" : "Whether to auto start this workflow"
      },
      "startupOrder" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Startup Order",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To configure the ordering of the workflows being started"
      },
      "streamCache" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether stream caching is enabled on this workflow."
      },
      "trace" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Trace",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether tracing is enabled on this workflow."
      },
      "messageHistory" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Message History",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether message history is enabled on this workflow."
      },
      "logMask" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Log Mask",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "false",
        "description" : "Whether security mask for Logging is enabled on this workflow."
      },
      "delayer" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Delayer",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "advanced",
        "description" : "Whether to slow down processing messages by a given delay in msec."
      },
      "errorHandlerRef" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Error Handler",
        "group" : "error",
        "label" : "error",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the bean ref name of the error handler builder to use on this workflow"
      },
      "workflowPolicyRef" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Workflow Policy",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Reference to custom org.zenithblox.spi.WorkflowPolicy to use by the workflow. Multiple policies can be configured by separating values using comma."
      },
      "shutdownWorkflow" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Shutdown Workflow",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.ShutdownWorkflow",
        "enum" : [ "Default", "Defer" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To control how to shutdown the workflow."
      },
      "shutdownRunningTask" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Shutdown Running Task",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.ShutdownRunningTask",
        "enum" : [ "CompleteCurrentTaskOnly", "CompleteAllTasks" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To control how to shut down the workflow."
      },
      "precondition" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Precondition",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The predicate of the precondition in simple language to evaluate in order to determine if this workflow should be included or not."
      },
      "errorHandler" : {
        "index" : 17,
        "kind" : "element",
        "displayName" : "Error Handler",
        "group" : "error",
        "label" : "error",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ErrorHandlerDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the error handler to use for this workflow"
      },
      "inputType" : {
        "index" : 18,
        "kind" : "element",
        "displayName" : "Input Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.InputTypeDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Declare the expected data type of the input message. If the actual message type is different at runtime, camel look for a required org.zenithblox.spi.Transformer and apply if exists. The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} ."
      },
      "outputType" : {
        "index" : 19,
        "kind" : "element",
        "displayName" : "Output Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.OutputTypeDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Declare the expected data type of the output message. If the actual message type is different at runtime, camel look for a required org.zenithblox.spi.Transformer and apply if exists. The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} ."
      },
      "input" : {
        "index" : 20,
        "kind" : "element",
        "displayName" : "Input",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.FromDefinition",
        "oneOf" : [ "from" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Input to the workflow."
      },
      "outputs" : {
        "index" : 21,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<?>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicWorkflowr", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Outputs are processors that determines how messages are processed by this workflow."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "group" : {
          "type" : "string",
          "title" : "Group",
          "description" : "The group that this workflow belongs to; could be the name of the WorkflowBuilder class or be explicitly configured in the XML. May be null.",
          "$comment" : "group:common"
        },
        "nodePrefixId" : {
          "type" : "string",
          "title" : "Node Prefix Id",
          "description" : "Sets a prefix to use for all node ids (not workflow id).",
          "$comment" : "group:common"
        },
        "workflowConfigurationId" : {
          "type" : "string",
          "title" : "Workflow Configuration Id",
          "description" : "The workflow configuration id or pattern this workflow should use for configuration. Multiple id/pattern can be separated by comma.",
          "$comment" : "group:common"
        },
        "autoStartup" : {
          "type" : "boolean",
          "title" : "Auto Startup",
          "description" : "Whether to auto start this workflow",
          "$comment" : "group:common",
          "default" : "true"
        },
        "startupOrder" : {
          "type" : "number",
          "title" : "Startup Order",
          "description" : "To configure the ordering of the workflows being started",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this workflow.",
          "$comment" : "group:common"
        },
        "trace" : {
          "type" : "boolean",
          "title" : "Trace",
          "description" : "Whether tracing is enabled on this workflow.",
          "$comment" : "group:common"
        },
        "messageHistory" : {
          "type" : "boolean",
          "title" : "Message History",
          "description" : "Whether message history is enabled on this workflow.",
          "$comment" : "group:common"
        },
        "logMask" : {
          "type" : "boolean",
          "title" : "Log Mask",
          "description" : "Whether security mask for Logging is enabled on this workflow.",
          "$comment" : "group:common",
          "default" : "false"
        },
        "errorHandlerRef" : {
          "type" : "string",
          "title" : "Error Handler",
          "description" : "Sets the bean ref name of the error handler builder to use on this workflow",
          "$comment" : "group:error"
        },
        "shutdownWorkflow" : {
          "type" : "string",
          "description" : "To control how to shut down the workflow.",
          "default" : "Default",
          "enum" : [ "Default", "Defer" ],
          "title" : "Shutdown Workflow",
          "$comment" : "group:advanced"
        },
        "shutdownRunningTask" : {
          "type" : "string",
          "description" : "To control how to shut down the workflow.",
          "default" : "CompleteCurrentTaskOnly",
          "enum" : [ "CompleteCurrentTaskOnly", "CompleteAllTasks" ],
          "title" : "Shutdown Running Task",
          "$comment" : "group:advanced"
        },
        "precondition" : {
          "type" : "string",
          "title" : "Precondition",
          "description" : "The predicate of the precondition in simple language to evaluate in order to determine if this workflow should be included or not.",
          "$comment" : "group:advanced"
        },
        "errorHandler" : {
          "$ref" : "#/definitions/org.zenithblox.model.ErrorHandlerDefinition",
          "title" : "Error Handler",
          "description" : "Sets the error handler to use for this workflow",
          "$comment" : "group:error"
        },
        "inputType" : {
          "$ref" : "#/definitions/org.zenithblox.model.InputTypeDefinition",
          "title" : "Input Type",
          "description" : "Declare the expected data type of the input message. If the actual message type is different at runtime, camel look for a required org.zenithblox.spi.Transformer and apply if exists. The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} .",
          "$comment" : "group:advanced"
        },
        "outputType" : {
          "$ref" : "#/definitions/org.zenithblox.model.OutputTypeDefinition",
          "title" : "Output Type",
          "description" : "Declare the expected data type of the output message. If the actual message type is different at runtime, camel look for a required org.zenithblox.spi.Transformer and apply if exists. The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} .",
          "$comment" : "group:advanced"
        },
        "from" : {
          "$ref" : "#/definitions/org.zenithblox.model.FromDefinition"
        },
        "workflowPolicy" : {
          "type" : "string"
        }
      },
      "required" : [ "from" ],
      "definitions" : {
        "org.zenithblox.model.ErrorHandlerDefinition" : {
          "title" : "Error Handler",
          "description" : "Zwangine error handling.",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "deadLetterChannel" ],
              "properties" : {
                "deadLetterChannel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.DeadLetterChannelDefinition"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "deadLetterChannel" ]
                }, {
                  "required" : [ "defaultErrorHandler" ]
                }, {
                  "required" : [ "jtaTransactionErrorHandler" ]
                }, {
                  "required" : [ "noErrorHandler" ]
                }, {
                  "required" : [ "refErrorHandler" ]
                }, {
                  "required" : [ "springTransactionErrorHandler" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "defaultErrorHandler" ],
              "properties" : {
                "defaultErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jtaTransactionErrorHandler" ],
              "properties" : {
                "jtaTransactionErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "noErrorHandler" ],
              "properties" : {
                "noErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.NoErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "refErrorHandler" ],
              "properties" : {
                "refErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.RefErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "springTransactionErrorHandler" ],
              "properties" : {
                "springTransactionErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition"
                }
              }
            } ]
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "deadLetterChannel" : { },
            "defaultErrorHandler" : { },
            "jtaTransactionErrorHandler" : { },
            "noErrorHandler" : { },
            "refErrorHandler" : { },
            "springTransactionErrorHandler" : { }
          }
        },
        "org.zenithblox.model.errorhandler.DeadLetterChannelDefinition" : {
          "title" : "Dead Letter Channel",
          "description" : "Error handler with dead letter queue.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "deadLetterUri" : {
              "type" : "string",
              "title" : "Dead Letter Uri",
              "description" : "The dead letter endpoint uri for the Dead Letter error handler.",
              "$comment" : "group:common"
            },
            "deadLetterHandleNewException" : {
              "type" : "boolean",
              "title" : "Dead Letter Handle New Exception",
              "description" : "Whether the dead letter channel should handle (and ignore) any new exception that may been thrown during sending the message to the dead letter endpoint. The default value is true which means any such kind of exception is handled and ignored. Set this to false to let the exception be propagated back on the org.zenithblox.Exchange . This can be used in situations where you use transactions, and want to use Zwangine's dead letter channel to deal with exceptions during routing, but if the dead letter channel itself fails because of a new exception being thrown, then by setting this to false the new exceptions is propagated back and set on the org.zenithblox.Exchange , which allows the transaction to detect the exception, and rollback.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          },
          "required" : [ "deadLetterUri" ]
        },
        "org.zenithblox.model.RedeliveryPolicyDefinition" : {
          "title" : "Redelivery Policy",
          "description" : "To configure re-delivery for error handling",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "maximumRedeliveries" : {
              "type" : "number",
              "title" : "Maximum Redeliveries",
              "description" : "Sets the maximum redeliveries x = redeliver at most x times 0 = no redeliveries -1 = redeliver forever",
              "$comment" : "group:common"
            },
            "redeliveryDelay" : {
              "type" : "string",
              "title" : "Redelivery Delay",
              "description" : "Sets the initial redelivery delay",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "asyncDelayedRedelivery" : {
              "type" : "boolean",
              "title" : "Async Delayed Redelivery",
              "description" : "Allow asynchronous delayed redelivery. The workflow, in particular the consumer's component, must support the Asynchronous Routing Engine (e.g. seda).",
              "$comment" : "group:advanced"
            },
            "backOffMultiplier" : {
              "type" : "number",
              "title" : "Back Off Multiplier",
              "description" : "Sets the back off multiplier",
              "default" : "2.0",
              "$comment" : "group:common"
            },
            "useExponentialBackOff" : {
              "type" : "boolean",
              "title" : "Use Exponential Back Off",
              "description" : "Turn on exponential back off",
              "$comment" : "group:advanced"
            },
            "collisionAvoidanceFactor" : {
              "type" : "number",
              "title" : "Collision Avoidance Factor",
              "description" : "Sets the collision avoidance factor",
              "default" : "0.15",
              "$comment" : "group:advanced"
            },
            "useCollisionAvoidance" : {
              "type" : "boolean",
              "title" : "Use Collision Avoidance",
              "description" : "Turn on collision avoidance.",
              "$comment" : "group:advanced"
            },
            "maximumRedeliveryDelay" : {
              "type" : "string",
              "title" : "Maximum Redelivery Delay",
              "description" : "Sets the maximum delay between redelivery",
              "default" : "60000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "retriesExhaustedLogLevel" : {
              "type" : "string",
              "title" : "Retries Exhausted Log Level",
              "description" : "Sets the logging level to use when retries have been exhausted",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "retryAttemptedLogLevel" : {
              "type" : "string",
              "title" : "Retry Attempted Log Level",
              "description" : "Sets the logging level to use for logging retry attempts",
              "default" : "DEBUG",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "retryAttemptedLogInterval" : {
              "type" : "number",
              "title" : "Retry Attempted Log Interval",
              "description" : "Sets the interval to use for logging retry attempts",
              "default" : "1",
              "$comment" : "group:advanced"
            },
            "logRetryAttempted" : {
              "type" : "boolean",
              "title" : "Log Retry Attempted",
              "description" : "Sets whether retry attempts should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logStackTrace" : {
              "type" : "boolean",
              "title" : "Log Stack Trace",
              "description" : "Sets whether stack traces should be logged. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logRetryStackTrace" : {
              "type" : "boolean",
              "title" : "Log Retry Stack Trace",
              "description" : "Sets whether stack traces should be logged when an retry attempt failed. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logHandled" : {
              "type" : "boolean",
              "title" : "Log Handled",
              "description" : "Sets whether handled exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logNewException" : {
              "type" : "boolean",
              "title" : "Log New Exception",
              "description" : "Sets whether new exceptions should be logged or not. Can be used to include or reduce verbose. A new exception is an exception that was thrown while handling a previous exception.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logContinued" : {
              "type" : "boolean",
              "title" : "Log Continued",
              "description" : "Sets whether continued exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:common"
            },
            "logExhausted" : {
              "type" : "boolean",
              "title" : "Log Exhausted",
              "description" : "Sets whether exhausted exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logExhaustedMessageHistory" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message History",
              "description" : "Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logExhaustedMessageBody" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message Body",
              "description" : "Sets whether exhausted message body should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose. Requires logExhaustedMessageHistory to be enabled.",
              "$comment" : "group:advanced"
            },
            "disableRedelivery" : {
              "type" : "boolean",
              "title" : "Disable Redelivery",
              "description" : "Disables redelivery (same as setting maximum redeliveries to 0)",
              "$comment" : "group:advanced"
            },
            "delayPattern" : {
              "type" : "string",
              "title" : "Delay Pattern",
              "description" : "Sets the delay pattern with delay intervals.",
              "$comment" : "group:advanced"
            },
            "allowRedeliveryWhileStopping" : {
              "type" : "boolean",
              "title" : "Allow Redelivery While Stopping",
              "description" : "Controls whether to allow redelivery while stopping/shutting down a workflow that uses error handling.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "exchangeFormatterRef" : {
              "type" : "string",
              "title" : "Exchange Formatter Ref",
              "description" : "Sets the reference of the instance of org.zenithblox.spi.ExchangeFormatter to generate the log message from exchange.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition" : {
          "title" : "Default Error Handler",
          "description" : "The default error handler.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition" : {
          "title" : "Jta Transaction Error Handler",
          "description" : "JTA based transactional error handler (requires camel-jta).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "transactedPolicyRef" : {
              "type" : "string",
              "title" : "Transacted Policy Ref",
              "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Zwangine will attempt to auto-discover.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.spi.TransactedPolicy"
            },
            "rollbackLoggingLevel" : {
              "type" : "string",
              "title" : "Rollback Logging Level",
              "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
              "default" : "WARN",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.errorhandler.NoErrorHandlerDefinition" : {
          "title" : "No Error Handler",
          "description" : "To not use an error handler.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.errorhandler.RefErrorHandlerDefinition" : {
          "title" : "Ref Error Handler",
          "description" : "References to an existing or custom error handler.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "References to an existing or custom error handler.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.ErrorHandlerFactory"
            }
          }
        },
        "org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition" : {
          "title" : "Spring Transaction Error Handler",
          "description" : "Spring based transactional error handler (requires camel-spring).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "transactedPolicyRef" : {
              "type" : "string",
              "title" : "Transacted Policy Ref",
              "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Zwangine will attempt to auto-discover.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.spi.TransactedPolicy"
            },
            "rollbackLoggingLevel" : {
              "type" : "string",
              "title" : "Rollback Logging Level",
              "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
              "default" : "WARN",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.FromDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "uri" : {
              "type" : "string",
              "title" : "Uri",
              "description" : "Sets the URI of the endpoint to use",
              "$comment" : "group:common"
            },
            "variableReceive" : {
              "type" : "string",
              "title" : "Variable Receive",
              "description" : "To use a variable to store a copy of the received message body (only body, not headers). This is handy for easy access to the received message body via variables.",
              "$comment" : "group:common"
            },
            "parameters" : {
              "type" : "object"
            },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
              }
            }
          },
          "required" : [ "steps", "uri" ]
        },
        "org.zenithblox.model.InputTypeDefinition" : {
          "title" : "Input Type",
          "description" : "Set the expected data type of the input message. If the actual message type is different at runtime, camel look for a required Transformer and apply if exists. If validate attribute is true then camel applies Validator as well. Type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} . It's also possible to specify only scheme part, so that it works like a wildcard. If only 'xml' is specified, all the XML message matches. It's handy to add only one transformer/validator for all the transformation from/to XML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "urn" : {
              "type" : "string",
              "title" : "Urn",
              "description" : "The input type URN.",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether if validation is required for this input type.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "urn" ]
        },
        "org.zenithblox.model.OutputTypeDefinition" : {
          "title" : "Output Type",
          "description" : "Set the expected data type of the output message. If the actual message type is different at runtime, camel look for a required Transformer and apply if exists. If validate attribute is true then camel applies Validator as well. Type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} . It's also possible to specify only scheme part, so that it works like a wildcard. If only 'xml' is specified, all the XML message matches. It's handy to add only one transformer/validator for all the XML-Java transformation.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "urn" : {
              "type" : "string",
              "title" : "Urn",
              "description" : "Set output type URN.",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether if validation is required for this output type.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "urn" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "workflowTemplate" : {
    "model" : {
      "kind" : "model",
      "name" : "workflowTemplate",
      "title" : "Workflow Template",
      "description" : "Defines a workflow template (parameterized workflows)",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.WorkflowTemplateDefinition",
      "abstract" : false,
      "input" : false,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "templateParameter" : {
        "index" : 2,
        "kind" : "element",
        "displayName" : "Template Parameter",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.WorkflowTemplateParameterDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Adds a template parameter the workflow template uses"
      },
      "templateBean" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Template Bean",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.BeanFactoryDefinition<org.zenithblox.model.WorkflowTemplateDefinition>>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Adds a local bean the workflow template uses"
      },
      "workflow" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Workflow",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.WorkflowDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the workflow in the template"
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "workflow" : {
          "$ref" : "#/definitions/org.zenithblox.model.WorkflowDefinition",
          "title" : "Workflow",
          "description" : "To define the workflow in the template",
          "$comment" : "group:common"
        },
        "beans" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.BeanFactoryDefinition"
          }
        },
        "from" : {
          "$ref" : "#/definitions/org.zenithblox.model.FromDefinition"
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.WorkflowTemplateParameterDefinition"
          }
        }
      },
      "required" : [ "id", "workflow" ],
      "definitions" : {
        "org.zenithblox.model.BeanFactoryDefinition" : {
          "title" : "Bean Factory",
          "description" : "Define custom beans that can be used in your Zwangine workflows and in general.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "The name of the bean (bean id)",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "The class name (fully qualified) of the bean",
              "$comment" : "group:common"
            },
            "initMethod" : {
              "type" : "string",
              "title" : "Init Method",
              "description" : "The name of the custom initialization method to invoke after setting bean properties. The method must have no arguments, but may throw any exception.",
              "$comment" : "group:common"
            },
            "destroyMethod" : {
              "type" : "string",
              "title" : "Destroy Method",
              "description" : "The name of the custom destroy method to invoke on bean shutdown, such as when Zwangine is shutting down. The method must have no arguments, but may throw any exception.",
              "$comment" : "group:common"
            },
            "factoryMethod" : {
              "type" : "string",
              "title" : "Factory Method",
              "description" : "Name of method to invoke when creating the bean via a factory bean.",
              "$comment" : "group:common"
            },
            "factoryBean" : {
              "type" : "string",
              "title" : "Factory Bean",
              "description" : "Name of factory bean (bean id) to use for creating the bean.",
              "$comment" : "group:common"
            },
            "builderClass" : {
              "type" : "string",
              "title" : "Builder Class",
              "description" : "Fully qualified class name of builder class to use for creating and configuring the bean. The builder will use the properties values to configure the bean.",
              "$comment" : "group:common"
            },
            "builderMethod" : {
              "type" : "string",
              "title" : "Builder Method",
              "description" : "Name of method when using builder class. This method is invoked after configuring to create the actual bean. This method is often named build (used by default).",
              "default" : "build",
              "$comment" : "group:common"
            },
            "scriptLanguage" : {
              "type" : "string",
              "title" : "Script Language",
              "description" : "The script language to use when using inlined script for creating the bean, such as groovy, java, javascript etc.",
              "$comment" : "group:advanced"
            },
            "constructors" : {
              "type" : "object",
              "title" : "Constructors",
              "description" : "Optional constructor arguments for creating the bean. Arguments correspond to specific index of the constructor argument list, starting from zero.",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "object",
              "title" : "Properties",
              "description" : "Optional properties to set on the created bean.",
              "$comment" : "group:common"
            },
            "script" : {
              "type" : "string",
              "title" : "Script",
              "description" : "The script to execute that creates the bean when using scripting languages. If the script use the prefix resource: such as resource:classpath:com/foo/myscript.groovy, resource:file:/var/myscript.groovy, then its loaded from the external resource.",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "name", "type" ]
        },
        "org.zenithblox.model.FromDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "uri" : {
              "type" : "string",
              "title" : "Uri",
              "description" : "Sets the URI of the endpoint to use",
              "$comment" : "group:common"
            },
            "variableReceive" : {
              "type" : "string",
              "title" : "Variable Receive",
              "description" : "To use a variable to store a copy of the received message body (only body, not headers). This is handy for easy access to the received message body via variables.",
              "$comment" : "group:common"
            },
            "parameters" : {
              "type" : "object"
            },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
              }
            }
          },
          "required" : [ "steps", "uri" ]
        },
        "org.zenithblox.model.WorkflowTemplateParameterDefinition" : {
          "title" : "Template Parameter",
          "description" : "A workflow template parameter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "The name of the parameter",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Whether the parameter is required or not. A parameter is required unless this option is set to false or a default value has been configured.",
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Default value of the parameter. If a default value is provided then the parameter is implied not to be required.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.WorkflowDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "The group that this workflow belongs to; could be the name of the WorkflowBuilder class or be explicitly configured in the XML. May be null.",
              "$comment" : "group:common"
            },
            "nodePrefixId" : {
              "type" : "string",
              "title" : "Node Prefix Id",
              "description" : "Sets a prefix to use for all node ids (not workflow id).",
              "$comment" : "group:common"
            },
            "workflowConfigurationId" : {
              "type" : "string",
              "title" : "Workflow Configuration Id",
              "description" : "The workflow configuration id or pattern this workflow should use for configuration. Multiple id/pattern can be separated by comma.",
              "$comment" : "group:common"
            },
            "autoStartup" : {
              "type" : "boolean",
              "title" : "Auto Startup",
              "description" : "Whether to auto start this workflow",
              "$comment" : "group:common",
              "default" : "true"
            },
            "startupOrder" : {
              "type" : "number",
              "title" : "Startup Order",
              "description" : "To configure the ordering of the workflows being started",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this workflow.",
              "$comment" : "group:common"
            },
            "trace" : {
              "type" : "boolean",
              "title" : "Trace",
              "description" : "Whether tracing is enabled on this workflow.",
              "$comment" : "group:common"
            },
            "messageHistory" : {
              "type" : "boolean",
              "title" : "Message History",
              "description" : "Whether message history is enabled on this workflow.",
              "$comment" : "group:common"
            },
            "logMask" : {
              "type" : "boolean",
              "title" : "Log Mask",
              "description" : "Whether security mask for Logging is enabled on this workflow.",
              "$comment" : "group:common",
              "default" : "false"
            },
            "errorHandlerRef" : {
              "type" : "string",
              "title" : "Error Handler",
              "description" : "Sets the bean ref name of the error handler builder to use on this workflow",
              "$comment" : "group:error"
            },
            "shutdownWorkflow" : {
              "type" : "string",
              "description" : "To control how to shut down the workflow.",
              "default" : "Default",
              "enum" : [ "Default", "Defer" ],
              "title" : "Shutdown Workflow",
              "$comment" : "group:advanced"
            },
            "shutdownRunningTask" : {
              "type" : "string",
              "description" : "To control how to shut down the workflow.",
              "default" : "CompleteCurrentTaskOnly",
              "enum" : [ "CompleteCurrentTaskOnly", "CompleteAllTasks" ],
              "title" : "Shutdown Running Task",
              "$comment" : "group:advanced"
            },
            "precondition" : {
              "type" : "string",
              "title" : "Precondition",
              "description" : "The predicate of the precondition in simple language to evaluate in order to determine if this workflow should be included or not.",
              "$comment" : "group:advanced"
            },
            "errorHandler" : {
              "$ref" : "#/definitions/org.zenithblox.model.ErrorHandlerDefinition",
              "title" : "Error Handler",
              "description" : "Sets the error handler to use for this workflow",
              "$comment" : "group:error"
            },
            "inputType" : {
              "$ref" : "#/definitions/org.zenithblox.model.InputTypeDefinition",
              "title" : "Input Type",
              "description" : "Declare the expected data type of the input message. If the actual message type is different at runtime, camel look for a required org.zenithblox.spi.Transformer and apply if exists. The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} .",
              "$comment" : "group:advanced"
            },
            "outputType" : {
              "$ref" : "#/definitions/org.zenithblox.model.OutputTypeDefinition",
              "title" : "Output Type",
              "description" : "Declare the expected data type of the output message. If the actual message type is different at runtime, camel look for a required org.zenithblox.spi.Transformer and apply if exists. The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} .",
              "$comment" : "group:advanced"
            },
            "from" : {
              "$ref" : "#/definitions/org.zenithblox.model.FromDefinition"
            },
            "workflowPolicy" : {
              "type" : "string"
            }
          },
          "required" : [ "from" ]
        },
        "org.zenithblox.model.ErrorHandlerDefinition" : {
          "title" : "Error Handler",
          "description" : "Zwangine error handling.",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "deadLetterChannel" ],
              "properties" : {
                "deadLetterChannel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.DeadLetterChannelDefinition"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "deadLetterChannel" ]
                }, {
                  "required" : [ "defaultErrorHandler" ]
                }, {
                  "required" : [ "jtaTransactionErrorHandler" ]
                }, {
                  "required" : [ "noErrorHandler" ]
                }, {
                  "required" : [ "refErrorHandler" ]
                }, {
                  "required" : [ "springTransactionErrorHandler" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "defaultErrorHandler" ],
              "properties" : {
                "defaultErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jtaTransactionErrorHandler" ],
              "properties" : {
                "jtaTransactionErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "noErrorHandler" ],
              "properties" : {
                "noErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.NoErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "refErrorHandler" ],
              "properties" : {
                "refErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.RefErrorHandlerDefinition"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "springTransactionErrorHandler" ],
              "properties" : {
                "springTransactionErrorHandler" : {
                  "$ref" : "#/definitions/org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition"
                }
              }
            } ]
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "deadLetterChannel" : { },
            "defaultErrorHandler" : { },
            "jtaTransactionErrorHandler" : { },
            "noErrorHandler" : { },
            "refErrorHandler" : { },
            "springTransactionErrorHandler" : { }
          }
        },
        "org.zenithblox.model.errorhandler.DeadLetterChannelDefinition" : {
          "title" : "Dead Letter Channel",
          "description" : "Error handler with dead letter queue.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "deadLetterUri" : {
              "type" : "string",
              "title" : "Dead Letter Uri",
              "description" : "The dead letter endpoint uri for the Dead Letter error handler.",
              "$comment" : "group:common"
            },
            "deadLetterHandleNewException" : {
              "type" : "boolean",
              "title" : "Dead Letter Handle New Exception",
              "description" : "Whether the dead letter channel should handle (and ignore) any new exception that may been thrown during sending the message to the dead letter endpoint. The default value is true which means any such kind of exception is handled and ignored. Set this to false to let the exception be propagated back on the org.zenithblox.Exchange . This can be used in situations where you use transactions, and want to use Zwangine's dead letter channel to deal with exceptions during routing, but if the dead letter channel itself fails because of a new exception being thrown, then by setting this to false the new exceptions is propagated back and set on the org.zenithblox.Exchange , which allows the transaction to detect the exception, and rollback.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          },
          "required" : [ "deadLetterUri" ]
        },
        "org.zenithblox.model.RedeliveryPolicyDefinition" : {
          "title" : "Redelivery Policy",
          "description" : "To configure re-delivery for error handling",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "maximumRedeliveries" : {
              "type" : "number",
              "title" : "Maximum Redeliveries",
              "description" : "Sets the maximum redeliveries x = redeliver at most x times 0 = no redeliveries -1 = redeliver forever",
              "$comment" : "group:common"
            },
            "redeliveryDelay" : {
              "type" : "string",
              "title" : "Redelivery Delay",
              "description" : "Sets the initial redelivery delay",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "asyncDelayedRedelivery" : {
              "type" : "boolean",
              "title" : "Async Delayed Redelivery",
              "description" : "Allow asynchronous delayed redelivery. The workflow, in particular the consumer's component, must support the Asynchronous Routing Engine (e.g. seda).",
              "$comment" : "group:advanced"
            },
            "backOffMultiplier" : {
              "type" : "number",
              "title" : "Back Off Multiplier",
              "description" : "Sets the back off multiplier",
              "default" : "2.0",
              "$comment" : "group:common"
            },
            "useExponentialBackOff" : {
              "type" : "boolean",
              "title" : "Use Exponential Back Off",
              "description" : "Turn on exponential back off",
              "$comment" : "group:advanced"
            },
            "collisionAvoidanceFactor" : {
              "type" : "number",
              "title" : "Collision Avoidance Factor",
              "description" : "Sets the collision avoidance factor",
              "default" : "0.15",
              "$comment" : "group:advanced"
            },
            "useCollisionAvoidance" : {
              "type" : "boolean",
              "title" : "Use Collision Avoidance",
              "description" : "Turn on collision avoidance.",
              "$comment" : "group:advanced"
            },
            "maximumRedeliveryDelay" : {
              "type" : "string",
              "title" : "Maximum Redelivery Delay",
              "description" : "Sets the maximum delay between redelivery",
              "default" : "60000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "retriesExhaustedLogLevel" : {
              "type" : "string",
              "title" : "Retries Exhausted Log Level",
              "description" : "Sets the logging level to use when retries have been exhausted",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "retryAttemptedLogLevel" : {
              "type" : "string",
              "title" : "Retry Attempted Log Level",
              "description" : "Sets the logging level to use for logging retry attempts",
              "default" : "DEBUG",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "retryAttemptedLogInterval" : {
              "type" : "number",
              "title" : "Retry Attempted Log Interval",
              "description" : "Sets the interval to use for logging retry attempts",
              "default" : "1",
              "$comment" : "group:advanced"
            },
            "logRetryAttempted" : {
              "type" : "boolean",
              "title" : "Log Retry Attempted",
              "description" : "Sets whether retry attempts should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logStackTrace" : {
              "type" : "boolean",
              "title" : "Log Stack Trace",
              "description" : "Sets whether stack traces should be logged. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logRetryStackTrace" : {
              "type" : "boolean",
              "title" : "Log Retry Stack Trace",
              "description" : "Sets whether stack traces should be logged when an retry attempt failed. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logHandled" : {
              "type" : "boolean",
              "title" : "Log Handled",
              "description" : "Sets whether handled exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logNewException" : {
              "type" : "boolean",
              "title" : "Log New Exception",
              "description" : "Sets whether new exceptions should be logged or not. Can be used to include or reduce verbose. A new exception is an exception that was thrown while handling a previous exception.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logContinued" : {
              "type" : "boolean",
              "title" : "Log Continued",
              "description" : "Sets whether continued exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:common"
            },
            "logExhausted" : {
              "type" : "boolean",
              "title" : "Log Exhausted",
              "description" : "Sets whether exhausted exceptions should be logged or not. Can be used to include or reduce verbose.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "logExhaustedMessageHistory" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message History",
              "description" : "Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose.",
              "$comment" : "group:advanced"
            },
            "logExhaustedMessageBody" : {
              "type" : "boolean",
              "title" : "Log Exhausted Message Body",
              "description" : "Sets whether exhausted message body should be logged including message history or not (supports property placeholders). Can be used to include or reduce verbose. Requires logExhaustedMessageHistory to be enabled.",
              "$comment" : "group:advanced"
            },
            "disableRedelivery" : {
              "type" : "boolean",
              "title" : "Disable Redelivery",
              "description" : "Disables redelivery (same as setting maximum redeliveries to 0)",
              "$comment" : "group:advanced"
            },
            "delayPattern" : {
              "type" : "string",
              "title" : "Delay Pattern",
              "description" : "Sets the delay pattern with delay intervals.",
              "$comment" : "group:advanced"
            },
            "allowRedeliveryWhileStopping" : {
              "type" : "boolean",
              "title" : "Allow Redelivery While Stopping",
              "description" : "Controls whether to allow redelivery while stopping/shutting down a workflow that uses error handling.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "exchangeFormatterRef" : {
              "type" : "string",
              "title" : "Exchange Formatter Ref",
              "description" : "Sets the reference of the instance of org.zenithblox.spi.ExchangeFormatter to generate the log message from exchange.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.errorhandler.DefaultErrorHandlerDefinition" : {
          "title" : "Default Error Handler",
          "description" : "The default error handler.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.errorhandler.JtaTransactionErrorHandlerDefinition" : {
          "title" : "Jta Transaction Error Handler",
          "description" : "JTA based transactional error handler (requires camel-jta).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "transactedPolicyRef" : {
              "type" : "string",
              "title" : "Transacted Policy Ref",
              "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Zwangine will attempt to auto-discover.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.spi.TransactedPolicy"
            },
            "rollbackLoggingLevel" : {
              "type" : "string",
              "title" : "Rollback Logging Level",
              "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
              "default" : "WARN",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.errorhandler.NoErrorHandlerDefinition" : {
          "title" : "No Error Handler",
          "description" : "To not use an error handler.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.errorhandler.RefErrorHandlerDefinition" : {
          "title" : "Ref Error Handler",
          "description" : "References to an existing or custom error handler.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "References to an existing or custom error handler.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.ErrorHandlerFactory"
            }
          }
        },
        "org.zenithblox.model.errorhandler.SpringTransactionErrorHandlerDefinition" : {
          "title" : "Spring Transaction Error Handler",
          "description" : "Spring based transactional error handler (requires camel-spring).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "transactedPolicyRef" : {
              "type" : "string",
              "title" : "Transacted Policy Ref",
              "description" : "The transacted policy to use that is configured for either Spring or JTA based transactions. If no policy has been configured then Zwangine will attempt to auto-discover.",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.spi.TransactedPolicy"
            },
            "rollbackLoggingLevel" : {
              "type" : "string",
              "title" : "Rollback Logging Level",
              "description" : "Sets the logging level to use for logging transactional rollback. This option is default WARN.",
              "default" : "WARN",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:common"
            },
            "redeliveryPolicy" : {
              "title" : "Redelivery Policy",
              "description" : "Sets the redelivery settings",
              "$ref" : "#/definitions/org.zenithblox.model.RedeliveryPolicyDefinition",
              "$comment" : "group:common"
            },
            "useOriginalMessage" : {
              "type" : "boolean",
              "title" : "Use Original Message",
              "description" : "Will use the original input org.zenithblox.Message (original body and headers) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "useOriginalBody" : {
              "type" : "boolean",
              "title" : "Use Original Body",
              "description" : "Will use the original input org.zenithblox.Message body (original body only) when an org.zenithblox.Exchange is moved to the dead letter queue. Notice: this only applies when all redeliveries attempt have failed and the org.zenithblox.Exchange is doomed for failure. Instead of using the current inprogress org.zenithblox.Exchange IN message we use the original IN message instead. This allows you to store the original input in the dead letter queue instead of the inprogress snapshot of the IN message. For instance if you workflow transform the IN body during routing and then failed. With the original exchange store in the dead letter queue it might be easier to manually re submit the org.zenithblox.Exchange again as the IN message is the same as when Zwangine received it. So you should be able to send the org.zenithblox.Exchange to the same input. The difference between useOriginalMessage and useOriginalBody is that the former includes both the original body and headers, where as the latter only includes the original body. You can use the latter to enrich the message with custom headers and include the original message body. The former wont let you do this, as its using the original message body and headers as they are. You cannot enable both useOriginalMessage and useOriginalBody. The original input message is defensively copied, and the copied message body is converted to org.zenithblox.StreamCache if possible (stream caching is enabled, can be disabled globally or on the original workflow), to ensure the body can be read when the original message is being used later. If the body is converted to org.zenithblox.StreamCache then the message body on the current org.zenithblox.Exchange is replaced with the org.zenithblox.StreamCache body. If the body is not converted to org.zenithblox.StreamCache then the body will not be able to re-read when accessed later. Important: The original input means the input message that are bounded by the current org.zenithblox.spi.UnitOfWork . An unit of work typically spans one workflow, or multiple workflows if they are connected using internal endpoints such as direct or seda. When messages is passed via external endpoints such as JMS or HTTP then the consumer will create a new unit of work, with the message it received as input as the original input. Also some EIP patterns such as splitter, multicast, will create a new unit of work boundary for the messages in their sub-workflow (eg the splitted message); however these EIPs have an option named shareUnitOfWork which allows to combine with the parent unit of work in regard to error handling and therefore use the parent original message. By default this feature is off.",
              "$comment" : "group:common"
            },
            "redeliveryPolicyRef" : {
              "type" : "string",
              "title" : "Redelivery Policy Ref",
              "description" : "Sets a reference to a RedeliveryPolicy to be used for redelivery settings.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.errorhandler.RedeliveryPolicy"
            },
            "loggerRef" : {
              "type" : "string",
              "title" : "Logger Ref",
              "description" : "References to a logger to use as logger for the error handler",
              "$comment" : "group:advanced"
            },
            "level" : {
              "type" : "string",
              "title" : "Level",
              "description" : "Logging level to use by error handler",
              "default" : "ERROR",
              "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
              "$comment" : "group:advanced"
            },
            "logName" : {
              "type" : "string",
              "title" : "Log Name",
              "description" : "Name of the logger to use by the error handler",
              "$comment" : "group:advanced"
            },
            "onRedeliveryRef" : {
              "type" : "string",
              "title" : "On Redelivery Ref",
              "description" : "Sets a reference to a processor that should be processed before a redelivery attempt. Can be used to change the org.zenithblox.Exchange before its being redelivered.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onExceptionOccurredRef" : {
              "type" : "string",
              "title" : "On Exception Occurred Ref",
              "description" : "Sets a reference to a processor that should be processed just after an exception occurred. Can be used to perform custom logging about the occurred exception at the exact time it happened. Important: Any exception thrown from this processor will be ignored.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "onPrepareFailureRef" : {
              "type" : "string",
              "title" : "On Prepare Failure Ref",
              "description" : "Sets a reference to a processor to prepare the org.zenithblox.Exchange before handled by the failure processor / dead letter channel. This allows for example to enrich the message before sending to a dead letter queue.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "retryWhileRef" : {
              "type" : "string",
              "title" : "Retry While Ref",
              "description" : "Sets a retry while predicate. Will continue retrying until the predicate evaluates to false.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.Processor"
            },
            "executorServiceRef" : {
              "type" : "string",
              "title" : "Executor Service Ref",
              "description" : "Sets a reference to a thread pool to be used by the error handler",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            }
          }
        },
        "org.zenithblox.model.InputTypeDefinition" : {
          "title" : "Input Type",
          "description" : "Set the expected data type of the input message. If the actual message type is different at runtime, camel look for a required Transformer and apply if exists. If validate attribute is true then camel applies Validator as well. Type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} . It's also possible to specify only scheme part, so that it works like a wildcard. If only 'xml' is specified, all the XML message matches. It's handy to add only one transformer/validator for all the transformation from/to XML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "urn" : {
              "type" : "string",
              "title" : "Urn",
              "description" : "The input type URN.",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether if validation is required for this input type.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "urn" ]
        },
        "org.zenithblox.model.OutputTypeDefinition" : {
          "title" : "Output Type",
          "description" : "Set the expected data type of the output message. If the actual message type is different at runtime, camel look for a required Transformer and apply if exists. If validate attribute is true then camel applies Validator as well. Type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name' is a fully qualified class name. For example {code java:java.lang.String} , {code json:ABCOrder} . It's also possible to specify only scheme part, so that it works like a wildcard. If only 'xml' is specified, all the XML message matches. It's handy to add only one transformer/validator for all the XML-Java transformation.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "urn" : {
              "type" : "string",
              "title" : "Urn",
              "description" : "Set output type URN.",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether if validation is required for this output type.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "urn" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "templatedWorkflow" : {
    "model" : {
      "kind" : "model",
      "name" : "templatedWorkflow",
      "title" : "Templated Workflow",
      "description" : "Defines a templated workflow (a workflow built from a workflow template)",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.TemplatedWorkflowDefinition",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "workflowTemplateRef" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Workflow Template Ref",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the workflow template to use to build the workflow."
      },
      "workflowId" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Workflow Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the workflow built from the workflow template."
      },
      "prefixId" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Prefix Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a prefix to use for all node ids (not workflow id)."
      },
      "parameter" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Parameter",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.TemplatedWorkflowParameterDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Adds an input parameter of the template to build the workflow"
      },
      "bean" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Bean",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.BeanFactoryDefinition<org.zenithblox.model.TemplatedWorkflowDefinition>>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Adds a local bean as input of the template to build the workflow"
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "workflowTemplateRef" : {
          "type" : "string",
          "title" : "Workflow Template Ref",
          "description" : "Sets the id of the workflow template to use to build the workflow.",
          "$comment" : "group:common"
        },
        "workflowId" : {
          "type" : "string",
          "title" : "Workflow Id",
          "description" : "Sets the id of the workflow built from the workflow template.",
          "$comment" : "group:common"
        },
        "prefixId" : {
          "type" : "string",
          "title" : "Prefix Id",
          "description" : "Sets a prefix to use for all node ids (not workflow id).",
          "$comment" : "group:common"
        },
        "beans" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.BeanFactoryDefinition"
          }
        },
        "parameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.TemplatedWorkflowParameterDefinition"
          }
        }
      },
      "required" : [ "workflowTemplateRef" ],
      "definitions" : {
        "org.zenithblox.model.BeanFactoryDefinition" : {
          "title" : "Bean Factory",
          "description" : "Define custom beans that can be used in your Zwangine workflows and in general.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "The name of the bean (bean id)",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "The class name (fully qualified) of the bean",
              "$comment" : "group:common"
            },
            "initMethod" : {
              "type" : "string",
              "title" : "Init Method",
              "description" : "The name of the custom initialization method to invoke after setting bean properties. The method must have no arguments, but may throw any exception.",
              "$comment" : "group:common"
            },
            "destroyMethod" : {
              "type" : "string",
              "title" : "Destroy Method",
              "description" : "The name of the custom destroy method to invoke on bean shutdown, such as when Zwangine is shutting down. The method must have no arguments, but may throw any exception.",
              "$comment" : "group:common"
            },
            "factoryMethod" : {
              "type" : "string",
              "title" : "Factory Method",
              "description" : "Name of method to invoke when creating the bean via a factory bean.",
              "$comment" : "group:common"
            },
            "factoryBean" : {
              "type" : "string",
              "title" : "Factory Bean",
              "description" : "Name of factory bean (bean id) to use for creating the bean.",
              "$comment" : "group:common"
            },
            "builderClass" : {
              "type" : "string",
              "title" : "Builder Class",
              "description" : "Fully qualified class name of builder class to use for creating and configuring the bean. The builder will use the properties values to configure the bean.",
              "$comment" : "group:common"
            },
            "builderMethod" : {
              "type" : "string",
              "title" : "Builder Method",
              "description" : "Name of method when using builder class. This method is invoked after configuring to create the actual bean. This method is often named build (used by default).",
              "default" : "build",
              "$comment" : "group:common"
            },
            "scriptLanguage" : {
              "type" : "string",
              "title" : "Script Language",
              "description" : "The script language to use when using inlined script for creating the bean, such as groovy, java, javascript etc.",
              "$comment" : "group:advanced"
            },
            "constructors" : {
              "type" : "object",
              "title" : "Constructors",
              "description" : "Optional constructor arguments for creating the bean. Arguments correspond to specific index of the constructor argument list, starting from zero.",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "object",
              "title" : "Properties",
              "description" : "Optional properties to set on the created bean.",
              "$comment" : "group:common"
            },
            "script" : {
              "type" : "string",
              "title" : "Script",
              "description" : "The script to execute that creates the bean when using scripting languages. If the script use the prefix resource: such as resource:classpath:com/foo/myscript.groovy, resource:file:/var/myscript.groovy, then its loaded from the external resource.",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "name", "type" ]
        },
        "org.zenithblox.model.TemplatedWorkflowParameterDefinition" : {
          "title" : "Templated Workflow Parameter",
          "description" : "An input parameter of a workflow template.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "The name of the parameter",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The value of the parameter.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name", "value" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "restConfiguration" : {
    "model" : {
      "kind" : "model",
      "name" : "restConfiguration",
      "title" : "Rest Configuration",
      "description" : "To configure rest",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.RestConfigurationDefinition",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "component" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Component",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "platform-http", "servlet", "jetty", "undertow", "netty-http", "coap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine Rest component to use for the REST transport (consumer), such as netty-http, jetty, servlet, undertow. If no component has been explicit configured, then Zwangine will lookup if there is a Zwangine component that integrates with the Rest DSL, or if a org.zenithblox.spi.RestConsumerFactory is registered in the registry. If either one is found, then that is being used."
      },
      "apiComponent" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Api Component",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "openapi", "swagger" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The name of the Zwangine component to use as the REST API. If no API Component has been explicit configured, then Zwangine will lookup if there is a Zwangine component responsible for servicing and generating the REST API documentation, or if a org.zenithblox.spi.RestApiProcessorFactory is registered in the registry. If either one is found, then that is being used."
      },
      "producerComponent" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Producer Component",
        "group" : "producer (advanced)",
        "label" : "producer,advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "vertx-http", "http", "undertow", "netty-http" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the name of the Zwangine component to use as the REST producer"
      },
      "scheme" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Scheme",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The scheme to use for exposing the REST service. Usually http or https is supported. The default value is http"
      },
      "host" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Host",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The hostname to use for exposing the REST service."
      },
      "port" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Port",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The port number to use for exposing the REST service. Notice if you use servlet component then the port number configured here does not apply, as the port number in use is the actual port number the servlet component is using. eg if using Apache Tomcat its the tomcat http port, if using Apache Karaf its the HTTP service in Karaf that uses port 8181 by default etc. Though in those situations setting the port number here, allows tooling and JMX to know the port number, so its recommended to set the port number to the number that the servlet engine uses."
      },
      "apiHost" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Api Host",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a specific hostname for the API documentation (such as swagger or openapi) This can be used to override the generated host with this configured hostname"
      },
      "useXForwardHeaders" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Use XForward Headers",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to use X-Forward headers to set host etc. for OpenApi. This may be needed in special cases involving reverse-proxy and networking going from HTTP to HTTPS etc. Then the proxy can send X-Forward headers (X-Forwarded-Proto) that influences the host names in the OpenAPI schema that camel-openapi-java generates from Rest DSL workflows."
      },
      "producerApiDoc" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Producer Api Doc",
        "group" : "producer (advanced)",
        "label" : "producer,advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the location of the api document the REST producer will use to validate the REST uri and query parameters are valid accordingly to the api document. The location of the api document is loaded from classpath by default, but you can use file: or http: to refer to resources to load from file or http url."
      },
      "contextPath" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Context Path",
        "group" : "consumer",
        "label" : "consumer",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a leading context-path the REST services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path. Or for components such as camel-jetty or camel-netty-http that includes a HTTP server."
      },
      "apiContextPath" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Api Context Path",
        "group" : "consumer",
        "label" : "consumer",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a leading context-path the REST API will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path."
      },
      "apiContextWorkflowId" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Api Context Workflow Id",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the workflow id to use for the workflow that services the REST API. The workflow will by default use an auto assigned workflow id."
      },
      "apiVendorExtension" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Api Vendor Extension",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether vendor extension is enabled in the Rest APIs. If enabled then Zwangine will include additional information as vendor extension (eg keys starting with x-) such as workflow ids, class names etc. Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs."
      },
      "hostNameResolver" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Host Name Resolver",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.rest.RestHostNameResolver",
        "enum" : [ "allLocalIp", "localHostName", "localIp", "none" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "allLocalIp",
        "description" : "If no hostname has been explicit configured, then this resolver is used to compute the hostname the REST service will be using."
      },
      "bindingMode" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.rest.RestBindingMode",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. The default value is off"
      },
      "bindingPackageScan" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Binding Package Scan",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Package name to use as base (offset) for classpath scanning of POJO classes are located when using binding mode is enabled for JSon or XML. Multiple package names can be separated by comma."
      },
      "skipBindingOnErrorCode" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do."
      },
      "clientRequestValidation" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "inlineWorkflows" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Inline Workflows",
        "group" : "consumer",
        "label" : "consumer",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Inline workflows in rest-dsl which are linked using direct endpoints. Each service in Rest DSL is an individual workflow, meaning that you would have at least two workflows per service (rest-dsl, and the workflow linked from rest-dsl). By inlining (default) allows Zwangine to optimize and inline this as a single workflow, however this requires to use direct endpoints, which must be unique per service. If a workflow is not using direct endpoint then the rest-dsl is not inlined, and will become an individual workflow. This option is default true."
      },
      "jsonDataFormat" : {
        "index" : 21,
        "kind" : "attribute",
        "displayName" : "Json Data Format",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of specific json data format to use. By default jackson will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance."
      },
      "xmlDataFormat" : {
        "index" : 22,
        "kind" : "attribute",
        "displayName" : "Xml Data Format",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of specific XML data format to use. By default jaxb will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance."
      },
      "componentProperty" : {
        "index" : 23,
        "kind" : "element",
        "displayName" : "Component Property",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.RestPropertyDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure as many additional properties for the rest component in use."
      },
      "endpointProperty" : {
        "index" : 24,
        "kind" : "element",
        "displayName" : "Endpoint Property",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.RestPropertyDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure as many additional properties for the rest endpoint in use."
      },
      "consumerProperty" : {
        "index" : 25,
        "kind" : "element",
        "displayName" : "Consumer Property",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.RestPropertyDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure as many additional properties for the rest consumer in use."
      },
      "dataFormatProperty" : {
        "index" : 26,
        "kind" : "element",
        "displayName" : "Data Format Property",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.RestPropertyDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure as many additional properties for the data formats in use. For example set property prettyPrint to true to have json outputted in pretty mode. The properties can be prefixed to denote the option is only for either JSON or XML and for either the IN or the OUT. The prefixes are: json.in. json.out. xml.in. xml.out. For example a key with value xml.out.mustBeJAXBElement is only for the XML data format for the outgoing. A key without a prefix is a common key for all situations."
      },
      "apiProperty" : {
        "index" : 27,
        "kind" : "element",
        "displayName" : "Api Property",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.RestPropertyDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure as many additional properties for the api documentation. For example set property api.title to my cool stuff"
      },
      "corsHeaders" : {
        "index" : 28,
        "kind" : "element",
        "displayName" : "Cors Headers",
        "group" : "consumer (advanced)",
        "label" : "consumer,advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.RestPropertyDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure custom CORS headers."
      }
    },
    "propertiesSchema" : {
      "title" : "Rest Configuration",
      "description" : "To configure rest",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "component" : {
          "type" : "string",
          "title" : "Component",
          "description" : "The Zwangine Rest component to use for the REST transport (consumer), such as netty-http, jetty, servlet, undertow. If no component has been explicit configured, then Zwangine will lookup if there is a Zwangine component that integrates with the Rest DSL, or if a org.zenithblox.spi.RestConsumerFactory is registered in the registry. If either one is found, then that is being used.",
          "enum" : [ "platform-http", "servlet", "jetty", "undertow", "netty-http", "coap" ],
          "$comment" : "group:common"
        },
        "apiComponent" : {
          "type" : "string",
          "title" : "Api Component",
          "description" : "The name of the Zwangine component to use as the REST API. If no API Component has been explicit configured, then Zwangine will lookup if there is a Zwangine component responsible for servicing and generating the REST API documentation, or if a org.zenithblox.spi.RestApiProcessorFactory is registered in the registry. If either one is found, then that is being used.",
          "enum" : [ "openapi", "swagger" ],
          "$comment" : "group:consumer (advanced)"
        },
        "producerComponent" : {
          "type" : "string",
          "title" : "Producer Component",
          "description" : "Sets the name of the Zwangine component to use as the REST producer",
          "enum" : [ "vertx-http", "http", "undertow", "netty-http" ],
          "$comment" : "group:producer (advanced)"
        },
        "scheme" : {
          "type" : "string",
          "title" : "Scheme",
          "description" : "The scheme to use for exposing the REST service. Usually http or https is supported. The default value is http",
          "$comment" : "group:common"
        },
        "host" : {
          "type" : "string",
          "title" : "Host",
          "description" : "The hostname to use for exposing the REST service.",
          "$comment" : "group:common"
        },
        "port" : {
          "type" : "string",
          "title" : "Port",
          "description" : "The port number to use for exposing the REST service. Notice if you use servlet component then the port number configured here does not apply, as the port number in use is the actual port number the servlet component is using. eg if using Apache Tomcat its the tomcat http port, if using Apache Karaf its the HTTP service in Karaf that uses port 8181 by default etc. Though in those situations setting the port number here, allows tooling and JMX to know the port number, so its recommended to set the port number to the number that the servlet engine uses.",
          "$comment" : "group:common"
        },
        "apiHost" : {
          "type" : "string",
          "title" : "Api Host",
          "description" : "To use a specific hostname for the API documentation (such as swagger or openapi) This can be used to override the generated host with this configured hostname",
          "$comment" : "group:consumer (advanced)"
        },
        "useXForwardHeaders" : {
          "type" : "boolean",
          "title" : "Use XForward Headers",
          "description" : "Whether to use X-Forward headers to set host etc. for OpenApi. This may be needed in special cases involving reverse-proxy and networking going from HTTP to HTTPS etc. Then the proxy can send X-Forward headers (X-Forwarded-Proto) that influences the host names in the OpenAPI schema that camel-openapi-java generates from Rest DSL workflows.",
          "$comment" : "group:consumer (advanced)"
        },
        "producerApiDoc" : {
          "type" : "string",
          "title" : "Producer Api Doc",
          "description" : "Sets the location of the api document the REST producer will use to validate the REST uri and query parameters are valid accordingly to the api document. The location of the api document is loaded from classpath by default, but you can use file: or http: to refer to resources to load from file or http url.",
          "$comment" : "group:producer (advanced)"
        },
        "contextPath" : {
          "type" : "string",
          "title" : "Context Path",
          "description" : "Sets a leading context-path the REST services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path. Or for components such as camel-jetty or camel-netty-http that includes a HTTP server.",
          "$comment" : "group:consumer"
        },
        "apiContextPath" : {
          "type" : "string",
          "title" : "Api Context Path",
          "description" : "Sets a leading context-path the REST API will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path.",
          "$comment" : "group:consumer"
        },
        "apiContextWorkflowId" : {
          "type" : "string",
          "title" : "Api Context Workflow Id",
          "description" : "Sets the workflow id to use for the workflow that services the REST API. The workflow will by default use an auto assigned workflow id.",
          "$comment" : "group:consumer (advanced)"
        },
        "apiVendorExtension" : {
          "type" : "boolean",
          "title" : "Api Vendor Extension",
          "description" : "Whether vendor extension is enabled in the Rest APIs. If enabled then Zwangine will include additional information as vendor extension (eg keys starting with x-) such as workflow ids, class names etc. Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.",
          "$comment" : "group:consumer (advanced)"
        },
        "hostNameResolver" : {
          "type" : "string",
          "title" : "Host Name Resolver",
          "description" : "If no hostname has been explicit configured, then this resolver is used to compute the hostname the REST service will be using.",
          "default" : "allLocalIp",
          "enum" : [ "allLocalIp", "localHostName", "localIp", "none" ],
          "$comment" : "group:consumer (advanced)"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. The default value is off",
          "default" : "off",
          "enum" : [ "auto", "json", "json_xml", "off", "xml" ],
          "$comment" : "group:common"
        },
        "bindingPackageScan" : {
          "type" : "string",
          "title" : "Binding Package Scan",
          "description" : "Package name to use as base (offset) for classpath scanning of POJO classes are located when using binding mode is enabled for JSon or XML. Multiple package names can be separated by comma.",
          "$comment" : "group:consumer (advanced)"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:consumer (advanced)"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. The default value is false.",
          "$comment" : "group:consumer (advanced)"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:consumer (advanced)"
        },
        "inlineWorkflows" : {
          "type" : "boolean",
          "title" : "Inline Workflows",
          "description" : "Inline workflows in rest-dsl which are linked using direct endpoints. Each service in Rest DSL is an individual workflow, meaning that you would have at least two workflows per service (rest-dsl, and the workflow linked from rest-dsl). By inlining (default) allows Zwangine to optimize and inline this as a single workflow, however this requires to use direct endpoints, which must be unique per service. If a workflow is not using direct endpoint then the rest-dsl is not inlined, and will become an individual workflow. This option is default true.",
          "$comment" : "group:consumer",
          "default" : true
        },
        "jsonDataFormat" : {
          "type" : "string",
          "title" : "Json Data Format",
          "description" : "Name of specific json data format to use. By default jackson will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.",
          "$comment" : "group:advanced"
        },
        "xmlDataFormat" : {
          "type" : "string",
          "title" : "Xml Data Format",
          "description" : "Name of specific XML data format to use. By default jaxb will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.",
          "$comment" : "group:advanced"
        },
        "componentProperty" : {
          "type" : "array",
          "title" : "Component Property",
          "description" : "Allows to configure as many additional properties for the rest component in use.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
          },
          "$comment" : "group:advanced"
        },
        "endpointProperty" : {
          "type" : "array",
          "title" : "Endpoint Property",
          "description" : "Allows to configure as many additional properties for the rest endpoint in use.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
          },
          "$comment" : "group:advanced"
        },
        "consumerProperty" : {
          "type" : "array",
          "title" : "Consumer Property",
          "description" : "Allows to configure as many additional properties for the rest consumer in use.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
          },
          "$comment" : "group:consumer (advanced)"
        },
        "dataFormatProperty" : {
          "type" : "array",
          "title" : "Data Format Property",
          "description" : "Allows to configure as many additional properties for the data formats in use. For example set property prettyPrint to true to have json outputted in pretty mode. The properties can be prefixed to denote the option is only for either JSON or XML and for either the IN or the OUT. The prefixes are: json.in. json.out. xml.in. xml.out. For example a key with value xml.out.mustBeJAXBElement is only for the XML data format for the outgoing. A key without a prefix is a common key for all situations.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
          },
          "$comment" : "group:advanced"
        },
        "apiProperty" : {
          "type" : "array",
          "title" : "Api Property",
          "description" : "Allows to configure as many additional properties for the api documentation. For example set property api.title to my cool stuff",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
          },
          "$comment" : "group:consumer (advanced)"
        },
        "corsHeaders" : {
          "type" : "array",
          "title" : "Cors Headers",
          "description" : "Allows to configure custom CORS headers.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
          },
          "$comment" : "group:consumer (advanced)"
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "rest" : {
    "model" : {
      "kind" : "model",
      "name" : "rest",
      "title" : "Rest",
      "description" : "Defines a rest service using the rest-dsl",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.RestDefinition",
      "abstract" : false,
      "input" : false,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Path of the rest service, such as /foo"
      },
      "consumes" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "bindingMode" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is auto"
      },
      "skipBindingOnErrorCode" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. This option will override what may be configured on a parent level. The default value is true."
      },
      "tag" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Tag",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To configure a special tag for the operations within this rest definition."
      },
      "openApi" : {
        "index" : 13,
        "kind" : "element",
        "displayName" : "Open Api",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.rest.OpenApiDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use an existing OpenAPI specification as contract-first for Zwangine Rest DSL."
      },
      "securityDefinitions" : {
        "index" : 14,
        "kind" : "element",
        "displayName" : "Security Definitions",
        "group" : "security",
        "label" : "security",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.rest.RestSecuritiesDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the security definitions such as Basic, OAuth2 etc."
      },
      "securityRequirements" : {
        "index" : 15,
        "kind" : "element",
        "displayName" : "Security Requirements",
        "group" : "security",
        "label" : "security",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.rest.SecurityDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the security requirement(s) for all endpoints."
      }
    },
    "propertiesSchema" : {
      "title" : "Rest",
      "description" : "Defines a rest service using the rest-dsl",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "Path of the rest service, such as /foo",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is auto",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. This option will override what may be configured on a parent level. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "tag" : {
          "type" : "string",
          "title" : "Tag",
          "description" : "To configure a special tag for the operations within this rest definition.",
          "$comment" : "group:advanced"
        },
        "openApi" : {
          "title" : "Open Api",
          "description" : "To use an existing OpenAPI specification as contract-first for Zwangine Rest DSL.",
          "$ref" : "#/definitions/org.zenithblox.model.rest.OpenApiDefinition",
          "$comment" : "group:common"
        },
        "securityDefinitions" : {
          "title" : "Security Definitions",
          "description" : "Sets the security definitions such as Basic, OAuth2 etc.",
          "$ref" : "#/definitions/org.zenithblox.model.rest.RestSecuritiesDefinition",
          "$comment" : "group:security"
        },
        "securityRequirements" : {
          "type" : "array",
          "title" : "Security Requirements",
          "description" : "Sets the security requirement(s) for all endpoints.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          },
          "$comment" : "group:security"
        },
        "delete" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.DeleteDefinition"
          }
        },
        "get" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.GetDefinition"
          }
        },
        "head" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.HeadDefinition"
          }
        },
        "patch" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.PatchDefinition"
          }
        },
        "post" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.PostDefinition"
          }
        },
        "put" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.PutDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.DeleteDefinition" : {
          "title" : "Delete",
          "description" : "Rest DELETE command",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "path" : {
              "type" : "string",
              "title" : "Path",
              "description" : "The path mapping URIs of this REST operation such as /{id}.",
              "$comment" : "group:common"
            },
            "to" : {
              "title" : "To",
              "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing workflow that handles this REST call.",
              "$ref" : "#/definitions/org.zenithblox.model.ToDefinition",
              "$comment" : "group:common"
            },
            "consumes" : {
              "type" : "string",
              "title" : "Consumes",
              "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "produces" : {
              "type" : "string",
              "title" : "Produces",
              "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "outType" : {
              "type" : "string",
              "title" : "Out Type",
              "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "bindingMode" : {
              "type" : "string",
              "title" : "Binding Mode",
              "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
              "default" : "off",
              "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
              "$comment" : "group:common"
            },
            "skipBindingOnErrorCode" : {
              "type" : "boolean",
              "title" : "Skip Binding On Error Code",
              "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
              "$comment" : "group:advanced"
            },
            "clientRequestValidation" : {
              "type" : "boolean",
              "title" : "Client Request Validation",
              "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
              "$comment" : "group:advanced"
            },
            "enableCORS" : {
              "type" : "boolean",
              "title" : "Enable CORS",
              "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
              "$comment" : "group:advanced"
            },
            "enableNoContentResponse" : {
              "type" : "boolean",
              "title" : "Enable No Content Response",
              "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
              "$comment" : "group:advanced"
            },
            "apiDocs" : {
              "type" : "boolean",
              "title" : "Api Docs",
              "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "deprecated" : {
              "type" : "boolean",
              "title" : "Deprecated",
              "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this rest operation.",
              "$comment" : "group:advanced"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "param" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
              }
            },
            "responseMessage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
              }
            },
            "security" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
              }
            }
          },
          "required" : [ "to" ]
        },
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        },
        "org.zenithblox.model.ToDefinition" : {
          "title" : "To",
          "description" : "Sends the message to a static endpoint",
          "required" : [ "uri" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the workflow during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "variableSend" : {
              "type" : "string",
              "title" : "Variable Send",
              "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
              "$comment" : "group:common"
            },
            "variableReceive" : {
              "type" : "string",
              "title" : "Variable Receive",
              "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
              "$comment" : "group:common"
            },
            "uri" : {
              "type" : "string",
              "title" : "Uri",
              "description" : "Sets the uri of the endpoint to send to.",
              "$comment" : "group:common"
            },
            "pattern" : {
              "type" : "string",
              "title" : "Pattern",
              "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
              "enum" : [ "InOnly", "InOut" ],
              "$comment" : "group:advanced"
            },
            "parameters" : {
              "type" : "object"
            }
          }
        },
        "org.zenithblox.model.rest.GetDefinition" : {
          "title" : "Get",
          "description" : "Rest GET command",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "path" : {
              "type" : "string",
              "title" : "Path",
              "description" : "The path mapping URIs of this REST operation such as /{id}.",
              "$comment" : "group:common"
            },
            "to" : {
              "title" : "To",
              "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing workflow that handles this REST call.",
              "$ref" : "#/definitions/org.zenithblox.model.ToDefinition",
              "$comment" : "group:common"
            },
            "consumes" : {
              "type" : "string",
              "title" : "Consumes",
              "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "produces" : {
              "type" : "string",
              "title" : "Produces",
              "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "outType" : {
              "type" : "string",
              "title" : "Out Type",
              "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "bindingMode" : {
              "type" : "string",
              "title" : "Binding Mode",
              "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
              "default" : "off",
              "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
              "$comment" : "group:common"
            },
            "skipBindingOnErrorCode" : {
              "type" : "boolean",
              "title" : "Skip Binding On Error Code",
              "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
              "$comment" : "group:advanced"
            },
            "clientRequestValidation" : {
              "type" : "boolean",
              "title" : "Client Request Validation",
              "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
              "$comment" : "group:advanced"
            },
            "enableCORS" : {
              "type" : "boolean",
              "title" : "Enable CORS",
              "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
              "$comment" : "group:advanced"
            },
            "enableNoContentResponse" : {
              "type" : "boolean",
              "title" : "Enable No Content Response",
              "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
              "$comment" : "group:advanced"
            },
            "apiDocs" : {
              "type" : "boolean",
              "title" : "Api Docs",
              "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "deprecated" : {
              "type" : "boolean",
              "title" : "Deprecated",
              "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this rest operation.",
              "$comment" : "group:advanced"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "param" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
              }
            },
            "responseMessage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
              }
            },
            "security" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
              }
            }
          },
          "required" : [ "to" ]
        },
        "org.zenithblox.model.rest.HeadDefinition" : {
          "title" : "Head",
          "description" : "Rest HEAD command",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "path" : {
              "type" : "string",
              "title" : "Path",
              "description" : "The path mapping URIs of this REST operation such as /{id}.",
              "$comment" : "group:common"
            },
            "to" : {
              "title" : "To",
              "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing workflow that handles this REST call.",
              "$ref" : "#/definitions/org.zenithblox.model.ToDefinition",
              "$comment" : "group:common"
            },
            "consumes" : {
              "type" : "string",
              "title" : "Consumes",
              "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "produces" : {
              "type" : "string",
              "title" : "Produces",
              "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "outType" : {
              "type" : "string",
              "title" : "Out Type",
              "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "bindingMode" : {
              "type" : "string",
              "title" : "Binding Mode",
              "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
              "default" : "off",
              "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
              "$comment" : "group:common"
            },
            "skipBindingOnErrorCode" : {
              "type" : "boolean",
              "title" : "Skip Binding On Error Code",
              "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
              "$comment" : "group:advanced"
            },
            "clientRequestValidation" : {
              "type" : "boolean",
              "title" : "Client Request Validation",
              "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
              "$comment" : "group:advanced"
            },
            "enableCORS" : {
              "type" : "boolean",
              "title" : "Enable CORS",
              "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
              "$comment" : "group:advanced"
            },
            "enableNoContentResponse" : {
              "type" : "boolean",
              "title" : "Enable No Content Response",
              "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
              "$comment" : "group:advanced"
            },
            "apiDocs" : {
              "type" : "boolean",
              "title" : "Api Docs",
              "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "deprecated" : {
              "type" : "boolean",
              "title" : "Deprecated",
              "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this rest operation.",
              "$comment" : "group:advanced"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "param" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
              }
            },
            "responseMessage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
              }
            },
            "security" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
              }
            }
          },
          "required" : [ "to" ]
        },
        "org.zenithblox.model.rest.OpenApiDefinition" : {
          "title" : "Open Api",
          "description" : "To use OpenApi as contract-first with Zwangine Rest DSL.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable all the REST services from the OpenAPI contract from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "specification" : {
              "type" : "string",
              "title" : "Specification",
              "description" : "Path to the OpenApi specification file.",
              "$comment" : "group:common"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "missingOperation" : {
              "type" : "string",
              "title" : "Missing Operation",
              "description" : "Whether to fail, ignore or return a mock response for OpenAPI operations that are not mapped to a corresponding workflow.",
              "default" : "fail",
              "enum" : [ "fail", "ignore", "mock" ],
              "$comment" : "group:common"
            },
            "mockIncludePattern" : {
              "type" : "string",
              "title" : "Mock Include Pattern",
              "description" : "Used for inclusive filtering of mock data from directories. The pattern is using Ant-path style pattern. Multiple patterns can be specified separated by comma.",
              "default" : "classpath:camel-mock/**",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "specification" ]
        },
        "org.zenithblox.model.rest.PatchDefinition" : {
          "title" : "Patch",
          "description" : "Rest PATCH command",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "path" : {
              "type" : "string",
              "title" : "Path",
              "description" : "The path mapping URIs of this REST operation such as /{id}.",
              "$comment" : "group:common"
            },
            "to" : {
              "title" : "To",
              "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing workflow that handles this REST call.",
              "$ref" : "#/definitions/org.zenithblox.model.ToDefinition",
              "$comment" : "group:common"
            },
            "consumes" : {
              "type" : "string",
              "title" : "Consumes",
              "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "produces" : {
              "type" : "string",
              "title" : "Produces",
              "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "outType" : {
              "type" : "string",
              "title" : "Out Type",
              "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "bindingMode" : {
              "type" : "string",
              "title" : "Binding Mode",
              "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
              "default" : "off",
              "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
              "$comment" : "group:common"
            },
            "skipBindingOnErrorCode" : {
              "type" : "boolean",
              "title" : "Skip Binding On Error Code",
              "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
              "$comment" : "group:advanced"
            },
            "clientRequestValidation" : {
              "type" : "boolean",
              "title" : "Client Request Validation",
              "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
              "$comment" : "group:advanced"
            },
            "enableCORS" : {
              "type" : "boolean",
              "title" : "Enable CORS",
              "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
              "$comment" : "group:advanced"
            },
            "enableNoContentResponse" : {
              "type" : "boolean",
              "title" : "Enable No Content Response",
              "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
              "$comment" : "group:advanced"
            },
            "apiDocs" : {
              "type" : "boolean",
              "title" : "Api Docs",
              "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "deprecated" : {
              "type" : "boolean",
              "title" : "Deprecated",
              "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this rest operation.",
              "$comment" : "group:advanced"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "param" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
              }
            },
            "responseMessage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
              }
            },
            "security" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
              }
            }
          },
          "required" : [ "to" ]
        },
        "org.zenithblox.model.rest.PostDefinition" : {
          "title" : "Post",
          "description" : "Rest POST command",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "path" : {
              "type" : "string",
              "title" : "Path",
              "description" : "The path mapping URIs of this REST operation such as /{id}.",
              "$comment" : "group:common"
            },
            "to" : {
              "title" : "To",
              "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing workflow that handles this REST call.",
              "$ref" : "#/definitions/org.zenithblox.model.ToDefinition",
              "$comment" : "group:common"
            },
            "consumes" : {
              "type" : "string",
              "title" : "Consumes",
              "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "produces" : {
              "type" : "string",
              "title" : "Produces",
              "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "outType" : {
              "type" : "string",
              "title" : "Out Type",
              "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "bindingMode" : {
              "type" : "string",
              "title" : "Binding Mode",
              "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
              "default" : "off",
              "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
              "$comment" : "group:common"
            },
            "skipBindingOnErrorCode" : {
              "type" : "boolean",
              "title" : "Skip Binding On Error Code",
              "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
              "$comment" : "group:advanced"
            },
            "clientRequestValidation" : {
              "type" : "boolean",
              "title" : "Client Request Validation",
              "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
              "$comment" : "group:advanced"
            },
            "enableCORS" : {
              "type" : "boolean",
              "title" : "Enable CORS",
              "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
              "$comment" : "group:advanced"
            },
            "enableNoContentResponse" : {
              "type" : "boolean",
              "title" : "Enable No Content Response",
              "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
              "$comment" : "group:advanced"
            },
            "apiDocs" : {
              "type" : "boolean",
              "title" : "Api Docs",
              "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "deprecated" : {
              "type" : "boolean",
              "title" : "Deprecated",
              "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this rest operation.",
              "$comment" : "group:advanced"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "param" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
              }
            },
            "responseMessage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
              }
            },
            "security" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
              }
            }
          },
          "required" : [ "to" ]
        },
        "org.zenithblox.model.rest.PutDefinition" : {
          "title" : "Put",
          "description" : "Rest PUT command",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this REST service from the workflow during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "path" : {
              "type" : "string",
              "title" : "Path",
              "description" : "The path mapping URIs of this REST operation such as /{id}.",
              "$comment" : "group:common"
            },
            "to" : {
              "title" : "To",
              "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing workflow that handles this REST call.",
              "$ref" : "#/definitions/org.zenithblox.model.ToDefinition",
              "$comment" : "group:common"
            },
            "consumes" : {
              "type" : "string",
              "title" : "Consumes",
              "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "produces" : {
              "type" : "string",
              "title" : "Produces",
              "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "outType" : {
              "type" : "string",
              "title" : "Out Type",
              "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
              "$comment" : "group:advanced"
            },
            "bindingMode" : {
              "type" : "string",
              "title" : "Binding Mode",
              "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
              "default" : "off",
              "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
              "$comment" : "group:common"
            },
            "skipBindingOnErrorCode" : {
              "type" : "boolean",
              "title" : "Skip Binding On Error Code",
              "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
              "$comment" : "group:advanced"
            },
            "clientRequestValidation" : {
              "type" : "boolean",
              "title" : "Client Request Validation",
              "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
              "$comment" : "group:advanced"
            },
            "enableCORS" : {
              "type" : "boolean",
              "title" : "Enable CORS",
              "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
              "$comment" : "group:advanced"
            },
            "enableNoContentResponse" : {
              "type" : "boolean",
              "title" : "Enable No Content Response",
              "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
              "$comment" : "group:advanced"
            },
            "apiDocs" : {
              "type" : "boolean",
              "title" : "Api Docs",
              "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "deprecated" : {
              "type" : "boolean",
              "title" : "Deprecated",
              "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
              "$comment" : "group:advanced"
            },
            "streamCache" : {
              "type" : "boolean",
              "title" : "Stream Cache",
              "description" : "Whether stream caching is enabled on this rest operation.",
              "$comment" : "group:advanced"
            },
            "workflowId" : {
              "type" : "string",
              "title" : "Workflow Id",
              "description" : "Sets the id of the workflow",
              "$comment" : "group:common"
            },
            "param" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
              }
            },
            "responseMessage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
              }
            },
            "security" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
              }
            }
          },
          "required" : [ "to" ]
        },
        "org.zenithblox.model.rest.RestSecuritiesDefinition" : {
          "title" : "Rest Security Definitions",
          "description" : "To configure rest security definitions.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "apiKey" : {
              "$ref" : "#/definitions/org.zenithblox.model.rest.ApiKeyDefinition"
            },
            "basicAuth" : {
              "$ref" : "#/definitions/org.zenithblox.model.rest.BasicAuthDefinition"
            },
            "bearer" : {
              "$ref" : "#/definitions/org.zenithblox.model.rest.BearerTokenDefinition"
            },
            "mutualTLS" : {
              "$ref" : "#/definitions/org.zenithblox.model.rest.MutualTLSDefinition"
            },
            "oauth2" : {
              "$ref" : "#/definitions/org.zenithblox.model.rest.OAuth2Definition"
            },
            "openIdConnect" : {
              "$ref" : "#/definitions/org.zenithblox.model.rest.OpenIdConnectDefinition"
            }
          }
        },
        "org.zenithblox.model.rest.ApiKeyDefinition" : {
          "title" : "Api Key",
          "description" : "Rest security basic auth definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "A short description for security scheme.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "The name of the header or query parameter to be used.",
              "$comment" : "group:common"
            },
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "inHeader" : {
              "type" : "boolean",
              "title" : "In Header",
              "description" : "To use header as the location of the API key.",
              "$comment" : "group:common"
            },
            "inQuery" : {
              "type" : "boolean",
              "title" : "In Query",
              "description" : "To use query parameter as the location of the API key.",
              "$comment" : "group:common"
            },
            "inCookie" : {
              "type" : "boolean",
              "title" : "In Cookie",
              "description" : "To use a cookie as the location of the API key.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "name" ]
        },
        "org.zenithblox.model.rest.BasicAuthDefinition" : {
          "title" : "Basic Auth",
          "description" : "Rest security basic auth definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "A short description for security scheme.",
              "$comment" : "group:common"
            },
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        },
        "org.zenithblox.model.rest.BearerTokenDefinition" : {
          "title" : "Bearer Token",
          "description" : "Rest security bearer token authentication definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "A short description for security scheme.",
              "$comment" : "group:common"
            },
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "format" : {
              "type" : "string",
              "title" : "Format",
              "description" : "A hint to the client to identify how the bearer token is formatted.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        },
        "org.zenithblox.model.rest.MutualTLSDefinition" : {
          "title" : "Mutual TLS",
          "description" : "Rest security mutual TLS authentication definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "A short description for security scheme.",
              "$comment" : "group:common"
            },
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        },
        "org.zenithblox.model.rest.OAuth2Definition" : {
          "title" : "Oauth2",
          "description" : "Rest security OAuth2 definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "A short description for security scheme.",
              "$comment" : "group:common"
            },
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "authorizationUrl" : {
              "type" : "string",
              "title" : "Authorization Url",
              "description" : "The authorization URL to be used for this flow. This SHOULD be in the form of a URL. Required for implicit and access code flows",
              "$comment" : "group:common"
            },
            "tokenUrl" : {
              "type" : "string",
              "title" : "Token Url",
              "description" : "The token URL to be used for this flow. This SHOULD be in the form of a URL. Required for password, application, and access code flows.",
              "$comment" : "group:common"
            },
            "refreshUrl" : {
              "type" : "string",
              "title" : "Refresh Url",
              "description" : "The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.",
              "$comment" : "group:common"
            },
            "flow" : {
              "type" : "string",
              "title" : "Flow",
              "description" : "The flow used by the OAuth2 security scheme. Valid values are implicit, password, application or accessCode.",
              "enum" : [ "implicit", "password", "application", "clientCredentials", "accessCode", "authorizationCode" ],
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "array",
              "title" : "Scopes",
              "description" : "The available scopes for an OAuth2 security scheme",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        },
        "org.zenithblox.model.rest.OpenIdConnectDefinition" : {
          "title" : "Open Id Connect",
          "description" : "Rest security OpenID Connect definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "A short description for security scheme.",
              "$comment" : "group:common"
            },
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "url" : {
              "type" : "string",
              "title" : "Url",
              "description" : "OpenId Connect URL to discover OAuth2 configuration values.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "url" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "ObjectMeta" : {
    "propertiesSchema" : {
      "description" : "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties" : {
        "annotations" : {
          "additionalProperties" : {
            "default" : "",
            "type" : "string"
          },
          "description" : "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type" : "object"
        },
        "creationTimestamp" : {
          "allOf" : [ {
            "$ref" : "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          } ],
          "description" : "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds" : {
          "description" : "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format" : "int64",
          "type" : "integer"
        },
        "deletionTimestamp" : {
          "allOf" : [ {
            "$ref" : "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          } ],
          "description" : "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers" : {
          "description" : "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items" : {
            "default" : "",
            "type" : "string"
          },
          "type" : "array"
        },
        "generateName" : {
          "description" : "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type" : "string"
        },
        "generation" : {
          "description" : "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format" : "int64",
          "type" : "integer"
        },
        "labels" : {
          "additionalProperties" : {
            "default" : "",
            "type" : "string"
          },
          "description" : "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type" : "object"
        },
        "managedFields" : {
          "description" : "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items" : {
            "allOf" : [ {
              "$ref" : "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
            } ],
            "default" : { }
          },
          "type" : "array"
        },
        "name" : {
          "description" : "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type" : "string"
        },
        "namespace" : {
          "description" : "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type" : "string"
        },
        "ownerReferences" : {
          "description" : "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items" : {
            "allOf" : [ {
              "$ref" : "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
            } ],
            "default" : { }
          },
          "type" : "array"
        },
        "resourceVersion" : {
          "description" : "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type" : "string"
        },
        "selfLink" : {
          "description" : "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type" : "string"
        },
        "uid" : {
          "description" : "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type" : "string"
        }
      },
      "type" : "object",
      "definitions" : {
        "io.k8s.apimachinery.pkg.apis.meta.v1.Time" : {
          "description" : "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "format" : "date-time",
          "type" : "string"
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry" : {
          "description" : "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
              "type" : "string"
            },
            "fieldsType" : {
              "description" : "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
              "type" : "string"
            },
            "fieldsV1" : {
              "allOf" : [ {
                "$ref" : "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
              } ],
              "description" : "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
            },
            "manager" : {
              "description" : "Manager is an identifier of the workflow managing these fields.",
              "type" : "string"
            },
            "operation" : {
              "description" : "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
              "type" : "string"
            },
            "subresource" : {
              "description" : "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
              "type" : "string"
            },
            "time" : {
              "allOf" : [ {
                "$ref" : "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
              } ],
              "description" : "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
            }
          },
          "type" : "object"
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference" : {
          "description" : "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
          "properties" : {
            "apiVersion" : {
              "default" : "",
              "description" : "API version of the referent.",
              "type" : "string"
            },
            "blockOwnerDeletion" : {
              "description" : "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
              "type" : "boolean"
            },
            "controller" : {
              "description" : "If true, this reference points to the managing controller.",
              "type" : "boolean"
            },
            "kind" : {
              "default" : "",
              "description" : "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "name" : {
              "default" : "",
              "description" : "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
              "type" : "string"
            },
            "uid" : {
              "default" : "",
              "description" : "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
              "type" : "string"
            }
          },
          "required" : [ "apiVersion", "kind", "name", "uid" ],
          "type" : "object"
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1" : {
          "description" : "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
          "type" : "object"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  }
}