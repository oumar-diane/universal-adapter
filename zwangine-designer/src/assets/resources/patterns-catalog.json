{
  "aggregate" : {
    "model" : {
      "kind" : "model",
      "name" : "aggregate",
      "title" : "Aggregate",
      "description" : "Aggregates many messages into a single message",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.AggregateDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "correlationExpression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Correlation Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The expression used to calculate the correlation key to use for aggregation. The Exchange which has the same correlation key is aggregated together. If the correlation key could not be evaluated an Exception is thrown. You can disable this by using the ignoreBadCorrelationKeys option."
      },
      "completionPredicate" : {
        "index" : 4,
        "kind" : "expression",
        "displayName" : "Completion Predicate",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "A Predicate to indicate when an aggregated exchange is complete. If this is not specified and the AggregationStrategy object implements Predicate, the aggregationStrategy object will be used as the completionPredicate."
      },
      "completionTimeoutExpression" : {
        "index" : 5,
        "kind" : "expression",
        "displayName" : "Completion Timeout Expression",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Time in millis that an aggregated exchange should be inactive before its complete (timeout). This option can be set as either a fixed value or using an Expression which allows you to evaluate a timeout dynamically - will use Long as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0. You cannot use this option together with completionInterval, only one of the two can be used. By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option to configure how frequently to run the checker. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals."
      },
      "completionSizeExpression" : {
        "index" : 6,
        "kind" : "expression",
        "displayName" : "Completion Size Expression",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Number of messages aggregated before the aggregation is complete. This option can be set as either a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0."
      },
      "optimisticLockRetryPolicy" : {
        "index" : 7,
        "kind" : "element",
        "displayName" : "Optimistic Lock Retry Policy",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.OptimisticLockRetryPolicyDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to configure retry settings when using optimistic locking."
      },
      "parallelProcessing" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Parallel Processing",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "When aggregated are completed they are being send out of the aggregator. This option indicates whether or not Zwangine should use a thread pool with multiple threads for concurrency. If no custom thread pool has been specified then Zwangine creates a default pool with 10 concurrent threads."
      },
      "optimisticLocking" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Optimistic Locking",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Turns on using optimistic locking, which requires the aggregationRepository being used, is supporting this by implementing org.zenithblox.spi.OptimisticLockingAggregationRepository ."
      },
      "executorService" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If using parallelProcessing you can specify a custom thread pool to be used. In fact also if you are not using parallelProcessing this custom thread pool is used to send out aggregated exchanges as well."
      },
      "timeoutCheckerExecutorService" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Timeout Checker Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ScheduledExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If using either of the completionTimeout, completionTimeoutExpression, or completionInterval options a background thread is created to check for the completion for every aggregator. Set this option to provide a custom thread pool to be used rather than creating a new thread for every aggregator."
      },
      "aggregateController" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Aggregate Controller",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.processor.aggregate.AggregateController",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a org.zenithblox.processor.aggregate.AggregateController to allow external sources to control this aggregator."
      },
      "aggregationRepository" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Aggregation Repository",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.spi.AggregationRepository",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The AggregationRepository to use. Sets the custom aggregate repository to use. Will by default use org.zenithblox.processor.aggregate.MemoryAggregationRepository"
      },
      "aggregationStrategy" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The AggregationStrategy to use. For example to lookup a bean with the name foo, the value is simply just #bean:foo. Configuring an AggregationStrategy is required, and is used to merge the incoming Exchange with the existing already merged exchanges. At first call the oldExchange parameter is null. On subsequent invocations the oldExchange contains the merged exchanges and newExchange is of course the new incoming Exchange."
      },
      "aggregationStrategyMethodName" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using beans as the AggregationStrategy."
      },
      "aggregationStrategyMethodAllowNull" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Allow Null",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If this option is false then the aggregate method is not used for the very first aggregation. If this option is true then null values is used as the oldExchange (at the very first aggregation), when using beans as the AggregationStrategy."
      },
      "completionSize" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Completion Size",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Number of messages aggregated before the aggregation is complete. This option can be set as either a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0."
      },
      "completionInterval" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Completion Interval",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A repeating period in millis by which the aggregator will complete all current aggregated exchanges. Zwangine has a background task which is triggered every period. You cannot use this option together with completionTimeout, only one of them can be used."
      },
      "completionTimeout" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Completion Timeout",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Time in millis that an aggregated exchange should be inactive before its complete (timeout). This option can be set as either a fixed value or using an Expression which allows you to evaluate a timeout dynamically - will use Long as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0. You cannot use this option together with completionInterval, only one of the two can be used. By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option to configure how frequently to run the checker. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals."
      },
      "completionTimeoutCheckerInterval" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Completion Timeout Checker Interval",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "1000",
        "description" : "Interval in millis that is used by the background task that checks for timeouts ( org.zenithblox.TimeoutMap ). By default the timeout checker runs every second. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals."
      },
      "completionFromBatchConsumer" : {
        "index" : 21,
        "kind" : "attribute",
        "displayName" : "Completion From Batch Consumer",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Enables the batch completion mode where we aggregate from a org.zenithblox.BatchConsumer and aggregate the total number of exchanges the org.zenithblox.BatchConsumer has reported as total by checking the exchange property org.zenithblox.Exchange#BATCH_COMPLETE when its complete. This option cannot be used together with discardOnAggregationFailure."
      },
      "completionOnNewCorrelationGroup" : {
        "index" : 22,
        "kind" : "attribute",
        "displayName" : "Completion On New Correlation Group",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Enables completion on all previous groups when a new incoming correlation group. This can for example be used to complete groups with same correlation keys when they are in consecutive order. Notice when this is enabled then only 1 correlation group can be in progress as when a new correlation group starts, then the previous groups is forced completed."
      },
      "eagerCheckCompletion" : {
        "index" : 23,
        "kind" : "attribute",
        "displayName" : "Eager Check Completion",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Use eager completion checking which means that the completionPredicate will use the incoming Exchange. As opposed to without eager completion checking the completionPredicate will use the aggregated Exchange."
      },
      "ignoreInvalidCorrelationKeys" : {
        "index" : 24,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Correlation Keys",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If a correlation key cannot be successfully evaluated it will be ignored by logging a DEBUG and then just ignore the incoming Exchange."
      },
      "closeCorrelationKeyOnCompletion" : {
        "index" : 25,
        "kind" : "attribute",
        "displayName" : "Close Correlation Key On Completion",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Closes a correlation key when its complete. Any late received exchanges which has a correlation key that has been closed, it will be defined and a ClosedCorrelationKeyException is thrown."
      },
      "discardOnCompletionTimeout" : {
        "index" : 26,
        "kind" : "attribute",
        "displayName" : "Discard On Completion Timeout",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Discards the aggregated message on completion timeout. This means on timeout the aggregated message is dropped and not sent out of the aggregator."
      },
      "discardOnAggregationFailure" : {
        "index" : 27,
        "kind" : "attribute",
        "displayName" : "Discard On Aggregation Failure",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Discards the aggregated message when aggregation failed (an exception was thrown from AggregationStrategy . This means the partly aggregated message is dropped and not sent out of the aggregator. This option cannot be used together with completionFromBatchConsumer."
      },
      "forceCompletionOnStop" : {
        "index" : 28,
        "kind" : "attribute",
        "displayName" : "Force Completion On Stop",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Indicates to complete all current aggregated exchanges when the context is stopped"
      },
      "completeAllOnStop" : {
        "index" : 29,
        "kind" : "attribute",
        "displayName" : "Complete All On Stop",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Indicates to wait to complete all current and partial (pending) aggregated exchanges when the context is stopped. This also means that we will wait for all pending exchanges which are stored in the aggregation repository to complete so the repository is empty before we can stop. You may want to enable this when using the memory based aggregation repository that is memory based only, and do not store data on disk. When this option is enabled, then the aggregator is waiting to complete all those exchanges before its stopped, when stopping ZwangineContext or the route using it."
      },
      "outputs" : {
        "index" : 30,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineAggregatedSize" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregated Size",
        "label" : "producer",
        "required" : false,
        "javaType" : "int",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Number of exchanges that was grouped together."
      },
      "ZwangineAggregatedTimeout" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregated Timeout",
        "label" : "producer",
        "required" : false,
        "javaType" : "long",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The time in millis this group will timeout"
      },
      "ZwangineAggregatedCompletedBy" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregated Completed By",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Enum that tell how this group was completed"
      },
      "ZwangineAggregatedCorrelationKey" : {
        "index" : 3,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregated Correlation Key",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The correlation key for this aggregation group"
      },
      "ZwangineAggregationCompleteCurrentGroup" : {
        "index" : 4,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregation Complete Current Group",
        "label" : "consumer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Input property. Set to true to force completing the current group. This allows to overrule any existing completion predicates, sizes, timeouts etc, and complete the group."
      },
      "ZwangineAggregationCompleteAllGroups" : {
        "index" : 5,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregation Complete All Groups",
        "label" : "consumer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Input property. Set to true to force completing all the groups (excluding this message). This allows to overrule any existing completion predicates, sizes, timeouts etc, and complete the group. This message is considered a signal message only, the message headers/contents will not be processed otherwise. Instead use ZwangineAggregationCompleteAllGroupsInclusive if this message should be included in the aggregator."
      },
      "ZwangineAggregationCompleteAllGroupsInclusive" : {
        "index" : 6,
        "kind" : "exchangeProperty",
        "displayName" : "Aggregation Complete All Groups Inclusive",
        "label" : "consumer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Input property. Set to true to force completing all the groups (including this message). This allows to overrule any existing completion predicates, sizes, timeouts etc, and complete the group."
      }
    },
    "propertiesSchema" : {
      "title" : "Aggregate",
      "description" : "Aggregates many messages into a single message",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "correlationExpression" : {
          "title" : "Correlation Expression",
          "description" : "The expression used to calculate the correlation key to use for aggregation. The Exchange which has the same correlation key is aggregated together. If the correlation key could not be evaluated an Exception is thrown. You can disable this by using the ignoreBadCorrelationKeys option.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:common",
          "format" : "expressionProperty"
        },
        "completionPredicate" : {
          "title" : "Completion Predicate",
          "description" : "A Predicate to indicate when an aggregated exchange is complete. If this is not specified and the AggregationStrategy object implements Predicate, the aggregationStrategy object will be used as the completionPredicate.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:advanced",
          "format" : "expressionProperty"
        },
        "completionTimeoutExpression" : {
          "title" : "Completion Timeout Expression",
          "description" : "Time in millis that an aggregated exchange should be inactive before its complete (timeout). This option can be set as either a fixed value or using an Expression which allows you to evaluate a timeout dynamically - will use Long as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0. You cannot use this option together with completionInterval, only one of the two can be used. By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option to configure how frequently to run the checker. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:advanced",
          "format" : "expressionProperty"
        },
        "completionSizeExpression" : {
          "title" : "Completion Size Expression",
          "description" : "Number of messages aggregated before the aggregation is complete. This option can be set as either a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:advanced",
          "format" : "expressionProperty"
        },
        "optimisticLockRetryPolicy" : {
          "title" : "Optimistic Lock Retry Policy",
          "description" : "Allows to configure retry settings when using optimistic locking.",
          "$ref" : "#/definitions/org.zenithblox.model.OptimisticLockRetryPolicyDefinition",
          "$comment" : "group:advanced"
        },
        "parallelProcessing" : {
          "type" : "boolean",
          "title" : "Parallel Processing",
          "description" : "When aggregated are completed they are being send out of the aggregator. This option indicates whether or not Zwangine should use a thread pool with multiple threads for concurrency. If no custom thread pool has been specified then Zwangine creates a default pool with 10 concurrent threads.",
          "$comment" : "group:common"
        },
        "optimisticLocking" : {
          "type" : "boolean",
          "title" : "Optimistic Locking",
          "description" : "Turns on using optimistic locking, which requires the aggregationRepository being used, is supporting this by implementing org.zenithblox.spi.OptimisticLockingAggregationRepository .",
          "$comment" : "group:common"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "If using parallelProcessing you can specify a custom thread pool to be used. In fact also if you are not using parallelProcessing this custom thread pool is used to send out aggregated exchanges as well.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "timeoutCheckerExecutorService" : {
          "type" : "string",
          "title" : "Timeout Checker Executor Service",
          "description" : "If using either of the completionTimeout, completionTimeoutExpression, or completionInterval options a background thread is created to check for the completion for every aggregator. Set this option to provide a custom thread pool to be used rather than creating a new thread for every aggregator.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ScheduledExecutorService"
        },
        "aggregateController" : {
          "type" : "string",
          "title" : "Aggregate Controller",
          "description" : "To use a org.zenithblox.processor.aggregate.AggregateController to allow external sources to control this aggregator.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.processor.aggregate.AggregateController"
        },
        "aggregationRepository" : {
          "type" : "string",
          "title" : "Aggregation Repository",
          "description" : "The AggregationRepository to use. Sets the custom aggregate repository to use. Will by default use org.zenithblox.processor.aggregate.MemoryAggregationRepository",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.spi.AggregationRepository"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "The AggregationStrategy to use. For example to lookup a bean with the name foo, the value is simply just #bean:foo. Configuring an AggregationStrategy is required, and is used to merge the incoming Exchange with the existing already merged exchanges. At first call the oldExchange parameter is null. On subsequent invocations the oldExchange contains the merged exchanges and newExchange is of course the new incoming Exchange.",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using beans as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategyMethodAllowNull" : {
          "type" : "boolean",
          "title" : "Aggregation Strategy Method Allow Null",
          "description" : "If this option is false then the aggregate method is not used for the very first aggregation. If this option is true then null values is used as the oldExchange (at the very first aggregation), when using beans as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "completionSize" : {
          "type" : "number",
          "title" : "Completion Size",
          "description" : "Number of messages aggregated before the aggregation is complete. This option can be set as either a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0.",
          "$comment" : "group:common"
        },
        "completionInterval" : {
          "type" : "string",
          "title" : "Completion Interval",
          "description" : "A repeating period in millis by which the aggregator will complete all current aggregated exchanges. Zwangine has a background task which is triggered every period. You cannot use this option together with completionTimeout, only one of them can be used.",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "completionTimeout" : {
          "type" : "string",
          "title" : "Completion Timeout",
          "description" : "Time in millis that an aggregated exchange should be inactive before its complete (timeout). This option can be set as either a fixed value or using an Expression which allows you to evaluate a timeout dynamically - will use Long as result. If both are set Zwangine will fallback to use the fixed value if the Expression result was null or 0. You cannot use this option together with completionInterval, only one of the two can be used. By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option to configure how frequently to run the checker. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals.",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "completionTimeoutCheckerInterval" : {
          "type" : "string",
          "title" : "Completion Timeout Checker Interval",
          "description" : "Interval in millis that is used by the background task that checks for timeouts ( org.zenithblox.TimeoutMap ). By default the timeout checker runs every second. The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value. It is not recommended to use very low timeout values or checker intervals.",
          "default" : "1000",
          "$comment" : "group:advanced",
          "format" : "duration"
        },
        "completionFromBatchConsumer" : {
          "type" : "boolean",
          "title" : "Completion From Batch Consumer",
          "description" : "Enables the batch completion mode where we aggregate from a org.zenithblox.BatchConsumer and aggregate the total number of exchanges the org.zenithblox.BatchConsumer has reported as total by checking the exchange property org.zenithblox.Exchange#BATCH_COMPLETE when its complete. This option cannot be used together with discardOnAggregationFailure.",
          "$comment" : "group:advanced"
        },
        "completionOnNewCorrelationGroup" : {
          "type" : "boolean",
          "title" : "Completion On New Correlation Group",
          "description" : "Enables completion on all previous groups when a new incoming correlation group. This can for example be used to complete groups with same correlation keys when they are in consecutive order. Notice when this is enabled then only 1 correlation group can be in progress as when a new correlation group starts, then the previous groups is forced completed.",
          "$comment" : "group:advanced"
        },
        "eagerCheckCompletion" : {
          "type" : "boolean",
          "title" : "Eager Check Completion",
          "description" : "Use eager completion checking which means that the completionPredicate will use the incoming Exchange. As opposed to without eager completion checking the completionPredicate will use the aggregated Exchange.",
          "$comment" : "group:common"
        },
        "ignoreInvalidCorrelationKeys" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Correlation Keys",
          "description" : "If a correlation key cannot be successfully evaluated it will be ignored by logging a DEBUG and then just ignore the incoming Exchange.",
          "$comment" : "group:advanced"
        },
        "closeCorrelationKeyOnCompletion" : {
          "type" : "number",
          "title" : "Close Correlation Key On Completion",
          "description" : "Closes a correlation key when its complete. Any late received exchanges which has a correlation key that has been closed, it will be defined and a ClosedCorrelationKeyException is thrown.",
          "$comment" : "group:advanced"
        },
        "discardOnCompletionTimeout" : {
          "type" : "boolean",
          "title" : "Discard On Completion Timeout",
          "description" : "Discards the aggregated message on completion timeout. This means on timeout the aggregated message is dropped and not sent out of the aggregator.",
          "$comment" : "group:advanced"
        },
        "discardOnAggregationFailure" : {
          "type" : "boolean",
          "title" : "Discard On Aggregation Failure",
          "description" : "Discards the aggregated message when aggregation failed (an exception was thrown from AggregationStrategy . This means the partly aggregated message is dropped and not sent out of the aggregator. This option cannot be used together with completionFromBatchConsumer.",
          "$comment" : "group:advanced"
        },
        "forceCompletionOnStop" : {
          "type" : "boolean",
          "title" : "Force Completion On Stop",
          "description" : "Indicates to complete all current aggregated exchanges when the context is stopped",
          "$comment" : "group:advanced"
        },
        "completeAllOnStop" : {
          "type" : "boolean",
          "title" : "Complete All On Stop",
          "description" : "Indicates to wait to complete all current and partial (pending) aggregated exchanges when the context is stopped. This also means that we will wait for all pending exchanges which are stored in the aggregation repository to complete so the repository is empty before we can stop. You may want to enable this when using the memory based aggregation repository that is memory based only, and do not store data on disk. When this option is enabled, then the aggregator is waiting to complete all those exchanges before its stopped, when stopping ZwangineContext or the route using it.",
          "$comment" : "group:advanced"
        }
      },
      "required" : [ "aggregationStrategy", "correlationExpression" ],
      "definitions" : {
        "org.zenithblox.model.ExpressionSubElementDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.OptimisticLockRetryPolicyDefinition" : {
          "title" : "Optimistic Lock Retry Policy",
          "description" : "To configure optimistic locking",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "maximumRetries" : {
              "type" : "number",
              "title" : "Maximum Retries",
              "description" : "Sets the maximum number of retries",
              "$comment" : "group:common"
            },
            "retryDelay" : {
              "type" : "string",
              "title" : "Retry Delay",
              "description" : "Sets the delay in millis between retries",
              "default" : "50",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "maximumRetryDelay" : {
              "type" : "string",
              "title" : "Maximum Retry Delay",
              "description" : "Sets the upper value of retry in millis between retries, when using exponential or random backoff",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "exponentialBackOff" : {
              "type" : "boolean",
              "title" : "Exponential Back Off",
              "description" : "Enable exponential backoff",
              "$comment" : "group:advanced",
              "default" : true
            },
            "randomBackOff" : {
              "type" : "boolean",
              "title" : "Random Back Off",
              "description" : "Enables random backoff",
              "$comment" : "group:advanced"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "bean" : {
    "model" : {
      "kind" : "model",
      "name" : "bean",
      "title" : "Bean",
      "description" : "Calls a Java bean",
      "deprecated" : false,
      "label" : "eip,endpoint",
      "javaType" : "org.zenithblox.model.BeanDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "ref" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to an existing bean to use, which is looked up from the registry"
      },
      "method" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Method",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the method name on the bean to use"
      },
      "beanType" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Bean Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name (fully qualified) of the bean to use"
      },
      "scope" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Scope",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "Singleton", "Request", "Prototype" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "Singleton",
        "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation."
      }
    },
    "propertiesSchema" : {
      "title" : "Bean",
      "description" : "Calls a Java bean",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "ref" : {
          "type" : "string",
          "title" : "Ref",
          "description" : "Sets a reference to an existing bean to use, which is looked up from the registry",
          "$comment" : "group:common"
        },
        "method" : {
          "type" : "string",
          "title" : "Method",
          "description" : "Sets the method name on the bean to use",
          "$comment" : "group:common"
        },
        "beanType" : {
          "type" : "string",
          "title" : "Bean Type",
          "description" : "Sets the class name (fully qualified) of the bean to use",
          "$comment" : "group:common"
        },
        "scope" : {
          "type" : "string",
          "title" : "Scope",
          "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
          "default" : "Singleton",
          "enum" : [ "Singleton", "Request", "Prototype" ],
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "doCatch" : {
    "model" : {
      "kind" : "model",
      "name" : "doCatch",
      "title" : "Do Catch",
      "description" : "Catches exceptions as part of a try, catch, finally block",
      "deprecated" : false,
      "label" : "error",
      "javaType" : "org.zenithblox.model.CatchDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "exception" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Exception",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<java.lang.String>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The exception(s) to catch."
      },
      "onWhen" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "On When",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.WhenDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets an additional predicate that should be true before the onCatch is triggered. To be used for fine grained controlling whether a thrown exception should be intercepted by this exception type or not."
      },
      "outputs" : {
        "index" : 5,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineExceptionCaught" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Exception Caught",
        "label" : "producer",
        "required" : false,
        "javaType" : "java.lang.Exception",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Stores the caught exception due to a processing error of the current Exchange"
      },
      "ZwangineFailureEndpoint" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Failure Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where the Exchange failed during processing"
      },
      "ZwangineFailureRouteId" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "Failure Route Id",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Route ID where the Exchange failed during processing"
      }
    },
    "propertiesSchema" : {
      "title" : "Do Catch",
      "description" : "Catches exceptions as part of a try, catch, finally block",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "exception" : {
          "type" : "array",
          "title" : "Exception",
          "description" : "The exception(s) to catch.",
          "items" : {
            "type" : "string"
          },
          "$comment" : "group:common"
        },
        "onWhen" : {
          "title" : "On When",
          "description" : "Sets an additional predicate that should be true before the onCatch is triggered. To be used for fine grained controlling whether a thrown exception should be intercepted by this exception type or not.",
          "$ref" : "#/definitions/org.zenithblox.model.WhenDefinition",
          "$comment" : "group:common"
        }
      },
      "definitions" : {
        "org.zenithblox.model.WhenDefinition" : {
          "title" : "When",
          "description" : "Triggers a route when the expression evaluates to true",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "expression" ]
                }, {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "expression" ],
              "properties" : {
                "expression" : {
                  "title" : "Expression",
                  "description" : "Expression used as the predicate to evaluate whether this when should trigger and route the message or not.",
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
                }
              }
            } ],
            "format" : "expression"
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "expression" : { },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
              }
            },
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          },
          "required" : [ "expression" ]
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "choice" : {
    "model" : {
      "kind" : "model",
      "name" : "choice",
      "title" : "Choice",
      "description" : "Route messages based on a series of predicates",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ChoiceDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "when" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "When",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.WhenDefinition>",
        "oneOf" : [ "when" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Sets the when nodes"
      },
      "otherwise" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Otherwise",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.OtherwiseDefinition",
        "oneOf" : [ "otherwise" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the otherwise node"
      },
      "precondition" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Precondition",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Indicates whether this Choice EIP is in precondition mode or not. If so its branches (when/otherwise) are evaluated during startup to keep at runtime only the branch that matched."
      }
    },
    "propertiesSchema" : {
      "title" : "Choice",
      "description" : "Route messages based on a series of predicates",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "precondition" : {
          "type" : "boolean",
          "title" : "Precondition",
          "description" : "Indicates whether this Choice EIP is in precondition mode or not. If so its branches (when/otherwise) are evaluated during startup to keep at runtime only the branch that matched.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "circuitBreaker" : {
    "model" : {
      "kind" : "model",
      "name" : "circuitBreaker",
      "title" : "Circuit Breaker",
      "description" : "Route messages in a fault tolerance way using Circuit Breaker",
      "deprecated" : false,
      "label" : "eip,routing,error",
      "javaType" : "org.zenithblox.model.CircuitBreakerDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "configuration" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Configuration",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a circuit breaker configuration (such as resillience4j, or microprofile-fault-tolerance) to use for configuring the circuit breaker EIP."
      },
      "resilience4jConfiguration" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Resilience4j Configuration",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.Resilience4jConfigurationDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Configures the circuit breaker to use Resilience4j with the given configuration."
      },
      "faultToleranceConfiguration" : {
        "index" : 5,
        "kind" : "element",
        "displayName" : "Fault Tolerance Configuration",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.FaultToleranceConfigurationDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Configures the circuit breaker to use MicroProfile Fault Tolerance with the given configuration."
      },
      "onFallback" : {
        "index" : 6,
        "kind" : "element",
        "displayName" : "On Fallback",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.OnFallbackDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The fallback route path to execute that does not go over the network. This should be a static or cached result that can immediately be returned upon failure. If the fallback requires network connection then use onFallbackViaNetwork() ."
      },
      "outputs" : {
        "index" : 7,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineResponseSuccessfulExecution" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Response Successful Execution",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether the exchange was processed successfully by the circuit breaker"
      },
      "ZwangineResponseFromFallback" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Response From Fallback",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether the exchange was processed by the onFallback by the circuit breaker"
      },
      "ZwangineResponseShortCircuited" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "Response Short Circuited",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether the exchange was short circuited by the breaker"
      },
      "ZwangineResponseTimedOut" : {
        "index" : 3,
        "kind" : "exchangeProperty",
        "displayName" : "Response Timed Out",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether the exchange timed out during processing by the circuit breaker"
      },
      "ZwangineResponseRejected" : {
        "index" : 4,
        "kind" : "exchangeProperty",
        "displayName" : "Response Rejected",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether the circuit breaker rejected processing the exchange"
      }
    },
    "propertiesSchema" : {
      "title" : "Circuit Breaker",
      "description" : "Route messages in a fault tolerance way using Circuit Breaker",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "configuration" : {
          "type" : "string",
          "title" : "Configuration",
          "description" : "Refers to a circuit breaker configuration (such as resillience4j, or microprofile-fault-tolerance) to use for configuring the circuit breaker EIP.",
          "$comment" : "group:common"
        },
        "resilience4jConfiguration" : {
          "title" : "Resilience4j Configuration",
          "description" : "Configures the circuit breaker to use Resilience4j with the given configuration.",
          "$ref" : "#/definitions/org.zenithblox.model.Resilience4jConfigurationDefinition",
          "$comment" : "group:common"
        },
        "faultToleranceConfiguration" : {
          "title" : "Fault Tolerance Configuration",
          "description" : "Configures the circuit breaker to use MicroProfile Fault Tolerance with the given configuration.",
          "$ref" : "#/definitions/org.zenithblox.model.FaultToleranceConfigurationDefinition",
          "$comment" : "group:common"
        },
        "onFallback" : {
          "title" : "On Fallback",
          "description" : "The fallback route path to execute that does not go over the network. This should be a static or cached result that can immediately be returned upon failure. If the fallback requires network connection then use onFallbackViaNetwork() .",
          "$ref" : "#/definitions/org.zenithblox.model.OnFallbackDefinition",
          "$comment" : "group:common"
        }
      },
      "definitions" : {
        "org.zenithblox.model.FaultToleranceConfigurationDefinition" : {
          "title" : "Fault Tolerance Configuration",
          "description" : "MicroProfile Fault Tolerance Circuit Breaker EIP configuration",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "circuitBreaker" : {
              "type" : "string",
              "title" : "Circuit Breaker",
              "description" : "Refers to an existing io.smallrye.faulttolerance.core.circuit.breaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.",
              "$comment" : "group:advanced"
            },
            "delay" : {
              "type" : "string",
              "title" : "Delay",
              "description" : "Control how long the circuit breaker stays open. The default is 5 seconds.",
              "default" : "5000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "successThreshold" : {
              "type" : "number",
              "title" : "Success Threshold",
              "description" : "Controls the number of trial calls which are allowed when the circuit breaker is half-open",
              "default" : "1",
              "$comment" : "group:common"
            },
            "requestVolumeThreshold" : {
              "type" : "number",
              "title" : "Request Volume Threshold",
              "description" : "Controls the size of the rolling window used when the circuit breaker is closed",
              "default" : "20",
              "$comment" : "group:common"
            },
            "failureRatio" : {
              "type" : "number",
              "title" : "Failure Ratio",
              "description" : "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.",
              "default" : "50",
              "$comment" : "group:common"
            },
            "timeoutEnabled" : {
              "type" : "boolean",
              "title" : "Timeout Enabled",
              "description" : "Whether timeout is enabled or not on the circuit breaker. Default is false.",
              "$comment" : "group:common"
            },
            "timeoutDuration" : {
              "type" : "string",
              "title" : "Timeout Duration",
              "description" : "Configures the thread execution timeout. Default value is 1 second.",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "timeoutPoolSize" : {
              "type" : "number",
              "title" : "Timeout Pool Size",
              "description" : "Configures the pool size of the thread pool when timeout is enabled. Default value is 10.",
              "default" : "10",
              "$comment" : "group:advanced"
            },
            "timeoutScheduledExecutorService" : {
              "type" : "string",
              "title" : "Timeout Scheduled Executor Service",
              "description" : "References to a custom thread pool to use when timeout is enabled",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ScheduledExecutorService"
            },
            "bulkheadEnabled" : {
              "type" : "boolean",
              "title" : "Bulkhead Enabled",
              "description" : "Whether bulkhead is enabled or not on the circuit breaker. Default is false.",
              "$comment" : "group:common"
            },
            "bulkheadMaxConcurrentCalls" : {
              "type" : "number",
              "title" : "Bulkhead Max Concurrent Calls",
              "description" : "Configures the max amount of concurrent calls the bulkhead will support.",
              "default" : "10",
              "$comment" : "group:advanced"
            },
            "bulkheadWaitingTaskQueue" : {
              "type" : "number",
              "title" : "Bulkhead Waiting Task Queue",
              "description" : "Configures the task queue size for holding waiting tasks to be processed by the bulkhead.",
              "default" : "10",
              "$comment" : "group:advanced"
            },
            "bulkheadExecutorService" : {
              "type" : "string",
              "title" : "Bulkhead Executor Service",
              "description" : "References to a custom thread pool to use when bulkhead is enabled.",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ExecutorService"
            }
          }
        },
        "org.zenithblox.model.OnFallbackDefinition" : {
          "title" : "On Fallback",
          "description" : "Route to be executed when Circuit Breaker EIP executes fallback",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "fallbackViaNetwork" : {
              "type" : "boolean",
              "title" : "Fallback Via Network",
              "description" : "Whether the fallback goes over the network. If the fallback will go over the network it is another possible point of failure. It is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool this would prevent the fallback from running if the two commands share the same pool.",
              "$comment" : "group:advanced"
            },
            "steps" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
              }
            }
          }
        },
        "org.zenithblox.model.Resilience4jConfigurationDefinition" : {
          "title" : "Resilience4j Configuration",
          "description" : "Resilience4j Circuit Breaker EIP configuration",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "circuitBreaker" : {
              "type" : "string",
              "title" : "Circuit Breaker",
              "description" : "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.",
              "$comment" : "group:advanced"
            },
            "config" : {
              "type" : "string",
              "title" : "Config",
              "description" : "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreakerConfig instance to lookup and use from the registry.",
              "$comment" : "group:advanced"
            },
            "failureRateThreshold" : {
              "type" : "number",
              "title" : "Failure Rate Threshold",
              "description" : "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.",
              "default" : "50",
              "$comment" : "group:common"
            },
            "permittedNumberOfCallsInHalfOpenState" : {
              "type" : "number",
              "title" : "Permitted Number Of Calls In Half Open State",
              "description" : "Configures the number of permitted calls when the CircuitBreaker is half open. The size must be greater than 0. Default size is 10.",
              "default" : "10",
              "$comment" : "group:advanced"
            },
            "throwExceptionWhenHalfOpenOrOpenState" : {
              "type" : "boolean",
              "title" : "Throw Exception When Half Open Or Open State",
              "description" : "Whether to throw io.github.resilience4j.circuitbreaker.CallNotPermittedException when the call is rejected due circuit breaker is half open or open.",
              "$comment" : "group:common"
            },
            "slidingWindowSize" : {
              "type" : "number",
              "title" : "Sliding Window Size",
              "description" : "Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. slidingWindowSize configures the size of the sliding window. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. The slidingWindowSize must be greater than 0. The minimumNumberOfCalls must be greater than 0. If the slidingWindowType is COUNT_BASED, the minimumNumberOfCalls cannot be greater than slidingWindowSize . If the slidingWindowType is TIME_BASED, you can pick whatever you want. Default slidingWindowSize is 100.",
              "default" : "100",
              "$comment" : "group:common"
            },
            "slidingWindowType" : {
              "type" : "string",
              "title" : "Sliding Window Type",
              "description" : "Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. Default slidingWindowType is COUNT_BASED.",
              "default" : "COUNT_BASED",
              "enum" : [ "TIME_BASED", "COUNT_BASED" ],
              "$comment" : "group:advanced"
            },
            "minimumNumberOfCalls" : {
              "type" : "number",
              "title" : "Minimum Number Of Calls",
              "description" : "Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate. For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed. Default minimumNumberOfCalls is 100",
              "default" : "100",
              "$comment" : "group:common"
            },
            "writableStackTraceEnabled" : {
              "type" : "boolean",
              "title" : "Writable Stack Trace Enabled",
              "description" : "Enables writable stack traces. When set to false, Exception.getStackTrace returns a zero length array. This may be used to reduce log spam when the circuit breaker is open as the cause of the exceptions is already known (the circuit breaker is short-circuiting calls).",
              "$comment" : "group:advanced",
              "default" : true
            },
            "waitDurationInOpenState" : {
              "type" : "number",
              "title" : "Wait Duration In Open State",
              "description" : "Configures the wait duration (in seconds) which specifies how long the CircuitBreaker should stay open, before it switches to half open. Default value is 60 seconds.",
              "default" : "60",
              "$comment" : "group:advanced"
            },
            "automaticTransitionFromOpenToHalfOpenEnabled" : {
              "type" : "boolean",
              "title" : "Automatic Transition From Open To Half Open Enabled",
              "description" : "Enables automatic transition from OPEN to HALF_OPEN state once the waitDurationInOpenState has passed.",
              "$comment" : "group:advanced"
            },
            "slowCallRateThreshold" : {
              "type" : "number",
              "title" : "Slow Call Rate Threshold",
              "description" : "Configures a threshold in percentage. The CircuitBreaker considers a call as slow when the call duration is greater than slowCallDurationThreshold Duration. When the percentage of slow calls is equal or greater the threshold, the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 100 percentage which means that all recorded calls must be slower than slowCallDurationThreshold.",
              "default" : "100",
              "$comment" : "group:advanced"
            },
            "slowCallDurationThreshold" : {
              "type" : "number",
              "title" : "Slow Call Duration Threshold",
              "description" : "Configures the duration threshold (seconds) above which calls are considered as slow and increase the slow calls percentage. Default value is 60 seconds.",
              "default" : "60",
              "$comment" : "group:advanced"
            },
            "bulkheadEnabled" : {
              "type" : "boolean",
              "title" : "Bulkhead Enabled",
              "description" : "Whether bulkhead is enabled or not on the circuit breaker. Default is false.",
              "$comment" : "group:common"
            },
            "bulkheadMaxConcurrentCalls" : {
              "type" : "number",
              "title" : "Bulkhead Max Concurrent Calls",
              "description" : "Configures the max amount of concurrent calls the bulkhead will support.",
              "default" : "25",
              "$comment" : "group:common"
            },
            "bulkheadMaxWaitDuration" : {
              "type" : "number",
              "title" : "Bulkhead Max Wait Duration",
              "description" : "Configures a maximum amount of time which the calling thread will wait to enter the bulkhead. If bulkhead has space available, entry is guaranteed and immediate. If bulkhead is full, calling threads will contest for space, if it becomes available. maxWaitDuration can be set to 0. Note: for threads running on an event-loop or equivalent (rx computation pool, etc), setting maxWaitDuration to 0 is highly recommended. Blocking an event-loop thread will most likely have a negative effect on application throughput.",
              "default" : "0",
              "$comment" : "group:advanced"
            },
            "timeoutEnabled" : {
              "type" : "boolean",
              "title" : "Timeout Enabled",
              "description" : "Whether timeout is enabled or not on the circuit breaker. Default is false.",
              "$comment" : "group:common"
            },
            "timeoutExecutorService" : {
              "type" : "string",
              "title" : "Timeout Executor Service",
              "description" : "References to a custom thread pool to use when timeout is enabled (uses ForkJoinPool#commonPool() by default)",
              "$comment" : "group:advanced",
              "format" : "bean:java.util.concurrent.ExecutorService"
            },
            "timeoutDuration" : {
              "type" : "number",
              "title" : "Timeout Duration",
              "description" : "Configures the thread execution timeout. Default value is 1 second.",
              "default" : "1000",
              "$comment" : "group:common"
            },
            "timeoutCancelRunningFuture" : {
              "type" : "boolean",
              "title" : "Timeout Cancel Running Future",
              "description" : "Configures whether cancel is called on the running future. Defaults to true.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "recordException" : {
              "type" : "array",
              "title" : "Record Exception",
              "description" : "Configure a list of exceptions that are recorded as a failure and thus increase the failure rate. Any exception matching or inheriting from one of the list counts as a failure, unless explicitly ignored via ignoreExceptions.",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:advanced"
            },
            "ignoreException" : {
              "type" : "array",
              "title" : "Ignore Exception",
              "description" : "Configure a list of exceptions that are ignored and neither count as a failure nor success. Any exception matching or inheriting from one of the list will not count as a failure nor success, even if the exceptions is part of recordExceptions.",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:advanced"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "claimCheck" : {
    "model" : {
      "kind" : "model",
      "name" : "claimCheck",
      "title" : "Claim Check",
      "description" : "The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ClaimCheckDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "operation" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Operation",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.ClaimCheckOperation",
        "enum" : [ "Get", "GetAndRemove", "Set", "Push", "Pop" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The claim check operation to use. The following operations are supported: Get - Gets (does not remove) the claim check by the given key. GetAndRemove - Gets and removes the claim check by the given key. Set - Sets a new (will override if key already exists) claim check with the given key. Push - Sets a new claim check on the stack (does not use key). Pop - Gets the latest claim check from the stack (does not use key)."
      },
      "key" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Key",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a specific key for claim check id (for dynamic keys use simple language syntax as the key)."
      },
      "filter" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Filter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Specify a filter to control what data gets merged data back from the claim check repository. The following syntax is supported: body - to aggregate the message body attachments - to aggregate all the message attachments headers - to aggregate all the message headers header:pattern - to aggregate all the message headers that matches the pattern. The following pattern rules are applied in this order: exact match, returns true wildcard match (pattern ends with a and the name starts with the pattern), returns true regular expression match, returns true otherwise returns false You can specify multiple rules separated by comma. For example, the following includes the message body and all headers starting with foo: body,header:foo. The syntax supports the following prefixes which can be used to specify include,exclude, or remove - to include (which is the default mode) - - to exclude (exclude takes precedence over include) -- - to remove (remove takes precedence) For example to exclude a header name foo, and remove all headers starting with bar, -header:foo,--headers:bar Note you cannot have both include and exclude header:pattern at the same time."
      },
      "aggregationStrategy" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom AggregationStrategy instead of the default implementation. Notice you cannot use both custom aggregation strategy and configure data at the same time."
      },
      "aggregationStrategyMethodName" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy."
      }
    },
    "propertiesSchema" : {
      "title" : "Claim Check",
      "description" : "The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "operation" : {
          "type" : "string",
          "title" : "Operation",
          "description" : "The claim check operation to use. The following operations are supported: Get - Gets (does not remove) the claim check by the given key. GetAndRemove - Gets and removes the claim check by the given key. Set - Sets a new (will override if key already exists) claim check with the given key. Push - Sets a new claim check on the stack (does not use key). Pop - Gets the latest claim check from the stack (does not use key).",
          "enum" : [ "Get", "GetAndRemove", "Set", "Push", "Pop" ],
          "$comment" : "group:common"
        },
        "key" : {
          "type" : "string",
          "title" : "Key",
          "description" : "To use a specific key for claim check id (for dynamic keys use simple language syntax as the key).",
          "$comment" : "group:common"
        },
        "filter" : {
          "type" : "string",
          "title" : "Filter",
          "description" : "Specify a filter to control what data gets merged data back from the claim check repository. The following syntax is supported: body - to aggregate the message body attachments - to aggregate all the message attachments headers - to aggregate all the message headers header:pattern - to aggregate all the message headers that matches the pattern. The following pattern rules are applied in this order: exact match, returns true wildcard match (pattern ends with a and the name starts with the pattern), returns true regular expression match, returns true otherwise returns false You can specify multiple rules separated by comma. For example, the following includes the message body and all headers starting with foo: body,header:foo. The syntax supports the following prefixes which can be used to specify include,exclude, or remove - to include (which is the default mode) - - to exclude (exclude takes precedence over include) -- - to remove (remove takes precedence) For example to exclude a header name foo, and remove all headers starting with bar, -header:foo,--headers:bar Note you cannot have both include and exclude header:pattern at the same time.",
          "$comment" : "group:common"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "To use a custom AggregationStrategy instead of the default implementation. Notice you cannot use both custom aggregation strategy and configure data at the same time.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "convertBodyTo" : {
    "model" : {
      "kind" : "model",
      "name" : "convertBodyTo",
      "title" : "Convert Body To",
      "description" : "Converts the message body to another type",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.ConvertBodyDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "type" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The java type to convert to"
      },
      "mandatory" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Mandatory",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null."
      },
      "charset" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Charset",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a specific charset when converting"
      }
    },
    "propertiesSchema" : {
      "title" : "Convert Body To",
      "description" : "Converts the message body to another type",
      "required" : [ "type" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "The java type to convert to",
          "$comment" : "group:common"
        },
        "mandatory" : {
          "type" : "boolean",
          "title" : "Mandatory",
          "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "charset" : {
          "type" : "string",
          "title" : "Charset",
          "description" : "To use a specific charset when converting",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "convertHeaderTo" : {
    "model" : {
      "kind" : "model",
      "name" : "convertHeaderTo",
      "title" : "Convert Header To",
      "description" : "Converts the message header to another type",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.ConvertHeaderDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of message header to convert its value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used."
      },
      "type" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The java type to convert to"
      },
      "toName" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "To Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use another header to store the result. By default, the result is stored in the same header. This option allows to use another header. The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used."
      },
      "mandatory" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Mandatory",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null."
      },
      "charset" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Charset",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a specific charset when converting"
      }
    },
    "propertiesSchema" : {
      "title" : "Convert Header To",
      "description" : "Converts the message header to another type",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of message header to convert its value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "The java type to convert to",
          "$comment" : "group:common"
        },
        "toName" : {
          "type" : "string",
          "title" : "To Name",
          "description" : "To use another header to store the result. By default, the result is stored in the same header. This option allows to use another header. The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "mandatory" : {
          "type" : "boolean",
          "title" : "Mandatory",
          "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "charset" : {
          "type" : "string",
          "title" : "Charset",
          "description" : "To use a specific charset when converting",
          "$comment" : "group:advanced"
        }
      },
      "required" : [ "name", "type" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "convertVariableTo" : {
    "model" : {
      "kind" : "model",
      "name" : "convertVariableTo",
      "title" : "Convert Variable To",
      "description" : "Converts the variable to another type",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.ConvertVariableDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of variable to convert its value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used."
      },
      "type" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The java type to convert to"
      },
      "toName" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "To Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use another variable to store the result. By default, the result is stored in the same variable. This option allows to use another variable. The simple language can be used to define a dynamic evaluated variable name to be used. Otherwise a constant name will be used."
      },
      "mandatory" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Mandatory",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null."
      },
      "charset" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Charset",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a specific charset when converting"
      }
    },
    "propertiesSchema" : {
      "title" : "Convert Variable To",
      "description" : "Converts the variable to another type",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of variable to convert its value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "The java type to convert to",
          "$comment" : "group:common"
        },
        "toName" : {
          "type" : "string",
          "title" : "To Name",
          "description" : "To use another variable to store the result. By default, the result is stored in the same variable. This option allows to use another variable. The simple language can be used to define a dynamic evaluated variable name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "mandatory" : {
          "type" : "boolean",
          "title" : "Mandatory",
          "description" : "When mandatory then the conversion must return a value (cannot be null), if this is not possible then NoTypeConversionAvailableException is thrown. Setting this to false could mean conversion is not possible and the value is null.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "charset" : {
          "type" : "string",
          "title" : "Charset",
          "description" : "To use a specific charset when converting",
          "$comment" : "group:advanced"
        }
      },
      "required" : [ "name", "type" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "delay" : {
    "model" : {
      "kind" : "model",
      "name" : "delay",
      "title" : "Delay",
      "description" : "Delays processing for a specified length of time",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.DelayDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to define how long time to wait (in millis)"
      },
      "asyncDelayed" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Async Delayed",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Enables asynchronous delay which means the thread will not block while delaying."
      },
      "callerRunsWhenRejected" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Caller Runs When Rejected",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the caller should run the task when it was rejected by the thread pool. Is by default true"
      },
      "executorService" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom Thread Pool if asyncDelay has been enabled."
      }
    },
    "propertiesSchema" : {
      "title" : "Delay",
      "description" : "Delays processing for a specified length of time",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to define how long time to wait (in millis)",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "asyncDelayed" : {
          "type" : "boolean",
          "title" : "Async Delayed",
          "description" : "Enables asynchronous delay which means the thread will not block while delaying.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "callerRunsWhenRejected" : {
          "type" : "boolean",
          "title" : "Caller Runs When Rejected",
          "description" : "Whether or not the caller should run the task when it was rejected by the thread pool. Is by default true",
          "$comment" : "group:advanced",
          "default" : true
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "To use a custom Thread Pool if asyncDelay has been enabled.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "dynamicRouter" : {
    "model" : {
      "kind" : "model",
      "name" : "dynamicRouter",
      "title" : "Dynamic Router",
      "description" : "Route messages based on dynamic rules",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.DynamicRouterDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to call that returns the endpoint(s) to route to in the dynamic routing. Important: The expression will be called in a while loop fashion, until the expression returns null which means the dynamic router is finished."
      },
      "uriDelimiter" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Uri Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : ",",
        "description" : "Sets the uri delimiter to use"
      },
      "ignoreInvalidEndpoints" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoints",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint"
      },
      "cacheSize" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this dynamic router, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      }
    },
    "propertiesSchema" : {
      "title" : "Dynamic Router",
      "description" : "Route messages based on dynamic rules",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to call that returns the endpoint(s) to route to in the dynamic routing. Important: The expression will be called in a while loop fashion, until the expression returns null which means the dynamic router is finished.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "uriDelimiter" : {
          "type" : "string",
          "title" : "Uri Delimiter",
          "description" : "Sets the uri delimiter to use",
          "default" : ",",
          "$comment" : "group:common"
        },
        "ignoreInvalidEndpoints" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoints",
          "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
          "$comment" : "group:advanced"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this dynamic router, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "enrich" : {
    "model" : {
      "kind" : "model",
      "name" : "enrich",
      "title" : "Enrich",
      "description" : "Enriches a message with data from a secondary resource",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.EnrichDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression that computes the endpoint uri to use as the resource endpoint to enrich from"
      },
      "variableSend" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Variable Send",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message."
      },
      "variableReceive" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "aggregationStrategy" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message. By default Zwangine will use the reply from the external service as outgoing message."
      },
      "aggregationStrategyMethodName" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy."
      },
      "aggregationStrategyMethodAllowNull" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Allow Null",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy."
      },
      "aggregateOnException" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Aggregate On Exception",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If this option is false then the aggregate method is not used if there was an exception thrown while trying to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what to do if there was an exception in the aggregate method. For example to suppress the exception or set a custom message body etc."
      },
      "shareUnitOfWork" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Share Unit Of Work",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and the resource exchange. Enrich will by default not share unit of work between the parent exchange and the resource exchange. This means the resource exchange has its own individual unit of work."
      },
      "cacheSize" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producer when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      },
      "ignoreInvalidEndpoint" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoint",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint"
      },
      "allowOptimisedComponents" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Allow Optimised Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to allow components to optimise enricher if they are org.zenithblox.spi.SendDynamicAware ."
      },
      "autoStartComponents" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Auto Start Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to auto startup components when enricher is starting up."
      }
    },
    "exchangeProperties" : {
      "ZwangineToEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "Enrich",
      "description" : "Enriches a message with data from a secondary resource",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression that computes the endpoint uri to use as the resource endpoint to enrich from",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "variableSend" : {
          "type" : "string",
          "title" : "Variable Send",
          "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message. By default Zwangine will use the reply from the external service as outgoing message.",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategyMethodAllowNull" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Allow Null",
          "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregateOnException" : {
          "type" : "boolean",
          "title" : "Aggregate On Exception",
          "description" : "If this option is false then the aggregate method is not used if there was an exception thrown while trying to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what to do if there was an exception in the aggregate method. For example to suppress the exception or set a custom message body etc.",
          "$comment" : "group:advanced"
        },
        "shareUnitOfWork" : {
          "type" : "boolean",
          "title" : "Share Unit Of Work",
          "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and the resource exchange. Enrich will by default not share unit of work between the parent exchange and the resource exchange. This means the resource exchange has its own individual unit of work.",
          "$comment" : "group:advanced"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producer when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "ignoreInvalidEndpoint" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoint",
          "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
          "$comment" : "group:advanced"
        },
        "allowOptimisedComponents" : {
          "type" : "boolean",
          "title" : "Allow Optimised Components",
          "description" : "Whether to allow components to optimise enricher if they are org.zenithblox.spi.SendDynamicAware .",
          "$comment" : "group:advanced",
          "default" : true
        },
        "autoStartComponents" : {
          "type" : "boolean",
          "title" : "Auto Start Components",
          "description" : "Whether to auto startup components when enricher is starting up.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "filter" : {
    "model" : {
      "kind" : "model",
      "name" : "filter",
      "title" : "Filter",
      "description" : "Filter out messages based using a predicate",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.FilterDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Expression to determine if the message should be filtered or not. If the expression returns an empty value or false then the message is filtered (dropped), otherwise the message is continued being routed."
      },
      "statusPropertyName" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Status Property Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of exchange property to use for storing the status of the filtering. Setting this allows to know if the filter predicate evaluated as true or false."
      },
      "outputs" : {
        "index" : 5,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "Filter",
      "description" : "Filter out messages based using a predicate",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to determine if the message should be filtered or not. If the expression returns an empty value or false then the message is filtered (dropped), otherwise the message is continued being routed.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "statusPropertyName" : {
          "type" : "string",
          "title" : "Status Property Name",
          "description" : "Name of exchange property to use for storing the status of the filtering. Setting this allows to know if the filter predicate evaluated as true or false.",
          "$comment" : "group:advanced"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "doFinally" : {
    "model" : {
      "kind" : "model",
      "name" : "doFinally",
      "title" : "Do Finally",
      "description" : "Path traversed when a try, catch, finally block exits",
      "deprecated" : false,
      "label" : "error",
      "javaType" : "org.zenithblox.model.FinallyDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "outputs" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineExceptionCaught" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Exception Caught",
        "label" : "producer",
        "required" : false,
        "javaType" : "java.lang.Exception",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Stores the caught exception due to a processing error of the current Exchange"
      },
      "ZwangineFailureEndpoint" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Failure Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where the Exchange failed during processing"
      },
      "ZwangineFailureRouteId" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "Failure Route Id",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Route ID where the Exchange failed during processing"
      }
    },
    "propertiesSchema" : {
      "title" : "Do Finally",
      "description" : "Path traversed when a try, catch, finally block exits",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "idempotentConsumer" : {
    "model" : {
      "kind" : "model",
      "name" : "idempotentConsumer",
      "title" : "Idempotent Consumer",
      "description" : "Filters out duplicate messages",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.IdempotentConsumerDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression used to calculate the correlation key to use for duplicate check. The Exchange which has the same correlation key is regarded as a duplicate and will be rejected."
      },
      "idempotentRepository" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Idempotent Repository",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.spi.IdempotentRepository",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the reference name of the message id repository"
      },
      "eager" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Eager",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Sets whether to eagerly add the key to the idempotent repository or wait until the exchange is complete. Eager is default enabled."
      },
      "completionEager" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Completion Eager",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether to complete the idempotent consumer eager or when the exchange is done. If this option is true to complete eager, then the idempotent consumer will trigger its completion when the exchange reached the end of the block of the idempotent consumer pattern. So if the exchange is continued routed after the block ends, then whatever happens there does not affect the state. If this option is false (default) to not complete eager, then the idempotent consumer will complete when the exchange is done being routed. So if the exchange is continued routed after the block ends, then whatever happens there also affect the state. For example if the exchange failed due to an exception, then the state of the idempotent consumer will be a rollback."
      },
      "skipDuplicate" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Skip Duplicate",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Sets whether to skip duplicates or not. The default behavior is to skip duplicates. A duplicate message would have the Exchange property org.zenithblox.Exchange#DUPLICATE_MESSAGE set to a Boolean#TRUE value. A none duplicate message will not have this property set."
      },
      "removeOnFailure" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Remove On Failure",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Sets whether to remove or keep the key on failure. The default behavior is to remove the key on failure."
      },
      "outputs" : {
        "index" : 9,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineDuplicateMessage" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Duplicate Message",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether this exchange is a duplicate detected by the Idempotent Consumer EIP"
      }
    },
    "propertiesSchema" : {
      "title" : "Idempotent Consumer",
      "description" : "Filters out duplicate messages",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression used to calculate the correlation key to use for duplicate check. The Exchange which has the same correlation key is regarded as a duplicate and will be rejected.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "idempotentRepository" : {
          "type" : "string",
          "title" : "Idempotent Repository",
          "description" : "Sets the reference name of the message id repository",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.spi.IdempotentRepository"
        },
        "eager" : {
          "type" : "boolean",
          "title" : "Eager",
          "description" : "Sets whether to eagerly add the key to the idempotent repository or wait until the exchange is complete. Eager is default enabled.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "completionEager" : {
          "type" : "boolean",
          "title" : "Completion Eager",
          "description" : "Sets whether to complete the idempotent consumer eager or when the exchange is done. If this option is true to complete eager, then the idempotent consumer will trigger its completion when the exchange reached the end of the block of the idempotent consumer pattern. So if the exchange is continued routed after the block ends, then whatever happens there does not affect the state. If this option is false (default) to not complete eager, then the idempotent consumer will complete when the exchange is done being routed. So if the exchange is continued routed after the block ends, then whatever happens there also affect the state. For example if the exchange failed due to an exception, then the state of the idempotent consumer will be a rollback.",
          "$comment" : "group:advanced"
        },
        "skipDuplicate" : {
          "type" : "boolean",
          "title" : "Skip Duplicate",
          "description" : "Sets whether to skip duplicates or not. The default behavior is to skip duplicates. A duplicate message would have the Exchange property org.zenithblox.Exchange#DUPLICATE_MESSAGE set to a Boolean#TRUE value. A none duplicate message will not have this property set.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "removeOnFailure" : {
          "type" : "boolean",
          "title" : "Remove On Failure",
          "description" : "Sets whether to remove or keep the key on failure. The default behavior is to remove the key on failure.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
          }
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "required" : [ "idempotentRepository", "expression" ],
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "kamelet" : {
    "model" : {
      "kind" : "model",
      "name" : "kamelet",
      "title" : "Kamelet",
      "description" : "To call Kamelets in special situations",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.KameletDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of the Kamelet (templateId/routeId) to call. Options for the kamelet can be specified using uri syntax, eg mynamecount=4&type=gold."
      },
      "outputs" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "required" : [ "name" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of the Kamelet (templateId/routeId) to call. Options for the kamelet can be specified using uri syntax, eg mynamecount=4&type=gold.",
          "$comment" : "group:common"
        },
        "parameters" : {
          "type" : "object"
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "loadBalance" : {
    "model" : {
      "kind" : "model",
      "name" : "loadBalance",
      "title" : "Load Balance",
      "description" : "Balances message processing among a number of nodes",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.LoadBalanceDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "loadBalancerType" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Load Balancer Type",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.LoadBalancerDefinition",
        "oneOf" : [ "customLoadBalancer", "failoverLoadBalancer", "randomLoadBalancer", "roundRobinLoadBalancer", "stickyLoadBalancer", "topicLoadBalancer", "weightedLoadBalancer" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The load balancer to be used"
      },
      "outputs" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      },
      "inheritErrorHandler" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Inherit Error Handler",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether or not to inherit the configured error handler. The default value is true. You can use this to disable using the inherited error handler for a given DSL such as a load balancer where you want to use a custom error handler strategy."
      }
    },
    "propertiesSchema" : {
      "title" : "Load Balance",
      "description" : "Balances message processing among a number of nodes",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "customLoadBalancer" ],
          "properties" : {
            "customLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.CustomLoadBalancerDefinition"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "customLoadBalancer" ]
            }, {
              "required" : [ "failoverLoadBalancer" ]
            }, {
              "required" : [ "randomLoadBalancer" ]
            }, {
              "required" : [ "roundRobinLoadBalancer" ]
            }, {
              "required" : [ "stickyLoadBalancer" ]
            }, {
              "required" : [ "topicLoadBalancer" ]
            }, {
              "required" : [ "weightedLoadBalancer" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "failoverLoadBalancer" ],
          "properties" : {
            "failoverLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.FailoverLoadBalancerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "randomLoadBalancer" ],
          "properties" : {
            "randomLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.RandomLoadBalancerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "roundRobinLoadBalancer" ],
          "properties" : {
            "roundRobinLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.RoundRobinLoadBalancerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "stickyLoadBalancer" ],
          "properties" : {
            "stickyLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.StickyLoadBalancerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "topicLoadBalancer" ],
          "properties" : {
            "topicLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.TopicLoadBalancerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "weightedLoadBalancer" ],
          "properties" : {
            "weightedLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.loadbalancer.WeightedLoadBalancerDefinition"
            }
          }
        } ]
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "inheritErrorHandler" : {
          "type" : "boolean",
          "title" : "Inherit Error Handler",
          "description" : "Sets whether or not to inherit the configured error handler. The default value is true. You can use this to disable using the inherited error handler for a given DSL such as a load balancer where you want to use a custom error handler strategy.",
          "$comment" : "group:common"
        },
        "customLoadBalancer" : { },
        "failoverLoadBalancer" : { },
        "randomLoadBalancer" : { },
        "roundRobinLoadBalancer" : { },
        "stickyLoadBalancer" : { },
        "topicLoadBalancer" : { },
        "weightedLoadBalancer" : { }
      },
      "definitions" : {
        "org.zenithblox.model.loadbalancer.CustomLoadBalancerDefinition" : {
          "title" : "Custom Load Balancer",
          "description" : "To use a custom load balancer implementation.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Refers to the custom load balancer to lookup from the registry",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.loadbalancer.FailoverLoadBalancerDefinition" : {
          "title" : "Failover Load Balancer",
          "description" : "In case of failures the exchange will be tried on the next endpoint.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "exception" : {
              "type" : "array",
              "title" : "Exception",
              "description" : "A list of class names for specific exceptions to monitor. If no exceptions are configured then all exceptions are monitored",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:common"
            },
            "roundRobin" : {
              "type" : "string",
              "title" : "Round Robin",
              "description" : "Whether or not the failover load balancer should operate in round robin mode or not. If not, then it will always start from the first endpoint when a new message is to be processed. In other words it restart from the top for every message. If round robin is enabled, then it keeps state and will continue with the next endpoint in a round robin fashion. You can also enable sticky mode together with round robin, if so then it will pick the last known good endpoint to use when starting the load balancing (instead of using the next when starting).",
              "$comment" : "group:common"
            },
            "sticky" : {
              "type" : "string",
              "title" : "Sticky",
              "description" : "Whether or not the failover load balancer should operate in sticky mode or not. If not, then it will always start from the first endpoint when a new message is to be processed. In other words it restart from the top for every message. If sticky is enabled, then it keeps state and will continue with the last known good endpoint. You can also enable sticky mode together with round robin, if so then it will pick the last known good endpoint to use when starting the load balancing (instead of using the next when starting).",
              "$comment" : "group:common"
            },
            "maximumFailoverAttempts" : {
              "type" : "string",
              "title" : "Maximum Failover Attempts",
              "description" : "A value to indicate after X failover attempts we should exhaust (give up). Use -1 to indicate never give up and continuously try to failover. Use 0 to never failover. And use e.g. 3 to failover at most 3 times before giving up. This option can be used whether roundRobin is enabled or not.",
              "default" : "-1",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.loadbalancer.RandomLoadBalancerDefinition" : {
          "title" : "Random Load Balancer",
          "description" : "The destination endpoints are selected randomly.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.loadbalancer.RoundRobinLoadBalancerDefinition" : {
          "title" : "Round Robin Load Balancer",
          "description" : "The destination endpoints are selected in a round-robin fashion. This is a well-known and classic policy, which spreads the load evenly.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.loadbalancer.StickyLoadBalancerDefinition" : {
          "title" : "Sticky Load Balancer",
          "description" : "Sticky load balancing using an expression to calculate a correlation key to perform the sticky load balancing.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "correlationExpression" : {
              "title" : "Correlation Expression",
              "description" : "The correlation expression to use to calculate the correlation key",
              "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
              "$comment" : "group:common",
              "format" : "expressionProperty"
            }
          },
          "required" : [ "correlationExpression" ]
        },
        "org.zenithblox.model.ExpressionSubElementDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.loadbalancer.TopicLoadBalancerDefinition" : {
          "title" : "Topic Load Balancer",
          "description" : "Topic which sends to all destinations.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.loadbalancer.WeightedLoadBalancerDefinition" : {
          "title" : "Weighted Load Balancer",
          "description" : "Uses a weighted load distribution ratio for each server with respect to others.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "distributionRatio" : {
              "type" : "string",
              "title" : "Distribution Ratio",
              "description" : "The distribution ratio is a delimited String consisting on integer weights separated by delimiters for example 2,3,5. The distributionRatio must match the number of endpoints and/or processors specified in the load balancer list.",
              "$comment" : "group:common"
            },
            "distributionRatioDelimiter" : {
              "type" : "string",
              "title" : "Distribution Ratio Delimiter",
              "description" : "Delimiter used to specify the distribution ratio. The default value is , (comma)",
              "default" : ",",
              "$comment" : "group:advanced"
            },
            "roundRobin" : {
              "type" : "boolean",
              "title" : "Round Robin",
              "description" : "To enable round robin mode. By default the weighted distribution mode is used. The default value is false.",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "distributionRatio" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "log" : {
    "model" : {
      "kind" : "model",
      "name" : "log",
      "title" : "Logger",
      "description" : "Used for printing custom messages to the logger.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.LogDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "message" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Message",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the log message (uses simple language)"
      },
      "loggingLevel" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Logging Level",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.LoggingLevel",
        "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "INFO",
        "description" : "Sets the logging level. The default value is INFO"
      },
      "logName" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Log Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the name of the logger. The name is default the routeId or the source:line if source location is enabled. You can also specify the name using tokens: ${class} - the logger class name (org.zenithblox.processor.LogProcessor) ${contextId} - the zwangine context id ${routeId} - the route id ${groupId} - the route group id ${nodeId} - the node id ${nodePrefixId} - the node prefix id ${source} - the source:line (source location must be enabled) ${source.name} - the source filename (source location must be enabled) ${source.line} - the source line number (source location must be enabled) For example to use the route and node id you can specify the name as: ${routeId}/${nodeId}"
      },
      "marker" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Marker",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use slf4j marker"
      },
      "logger" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Logger",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.slf4j.Logger",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To refer to a custom logger instance to lookup from the registry."
      }
    },
    "propertiesSchema" : {
      "title" : "Logger",
      "description" : "Used for printing custom messages to the logger.",
      "required" : [ "message" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "message" : {
          "type" : "string",
          "title" : "Message",
          "description" : "Sets the log message (uses simple language)",
          "$comment" : "group:common"
        },
        "loggingLevel" : {
          "type" : "string",
          "title" : "Logging Level",
          "description" : "Sets the logging level. The default value is INFO",
          "default" : "INFO",
          "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
          "$comment" : "group:common"
        },
        "logName" : {
          "type" : "string",
          "title" : "Log Name",
          "description" : "Sets the name of the logger. The name is default the routeId or the source:line if source location is enabled. You can also specify the name using tokens: ${class} - the logger class name (org.zenithblox.processor.LogProcessor) ${contextId} - the zwangine context id ${routeId} - the route id ${groupId} - the route group id ${nodeId} - the node id ${nodePrefixId} - the node prefix id ${source} - the source:line (source location must be enabled) ${source.name} - the source filename (source location must be enabled) ${source.line} - the source line number (source location must be enabled) For example to use the route and node id you can specify the name as: ${routeId}/${nodeId}",
          "$comment" : "group:common"
        },
        "marker" : {
          "type" : "string",
          "title" : "Marker",
          "description" : "To use slf4j marker",
          "$comment" : "group:advanced"
        },
        "logger" : {
          "type" : "string",
          "title" : "Logger",
          "description" : "To refer to a custom logger instance to lookup from the registry.",
          "$comment" : "group:advanced",
          "format" : "bean:org.slf4j.Logger"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "loop" : {
    "model" : {
      "kind" : "model",
      "name" : "loop",
      "title" : "Loop",
      "description" : "Processes a message multiple times",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.LoopDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to define how many times we should loop. Notice the expression is only evaluated once, and should return a number as how many times to loop. A value of zero or negative means no looping. The loop is like a for-loop fashion, if you want a while loop, then the dynamic router may be a better choice."
      },
      "copy" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Copy",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the copy attribute is true, a copy of the input Exchange is used for each iteration. That means each iteration will start from a copy of the same message. By default loop will loop the same exchange all over, so each iteration may have different message content."
      },
      "doWhile" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Do While",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Enables the while loop that loops until the predicate evaluates to false or null."
      },
      "breakOnShutdown" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Break On Shutdown",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the breakOnShutdown attribute is true, then the loop will not iterate until it reaches the end when Zwangine is shut down."
      },
      "outputs" : {
        "index" : 7,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineLoopIndex" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Loop Index",
        "label" : "producer",
        "required" : false,
        "javaType" : "int",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Index of the current iteration (0 based)."
      },
      "ZwangineLoopSize" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Loop Size",
        "label" : "producer",
        "required" : false,
        "javaType" : "int",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Total number of loops. This is not available if running the loop in while loop mode."
      }
    },
    "propertiesSchema" : {
      "title" : "Loop",
      "description" : "Processes a message multiple times",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to define how many times we should loop. Notice the expression is only evaluated once, and should return a number as how many times to loop. A value of zero or negative means no looping. The loop is like a for-loop fashion, if you want a while loop, then the dynamic router may be a better choice.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "copy" : {
          "type" : "boolean",
          "title" : "Copy",
          "description" : "If the copy attribute is true, a copy of the input Exchange is used for each iteration. That means each iteration will start from a copy of the same message. By default loop will loop the same exchange all over, so each iteration may have different message content.",
          "$comment" : "group:advanced"
        },
        "doWhile" : {
          "type" : "boolean",
          "title" : "Do While",
          "description" : "Enables the while loop that loops until the predicate evaluates to false or null.",
          "$comment" : "group:advanced"
        },
        "breakOnShutdown" : {
          "type" : "boolean",
          "title" : "Break On Shutdown",
          "description" : "If the breakOnShutdown attribute is true, then the loop will not iterate until it reaches the end when Zwangine is shut down.",
          "$comment" : "group:advanced"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "marshal" : {
    "model" : {
      "kind" : "model",
      "name" : "marshal",
      "title" : "Marshal",
      "description" : "Marshals data into a specified format for transmission over a transport or component",
      "deprecated" : false,
      "label" : "eip,dataformat,transformation",
      "javaType" : "org.zenithblox.model.MarshalDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "dataFormatType" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Data Format Type",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.DataFormatDefinition",
        "oneOf" : [ "asn1", "avro", "barcode", "base64", "beanio", "bindy", "cbor", "crypto", "csv", "custom", "fhirJson", "fhirXml", "flatpack", "fury", "grok", "gzipDeflater", "hl7", "ical", "jacksonXml", "jaxb", "json", "jsonApi", "lzf", "mimeMultipart", "parquetAvro", "pgp", "protobuf", "rss", "smooks", "soap", "swiftMt", "swiftMx", "syslog", "tarFile", "thrift", "tidyMarkup", "univocityCsv", "univocityFixed", "univocityTsv", "xmlSecurity", "yaml", "zipDeflater", "zipFile" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The data format to be used"
      },
      "variableSend" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Variable Send",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "variableReceive" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message."
      }
    },
    "propertiesSchema" : {
      "title" : "Marshal",
      "description" : "Marshals data into a specified format for transmission over a transport or component",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "asn1" ],
          "properties" : {
            "asn1" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ASN1DataFormat"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "asn1" ]
            }, {
              "required" : [ "avro" ]
            }, {
              "required" : [ "barcode" ]
            }, {
              "required" : [ "base64" ]
            }, {
              "required" : [ "beanio" ]
            }, {
              "required" : [ "bindy" ]
            }, {
              "required" : [ "cbor" ]
            }, {
              "required" : [ "crypto" ]
            }, {
              "required" : [ "csv" ]
            }, {
              "required" : [ "custom" ]
            }, {
              "required" : [ "fhirJson" ]
            }, {
              "required" : [ "fhirXml" ]
            }, {
              "required" : [ "flatpack" ]
            }, {
              "required" : [ "fury" ]
            }, {
              "required" : [ "grok" ]
            }, {
              "required" : [ "gzipDeflater" ]
            }, {
              "required" : [ "hl7" ]
            }, {
              "required" : [ "ical" ]
            }, {
              "required" : [ "jacksonXml" ]
            }, {
              "required" : [ "jaxb" ]
            }, {
              "required" : [ "json" ]
            }, {
              "required" : [ "jsonApi" ]
            }, {
              "required" : [ "lzf" ]
            }, {
              "required" : [ "mimeMultipart" ]
            }, {
              "required" : [ "parquetAvro" ]
            }, {
              "required" : [ "pgp" ]
            }, {
              "required" : [ "protobuf" ]
            }, {
              "required" : [ "rss" ]
            }, {
              "required" : [ "smooks" ]
            }, {
              "required" : [ "soap" ]
            }, {
              "required" : [ "swiftMt" ]
            }, {
              "required" : [ "swiftMx" ]
            }, {
              "required" : [ "syslog" ]
            }, {
              "required" : [ "tarFile" ]
            }, {
              "required" : [ "thrift" ]
            }, {
              "required" : [ "tidyMarkup" ]
            }, {
              "required" : [ "univocityCsv" ]
            }, {
              "required" : [ "univocityFixed" ]
            }, {
              "required" : [ "univocityTsv" ]
            }, {
              "required" : [ "xmlSecurity" ]
            }, {
              "required" : [ "yaml" ]
            }, {
              "required" : [ "zipDeflater" ]
            }, {
              "required" : [ "zipFile" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "avro" ],
          "properties" : {
            "avro" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.AvroDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "barcode" ],
          "properties" : {
            "barcode" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BarcodeDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "base64" ],
          "properties" : {
            "base64" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.Base64DataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "beanio" ],
          "properties" : {
            "beanio" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BeanioDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "bindy" ],
          "properties" : {
            "bindy" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BindyDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "cbor" ],
          "properties" : {
            "cbor" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CBORDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "crypto" ],
          "properties" : {
            "crypto" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CryptoDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "csv" ],
          "properties" : {
            "csv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CsvDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "custom" ],
          "properties" : {
            "custom" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CustomDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "fhirJson" ],
          "properties" : {
            "fhirJson" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FhirJsonDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "fhirXml" ],
          "properties" : {
            "fhirXml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FhirXmlDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "flatpack" ],
          "properties" : {
            "flatpack" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FlatpackDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "fury" ],
          "properties" : {
            "fury" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FuryDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "grok" ],
          "properties" : {
            "grok" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.GrokDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "gzipDeflater" ],
          "properties" : {
            "gzipDeflater" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.GzipDeflaterDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "hl7" ],
          "properties" : {
            "hl7" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.HL7DataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "ical" ],
          "properties" : {
            "ical" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.IcalDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "jacksonXml" ],
          "properties" : {
            "jacksonXml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JacksonXMLDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "jaxb" ],
          "properties" : {
            "jaxb" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JaxbDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "json" ],
          "properties" : {
            "json" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JsonDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "jsonApi" ],
          "properties" : {
            "jsonApi" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JsonApiDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "lzf" ],
          "properties" : {
            "lzf" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.LZFDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "mimeMultipart" ],
          "properties" : {
            "mimeMultipart" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.MimeMultipartDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "parquetAvro" ],
          "properties" : {
            "parquetAvro" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ParquetAvroDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "pgp" ],
          "properties" : {
            "pgp" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.PGPDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "protobuf" ],
          "properties" : {
            "protobuf" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ProtobufDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "rss" ],
          "properties" : {
            "rss" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.RssDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "smooks" ],
          "properties" : {
            "smooks" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SmooksDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "soap" ],
          "properties" : {
            "soap" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SoapDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "swiftMt" ],
          "properties" : {
            "swiftMt" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SwiftMtDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "swiftMx" ],
          "properties" : {
            "swiftMx" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SwiftMxDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "syslog" ],
          "properties" : {
            "syslog" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SyslogDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "tarFile" ],
          "properties" : {
            "tarFile" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.TarFileDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "thrift" ],
          "properties" : {
            "thrift" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ThriftDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "tidyMarkup" ],
          "properties" : {
            "tidyMarkup" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.TidyMarkupDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "univocityCsv" ],
          "properties" : {
            "univocityCsv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityCsvDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "univocityFixed" ],
          "properties" : {
            "univocityFixed" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityFixedDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "univocityTsv" ],
          "properties" : {
            "univocityTsv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityTsvDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "xmlSecurity" ],
          "properties" : {
            "xmlSecurity" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.XMLSecurityDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "yaml" ],
          "properties" : {
            "yaml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "zipDeflater" ],
          "properties" : {
            "zipDeflater" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ZipDeflaterDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "zipFile" ],
          "properties" : {
            "zipFile" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ZipFileDataFormat"
            }
          }
        } ]
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "variableSend" : {
          "type" : "string",
          "title" : "Variable Send",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
          "$comment" : "group:common"
        },
        "asn1" : { },
        "avro" : { },
        "barcode" : { },
        "base64" : { },
        "beanio" : { },
        "bindy" : { },
        "cbor" : { },
        "crypto" : { },
        "csv" : { },
        "custom" : { },
        "fhirJson" : { },
        "fhirXml" : { },
        "flatpack" : { },
        "fury" : { },
        "grok" : { },
        "gzipDeflater" : { },
        "hl7" : { },
        "ical" : { },
        "jacksonXml" : { },
        "jaxb" : { },
        "json" : { },
        "jsonApi" : { },
        "lzf" : { },
        "mimeMultipart" : { },
        "parquetAvro" : { },
        "pgp" : { },
        "protobuf" : { },
        "rss" : { },
        "smooks" : { },
        "soap" : { },
        "swiftMt" : { },
        "swiftMx" : { },
        "syslog" : { },
        "tarFile" : { },
        "thrift" : { },
        "tidyMarkup" : { },
        "univocityCsv" : { },
        "univocityFixed" : { },
        "univocityTsv" : { },
        "xmlSecurity" : { },
        "yaml" : { },
        "zipDeflater" : { },
        "zipFile" : { }
      },
      "definitions" : {
        "org.zenithblox.model.dataformat.ASN1DataFormat" : {
          "title" : "ASN.1 File",
          "description" : "Encode and decode data structures using Abstract Syntax Notation One (ASN.1).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class to use when unmarshalling.",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the asn1 file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.AvroDataFormat" : {
          "title" : "Avro",
          "description" : "Serialize and deserialize messages using Apache Avro binary data format.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClassName" : {
              "type" : "string",
              "title" : "Instance Class Name",
              "description" : "Class name to use for marshal and unmarshalling",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which Avro library to use.",
              "default" : "avroJackson",
              "enum" : [ "ApacheAvro", "Jackson" ],
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.component.jackson.SchemaResolver"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.BarcodeDataFormat" : {
          "title" : "Barcode",
          "description" : "Transform strings to various 1D/2D barcode bitmap formats and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "barcodeFormat" : {
              "type" : "string",
              "title" : "Barcode Format",
              "description" : "Barcode format such as QR-Code",
              "$comment" : "group:common"
            },
            "imageType" : {
              "type" : "string",
              "title" : "Image Type",
              "description" : "Image type of the barcode such as png",
              "$comment" : "group:common"
            },
            "width" : {
              "type" : "number",
              "title" : "Width",
              "description" : "Width of the barcode",
              "$comment" : "group:common"
            },
            "height" : {
              "type" : "number",
              "title" : "Height",
              "description" : "Height of the barcode",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.Base64DataFormat" : {
          "title" : "Base64",
          "description" : "Encode and decode data using Base64.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "lineLength" : {
              "type" : "number",
              "title" : "Line Length",
              "description" : "To specific a maximum line length for the encoded data. By default 76 is used.",
              "default" : "76",
              "$comment" : "group:common"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separators to use. Uses new line characters (CRLF) by default.",
              "$comment" : "group:advanced"
            },
            "urlSafe" : {
              "type" : "boolean",
              "title" : "Url Safe",
              "description" : "Instead of emitting '' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes. Is by default false.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.BeanioDataFormat" : {
          "title" : "BeanIO",
          "description" : "Marshal and unmarshal Java beans to and from flat files (such as CSV, delimited, or fixed length formats).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "mapping" : {
              "type" : "string",
              "title" : "Mapping",
              "description" : "The BeanIO mapping file. Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file.",
              "$comment" : "group:common"
            },
            "streamName" : {
              "type" : "string",
              "title" : "Stream Name",
              "description" : "The name of the stream to use.",
              "$comment" : "group:common"
            },
            "ignoreUnidentifiedRecords" : {
              "type" : "boolean",
              "title" : "Ignore Unidentified Records",
              "description" : "Whether to ignore unidentified records.",
              "$comment" : "group:common"
            },
            "ignoreUnexpectedRecords" : {
              "type" : "boolean",
              "title" : "Ignore Unexpected Records",
              "description" : "Whether to ignore unexpected records.",
              "$comment" : "group:common"
            },
            "ignoreInvalidRecords" : {
              "type" : "boolean",
              "title" : "Ignore Invalid Records",
              "description" : "Whether to ignore invalid records.",
              "$comment" : "group:common"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "The charset to use. Is by default the JVM platform default charset.",
              "$comment" : "group:advanced"
            },
            "beanReaderErrorHandlerType" : {
              "type" : "string",
              "title" : "Bean Reader Error Handler Type",
              "description" : "To use a custom org.zenithblox.dataformat.beanio.BeanIOErrorHandler as error handler while parsing. Configure the fully qualified class name of the error handler. Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords may not be in use when you use a custom error handler.",
              "$comment" : "group:advanced"
            },
            "unmarshalSingleObject" : {
              "type" : "boolean",
              "title" : "Unmarshal Single Object",
              "description" : "This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter is only intended in special use-cases where beanio maps the Zwangine message to a single POJO bean.",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "mapping", "streamName" ]
        },
        "org.zenithblox.model.dataformat.BindyDataFormat" : {
          "title" : "Bindy",
          "description" : "Marshal and unmarshal Java beans from and to flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to use Csv, Fixed, or KeyValue.",
              "enum" : [ "Csv", "Fixed", "KeyValue" ],
              "$comment" : "group:common"
            },
            "classType" : {
              "type" : "string",
              "title" : "Class Type",
              "description" : "Name of model class to use.",
              "$comment" : "group:common"
            },
            "allowEmptyStream" : {
              "type" : "boolean",
              "title" : "Allow Empty Stream",
              "description" : "Whether to allow empty streams in the unmarshal process. If true, no exception will be thrown when a body without records is provided.",
              "$comment" : "group:common"
            },
            "unwrapSingleInstance" : {
              "type" : "boolean",
              "title" : "Unwrap Single Instance",
              "description" : "When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a java.util.List.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "locale" : {
              "type" : "string",
              "title" : "Locale",
              "description" : "To configure a default locale to use, such as us for united states. To use the JVM platform default locale then use the name default",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "type" ]
        },
        "org.zenithblox.model.dataformat.CBORDataFormat" : {
          "title" : "CBOR",
          "description" : "Unmarshal a CBOR payload to POJO and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson CBOR ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson CBOR is allowed to attempt to use the ZwangineCBORUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.CryptoDataFormat" : {
          "title" : "Crypto (Java Cryptographic Extension)",
          "description" : "Encrypt and decrypt messages using Java Cryptography Extension (JCE).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "algorithm" : {
              "type" : "string",
              "title" : "Algorithm",
              "description" : "The JCE algorithm name indicating the cryptographic algorithm that will be used.",
              "$comment" : "group:common"
            },
            "keyRef" : {
              "type" : "string",
              "title" : "Key Ref",
              "description" : "Refers to the secret key to lookup from the register to use.",
              "$comment" : "group:common"
            },
            "cryptoProvider" : {
              "type" : "string",
              "title" : "Crypto Provider",
              "description" : "The name of the JCE Security Provider that should be used.",
              "$comment" : "group:advanced"
            },
            "initVectorRef" : {
              "type" : "string",
              "title" : "Init Vector Ref",
              "description" : "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher.",
              "$comment" : "group:advanced"
            },
            "algorithmParameterRef" : {
              "type" : "string",
              "title" : "Algorithm Parameter Ref",
              "description" : "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type.",
              "$comment" : "group:advanced"
            },
            "bufferSize" : {
              "type" : "number",
              "title" : "Buffer Size",
              "description" : "The size of the buffer used in the signature process.",
              "default" : "4096",
              "$comment" : "group:common"
            },
            "macAlgorithm" : {
              "type" : "string",
              "title" : "Mac Algorithm",
              "description" : "The JCE algorithm name indicating the Message Authentication algorithm.",
              "default" : "HmacSHA1",
              "$comment" : "group:common"
            },
            "shouldAppendHMAC" : {
              "type" : "boolean",
              "title" : "Should Append HMAC",
              "description" : "Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data.",
              "$comment" : "group:common",
              "default" : true
            },
            "inline" : {
              "type" : "boolean",
              "title" : "Inline",
              "description" : "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.CsvDataFormat" : {
          "title" : "CSV",
          "description" : "Handle CSV (Comma Separated Values) payloads.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "formatRef" : {
              "type" : "string",
              "title" : "Format Ref",
              "description" : "The reference format to use, it will be updated with the other format options, the default value is CSVFormat.DEFAULT",
              "$comment" : "group:advanced"
            },
            "formatName" : {
              "type" : "string",
              "title" : "Format Name",
              "description" : "The name of the format to use, the default value is CSVFormat.DEFAULT",
              "default" : "DEFAULT",
              "enum" : [ "DEFAULT", "EXCEL", "INFORMIX_UNLOAD", "INFORMIX_UNLOAD_CSV", "MYSQL", "RFC4180" ],
              "$comment" : "group:advanced"
            },
            "commentMarkerDisabled" : {
              "type" : "boolean",
              "title" : "Comment Marker Disabled",
              "description" : "Disables the comment marker of the reference format.",
              "$comment" : "group:advanced"
            },
            "commentMarker" : {
              "type" : "string",
              "title" : "Comment Marker",
              "description" : "Sets the comment marker of the reference format.",
              "$comment" : "group:advanced"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "Sets the delimiter to use. The default value is , (comma)",
              "$comment" : "group:common"
            },
            "escapeDisabled" : {
              "type" : "boolean",
              "title" : "Escape Disabled",
              "description" : "Use for disabling using escape character",
              "$comment" : "group:advanced"
            },
            "escape" : {
              "type" : "string",
              "title" : "Escape",
              "description" : "Sets the escape character to use",
              "$comment" : "group:advanced"
            },
            "headerDisabled" : {
              "type" : "boolean",
              "title" : "Header Disabled",
              "description" : "Use for disabling headers",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "To configure the CSV headers",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:common"
            },
            "allowMissingColumnNames" : {
              "type" : "boolean",
              "title" : "Allow Missing Column Names",
              "description" : "Whether to allow missing column names.",
              "$comment" : "group:common"
            },
            "ignoreEmptyLines" : {
              "type" : "boolean",
              "title" : "Ignore Empty Lines",
              "description" : "Whether to ignore empty lines.",
              "$comment" : "group:common"
            },
            "ignoreSurroundingSpaces" : {
              "type" : "boolean",
              "title" : "Ignore Surrounding Spaces",
              "description" : "Whether to ignore surrounding spaces",
              "$comment" : "group:common"
            },
            "nullStringDisabled" : {
              "type" : "boolean",
              "title" : "Null String Disabled",
              "description" : "Used to disable null strings",
              "$comment" : "group:advanced"
            },
            "nullString" : {
              "type" : "string",
              "title" : "Null String",
              "description" : "Sets the null string",
              "$comment" : "group:advanced"
            },
            "quoteDisabled" : {
              "type" : "boolean",
              "title" : "Quote Disabled",
              "description" : "Used to disable quotes",
              "$comment" : "group:common"
            },
            "quote" : {
              "type" : "string",
              "title" : "Quote",
              "description" : "Sets the quote to use which by default is double-quote character",
              "$comment" : "group:common"
            },
            "recordSeparatorDisabled" : {
              "type" : "string",
              "title" : "Record Separator Disabled",
              "description" : "Used for disabling record separator",
              "$comment" : "group:common"
            },
            "recordSeparator" : {
              "type" : "string",
              "title" : "Record Separator",
              "description" : "Sets the record separator (aka new line) which by default is new line characters (CRLF)",
              "$comment" : "group:common"
            },
            "skipHeaderRecord" : {
              "type" : "boolean",
              "title" : "Skip Header Record",
              "description" : "Whether to skip the header record in the output",
              "$comment" : "group:common"
            },
            "quoteMode" : {
              "type" : "string",
              "title" : "Quote Mode",
              "description" : "Sets the quote mode",
              "enum" : [ "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE" ],
              "$comment" : "group:common"
            },
            "ignoreHeaderCase" : {
              "type" : "boolean",
              "title" : "Ignore Header Case",
              "description" : "Sets whether or not to ignore case when accessing header names.",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Sets whether or not to trim leading and trailing blanks.",
              "$comment" : "group:common"
            },
            "trailingDelimiter" : {
              "type" : "boolean",
              "title" : "Trailing Delimiter",
              "description" : "Sets whether or not to add a trailing delimiter.",
              "$comment" : "group:common"
            },
            "marshallerFactoryRef" : {
              "type" : "string",
              "title" : "Marshaller Factory Ref",
              "description" : "Sets the implementation of the CsvMarshallerFactory interface which is able to customize marshalling/unmarshalling behavior by extending CsvMarshaller or creating it from scratch.",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one.",
              "$comment" : "group:advanced"
            },
            "useMaps" : {
              "type" : "boolean",
              "title" : "Use Maps",
              "description" : "Whether the unmarshalling should produce maps (HashMap)for the lines values instead of lists. It requires to have header (either defined or collected).",
              "$comment" : "group:common"
            },
            "useOrderedMaps" : {
              "type" : "boolean",
              "title" : "Use Ordered Maps",
              "description" : "Whether the unmarshalling should produce ordered maps (LinkedHashMap) for the lines values instead of lists. It requires to have header (either defined or collected).",
              "$comment" : "group:common"
            },
            "recordConverterRef" : {
              "type" : "string",
              "title" : "Record Converter Ref",
              "description" : "Refers to a custom CsvRecordConverter to lookup from the registry to use.",
              "$comment" : "group:advanced"
            },
            "captureHeaderRecord" : {
              "type" : "boolean",
              "title" : "Capture Header Record",
              "description" : "Whether the unmarshalling should capture the header record and store it in the message header",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.CustomDataFormat" : {
          "title" : "Custom",
          "description" : "Delegate to a custom org.zenithblox.spi.DataFormat implementation via Zwangine registry.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to the custom org.zenithblox.spi.DataFormat to lookup from the Zwangine registry.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.FhirJsonDataFormat" : {
          "title" : "FHIR JSon",
          "description" : "Marshall and unmarshall FHIR objects to/from JSON.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "fhirVersion" : {
              "type" : "string",
              "title" : "Fhir Version",
              "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
              "default" : "R4",
              "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
              "$comment" : "group:common"
            },
            "fhirContext" : {
              "type" : "string",
              "title" : "Fhir Context",
              "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
              "$comment" : "group:common"
            },
            "parserErrorHandler" : {
              "type" : "string",
              "title" : "Parser Error Handler",
              "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
              "$comment" : "group:advanced"
            },
            "parserOptions" : {
              "type" : "string",
              "title" : "Parser Options",
              "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
              "$comment" : "group:advanced"
            },
            "preferTypes" : {
              "type" : "string",
              "title" : "Prefer Types",
              "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "forceResourceId" : {
              "type" : "string",
              "title" : "Force Resource Id",
              "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
              "$comment" : "group:advanced"
            },
            "serverBaseUrl" : {
              "type" : "string",
              "title" : "Server Base Url",
              "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
              "$comment" : "group:advanced"
            },
            "omitResourceId" : {
              "type" : "boolean",
              "title" : "Omit Resource Id",
              "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
              "$comment" : "group:advanced"
            },
            "encodeElementsAppliesToChildResourcesOnly" : {
              "type" : "boolean",
              "title" : "Encode Elements Applies To Child Resources Only",
              "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
              "$comment" : "group:advanced"
            },
            "encodeElements" : {
              "type" : "string",
              "title" : "Encode Elements",
              "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
              "$comment" : "group:advanced"
            },
            "dontEncodeElements" : {
              "type" : "string",
              "title" : "Dont Encode Elements",
              "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
              "$comment" : "group:advanced"
            },
            "stripVersionsFromReferences" : {
              "type" : "boolean",
              "title" : "Strip Versions From References",
              "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
              "$comment" : "group:advanced"
            },
            "overrideResourceIdWithBundleEntryFullUrl" : {
              "type" : "boolean",
              "title" : "Override Resource Id With Bundle Entry Full Url",
              "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
              "$comment" : "group:advanced"
            },
            "summaryMode" : {
              "type" : "boolean",
              "title" : "Summary Mode",
              "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
              "$comment" : "group:advanced"
            },
            "suppressNarratives" : {
              "type" : "boolean",
              "title" : "Suppress Narratives",
              "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
              "$comment" : "group:advanced"
            },
            "dontStripVersionsFromReferencesAtPaths" : {
              "type" : "string",
              "title" : "Dont Strip Versions From References At Paths",
              "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.FhirXmlDataFormat" : {
          "title" : "FHIR XML",
          "description" : "Marshall and unmarshall FHIR objects to/from XML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "fhirVersion" : {
              "type" : "string",
              "title" : "Fhir Version",
              "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
              "default" : "R4",
              "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
              "$comment" : "group:common"
            },
            "fhirContext" : {
              "type" : "string",
              "title" : "Fhir Context",
              "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
              "$comment" : "group:common"
            },
            "parserErrorHandler" : {
              "type" : "string",
              "title" : "Parser Error Handler",
              "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
              "$comment" : "group:advanced"
            },
            "parserOptions" : {
              "type" : "string",
              "title" : "Parser Options",
              "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
              "$comment" : "group:advanced"
            },
            "preferTypes" : {
              "type" : "string",
              "title" : "Prefer Types",
              "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "forceResourceId" : {
              "type" : "string",
              "title" : "Force Resource Id",
              "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
              "$comment" : "group:advanced"
            },
            "serverBaseUrl" : {
              "type" : "string",
              "title" : "Server Base Url",
              "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
              "$comment" : "group:advanced"
            },
            "omitResourceId" : {
              "type" : "boolean",
              "title" : "Omit Resource Id",
              "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
              "$comment" : "group:advanced"
            },
            "encodeElementsAppliesToChildResourcesOnly" : {
              "type" : "boolean",
              "title" : "Encode Elements Applies To Child Resources Only",
              "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
              "$comment" : "group:advanced"
            },
            "encodeElements" : {
              "type" : "string",
              "title" : "Encode Elements",
              "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
              "$comment" : "group:advanced"
            },
            "dontEncodeElements" : {
              "type" : "string",
              "title" : "Dont Encode Elements",
              "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
              "$comment" : "group:advanced"
            },
            "stripVersionsFromReferences" : {
              "type" : "boolean",
              "title" : "Strip Versions From References",
              "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
              "$comment" : "group:advanced"
            },
            "overrideResourceIdWithBundleEntryFullUrl" : {
              "type" : "boolean",
              "title" : "Override Resource Id With Bundle Entry Full Url",
              "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
              "$comment" : "group:advanced"
            },
            "summaryMode" : {
              "type" : "boolean",
              "title" : "Summary Mode",
              "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
              "$comment" : "group:advanced"
            },
            "suppressNarratives" : {
              "type" : "boolean",
              "title" : "Suppress Narratives",
              "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
              "$comment" : "group:advanced"
            },
            "dontStripVersionsFromReferencesAtPaths" : {
              "type" : "string",
              "title" : "Dont Strip Versions From References At Paths",
              "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.FlatpackDataFormat" : {
          "title" : "Flatpack",
          "description" : "Marshal and unmarshal Java lists and maps to/from flat files (such as CSV, delimited, or fixed length formats) using Flatpack library.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "definition" : {
              "type" : "string",
              "title" : "Definition",
              "description" : "The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap.",
              "$comment" : "group:common"
            },
            "fixed" : {
              "type" : "boolean",
              "title" : "Fixed",
              "description" : "Delimited or fixed. Is by default false = delimited",
              "$comment" : "group:common"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "The delimiter char (could be ; , or similar)",
              "default" : ",",
              "$comment" : "group:common"
            },
            "ignoreFirstRecord" : {
              "type" : "boolean",
              "title" : "Ignore First Record",
              "description" : "Whether the first line is ignored for delimited files (for the column headers). Is by default true.",
              "$comment" : "group:common",
              "default" : true
            },
            "allowShortLines" : {
              "type" : "boolean",
              "title" : "Allow Short Lines",
              "description" : "Allows for lines to be shorter than expected and ignores the extra characters",
              "$comment" : "group:common"
            },
            "ignoreExtraColumns" : {
              "type" : "boolean",
              "title" : "Ignore Extra Columns",
              "description" : "Allows for lines to be longer than expected and ignores the extra characters.",
              "$comment" : "group:common"
            },
            "textQualifier" : {
              "type" : "string",
              "title" : "Text Qualifier",
              "description" : "If the text is qualified with a character. Uses quote character by default.",
              "$comment" : "group:advanced"
            },
            "parserFactoryRef" : {
              "type" : "string",
              "title" : "Parser Factory Ref",
              "description" : "References to a custom parser factory to lookup in the registry",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.FuryDataFormat" : {
          "title" : "Fury",
          "description" : "Serialize and deserialize messages using Apache Fury",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "requireClassRegistration" : {
              "type" : "boolean",
              "title" : "Require Class Registration",
              "description" : "Whether to require register classes",
              "$comment" : "group:advanced",
              "default" : true
            },
            "threadSafe" : {
              "type" : "boolean",
              "title" : "Thread Safe",
              "description" : "Whether to use the threadsafe fury",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowAutoWiredFury" : {
              "type" : "boolean",
              "title" : "Allow Auto Wired Fury",
              "description" : "Whether to auto-discover Fury from the registry",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.GrokDataFormat" : {
          "title" : "Grok",
          "description" : "Unmarshal unstructured data to objects using Logstash based Grok patterns.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "pattern" : {
              "type" : "string",
              "title" : "Pattern",
              "description" : "The grok pattern to match lines of input",
              "$comment" : "group:common"
            },
            "flattened" : {
              "type" : "boolean",
              "title" : "Flattened",
              "description" : "Turns on flattened mode. In flattened mode the exception is thrown when there are multiple pattern matches with same key.",
              "$comment" : "group:common"
            },
            "allowMultipleMatchesPerLine" : {
              "type" : "boolean",
              "title" : "Allow Multiple Matches Per Line",
              "description" : "If false, every line of input is matched for pattern only once. Otherwise the line can be scanned multiple times when non-terminal pattern is used.",
              "$comment" : "group:common",
              "default" : true
            },
            "namedOnly" : {
              "type" : "boolean",
              "title" : "Named Only",
              "description" : "Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})",
              "$comment" : "group:common"
            }
          },
          "required" : [ "pattern" ]
        },
        "org.zenithblox.model.dataformat.GzipDeflaterDataFormat" : {
          "title" : "GZip Deflater",
          "description" : "Compress and decompress messages using java.util.zip.GZIPStream.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.HL7DataFormat" : {
          "title" : "HL7",
          "description" : "Marshal and unmarshal HL7 (Health Care) model objects using the HL7 MLLP codec.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the HL7 message Is by default true.",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.IcalDataFormat" : {
          "title" : "iCal",
          "description" : "Marshal and unmarshal iCal (.ics) documents to/from model objects.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "validating" : {
              "type" : "boolean",
              "title" : "Validating",
              "description" : "Whether to validate.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.JacksonXMLDataFormat" : {
          "title" : "Jackson XML",
          "description" : "Unmarshal an XML payloads to POJOs and back using XMLMapper extension of Jackson.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "xmlMapper" : {
              "type" : "string",
              "title" : "Xml Mapper",
              "description" : "Lookup and use the existing XmlMapper with the given id.",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "enableJaxbAnnotationModule" : {
              "type" : "boolean",
              "title" : "Enable Jaxb Annotation Module",
              "description" : "Whether to enable the JAXB annotations module when using jackson. When enabled then JAXB annotations can be used by Jackson.",
              "$comment" : "group:advanced"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.JaxbDataFormat" : {
          "title" : "JAXB",
          "description" : "Unmarshal XML payloads to POJOs and back using JAXB2 XML marshalling standard.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "contextPath" : {
              "type" : "string",
              "title" : "Context Path",
              "description" : "Package name where your JAXB classes are located.",
              "$comment" : "group:common"
            },
            "contextPathIsClassName" : {
              "type" : "boolean",
              "title" : "Context Path Is Class Name",
              "description" : "This can be set to true to mark that the contextPath is referring to a classname and not a package name.",
              "$comment" : "group:common"
            },
            "schema" : {
              "type" : "string",
              "title" : "Schema",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "$comment" : "group:common"
            },
            "schemaSeverityLevel" : {
              "type" : "string",
              "title" : "Schema Severity Level",
              "description" : "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error.",
              "default" : "0",
              "enum" : [ "0", "1", "2" ],
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common",
              "default" : true
            },
            "objectFactory" : {
              "type" : "boolean",
              "title" : "Object Factory",
              "description" : "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "ignoreJAXBElement" : {
              "type" : "boolean",
              "title" : "Ignore JAXBElement",
              "description" : "Whether to ignore JAXBElement elements - only needed to be set to false in very special use-cases.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "mustBeJAXBElement" : {
              "type" : "boolean",
              "title" : "Must Be JAXBElement",
              "description" : "Whether marhsalling must be java objects with JAXB annotations. And if not then it fails. This option can be set to false to relax that, such as when the data is already in XML format.",
              "$comment" : "group:advanced"
            },
            "filterNonXmlChars" : {
              "type" : "boolean",
              "title" : "Filter Non Xml Chars",
              "description" : "To ignore non xml characheters and replace them with an empty space.",
              "$comment" : "group:advanced"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "To overrule and use a specific encoding",
              "$comment" : "group:common"
            },
            "fragment" : {
              "type" : "boolean",
              "title" : "Fragment",
              "description" : "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Zwangine will pass this class to JAXB's unmarshaler.",
              "$comment" : "group:advanced"
            },
            "partClass" : {
              "type" : "string",
              "title" : "Part Class",
              "description" : "Name of class used for fragment parsing. See more details at the fragment option.",
              "$comment" : "group:advanced"
            },
            "partNamespace" : {
              "type" : "string",
              "title" : "Part Namespace",
              "description" : "XML namespace to use for fragment parsing. See more details at the fragment option.",
              "$comment" : "group:advanced"
            },
            "namespacePrefixRef" : {
              "type" : "string",
              "title" : "Namespace Prefix Ref",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping.",
              "$comment" : "group:advanced"
            },
            "xmlStreamWriterWrapper" : {
              "type" : "string",
              "title" : "Xml Stream Writer Wrapper",
              "description" : "To use a custom xml stream writer.",
              "$comment" : "group:advanced"
            },
            "schemaLocation" : {
              "type" : "string",
              "title" : "Schema Location",
              "description" : "To define the location of the schema",
              "$comment" : "group:common"
            },
            "noNamespaceSchemaLocation" : {
              "type" : "string",
              "title" : "No Namespace Schema Location",
              "description" : "To define the location of the namespaceless schema",
              "$comment" : "group:advanced"
            },
            "jaxbProviderProperties" : {
              "type" : "string",
              "title" : "Jaxb Provider Properties",
              "description" : "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller.",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "accessExternalSchemaProtocols" : {
              "type" : "string",
              "title" : "Access External Schema Protocols",
              "description" : "Only in use if schema validation has been enabled. Restrict access to the protocols specified for external reference set by the schemaLocation attribute, Import and Include element. Examples of protocols are file, http, jar:file. false or none to deny all access to external references; a specific protocol, such as file, to give permission to only the protocol; the keyword all to grant permission to all protocols.",
              "default" : "false",
              "$comment" : "group:security"
            }
          },
          "required" : [ "contextPath" ]
        },
        "org.zenithblox.model.dataformat.JsonDataFormat" : {
          "title" : "JSon",
          "description" : "Marshal POJOs to JSON and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:common"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will look for an objectMapper to use from the registry",
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which json library to use.",
              "default" : "Jackson",
              "enum" : [ "Fastjson", "Gson", "Jackson", "Johnzon", "Jsonb" ],
              "$comment" : "group:common"
            },
            "combineUnicodeSurrogates" : {
              "type" : "boolean",
              "title" : "Combine Unicode Surrogates",
              "description" : "Force generator that outputs JSON content to combine surrogate pairs (if any) into 4-byte characters. This should be preferred when using 4-byte characters such as Japanese.",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:advanced"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:advanced"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows using different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:advanced"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:advanced"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling. This option will have no effect on the others Json DataFormat, like gson and fastjson.",
              "$comment" : "group:advanced"
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.component.jackson.SchemaResolver"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namingStrategy" : {
              "type" : "string",
              "title" : "Naming Strategy",
              "description" : "If set then Jackson will use the the defined Property Naming Strategy.Possible values are: LOWER_CAMEL_CASE, LOWER_DOT_CASE, LOWER_CASE, KEBAB_CASE, SNAKE_CASE and UPPER_CAMEL_CASE",
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "dateFormatPattern" : {
              "type" : "string",
              "title" : "Date Format Pattern",
              "description" : "To configure the date format while marshall or unmarshall Date fields in JSON using Gson",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.JsonApiDataFormat" : {
          "title" : "JSonApi",
          "description" : "Marshal and unmarshal JSON:API resources using JSONAPI-Converter library.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "dataFormatTypes" : {
              "type" : "string",
              "title" : "Data Format Types",
              "description" : "The classes to take into account for the marshalling. Multiple classes can be separated by comma.",
              "$comment" : "group:common"
            },
            "mainFormatType" : {
              "type" : "string",
              "title" : "Main Format Type",
              "description" : "The class to take into account while unmarshalling.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.LZFDataFormat" : {
          "title" : "LZF Deflate Compression",
          "description" : "Compress and decompress streams using LZF deflate algorithm.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingParallelCompression" : {
              "type" : "boolean",
              "title" : "Using Parallel Compression",
              "description" : "Enable encoding (compress) using multiple processing cores.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.MimeMultipartDataFormat" : {
          "title" : "MIME Multipart",
          "description" : "Marshal Zwangine messages with attachments into MIME-Multipart messages and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "multipartSubType" : {
              "type" : "string",
              "title" : "Multipart Sub Type",
              "description" : "Specify the subtype of the MIME Multipart. Default is mixed.",
              "default" : "mixed",
              "$comment" : "group:common"
            },
            "multipartWithoutAttachment" : {
              "type" : "boolean",
              "title" : "Multipart Without Attachment",
              "description" : "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false.",
              "$comment" : "group:common"
            },
            "headersInline" : {
              "type" : "boolean",
              "title" : "Headers Inline",
              "description" : "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Zwangine headers (false). Default is false.",
              "$comment" : "group:common"
            },
            "includeHeaders" : {
              "type" : "string",
              "title" : "Include Headers",
              "description" : "A regex that defines which Zwangine headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers",
              "$comment" : "group:common"
            },
            "binaryContent" : {
              "type" : "boolean",
              "title" : "Binary Content",
              "description" : "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ParquetAvroDataFormat" : {
          "title" : "Parquet File",
          "description" : "Parquet Avro serialization and de-serialization.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "compressionCodecName" : {
              "type" : "string",
              "title" : "Compression Codec Name",
              "description" : "Compression codec to use when marshalling.",
              "default" : "GZIP",
              "enum" : [ "UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD", "LZ4_RAW" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class to use when (un)marshalling. If omitted, parquet files are converted into Avro's GenericRecords for unmarshalling and input objects are assumed as GenericRecords for marshalling.",
              "$comment" : "group:common"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator of records or read all the records at once.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.PGPDataFormat" : {
          "title" : "PGP",
          "description" : "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "keyUserid" : {
              "type" : "string",
              "title" : "Key Userid",
              "description" : "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID.",
              "$comment" : "group:common"
            },
            "signatureKeyUserid" : {
              "type" : "string",
              "title" : "Signature Key Userid",
              "description" : "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID.",
              "$comment" : "group:common"
            },
            "password" : {
              "type" : "string",
              "title" : "Password",
              "description" : "Password used when opening the private key (not used for encryption).",
              "$comment" : "group:common"
            },
            "signaturePassword" : {
              "type" : "string",
              "title" : "Signature Password",
              "description" : "Password used when opening the private key used for signing (during encryption).",
              "$comment" : "group:common"
            },
            "keyFileName" : {
              "type" : "string",
              "title" : "Key File Name",
              "description" : "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
              "$comment" : "group:common"
            },
            "signatureKeyFileName" : {
              "type" : "string",
              "title" : "Signature Key File Name",
              "description" : "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
              "$comment" : "group:common"
            },
            "signatureKeyRing" : {
              "type" : "string",
              "title" : "Signature Key Ring",
              "description" : "Keyring used for signing/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time.",
              "$comment" : "group:common"
            },
            "armored" : {
              "type" : "boolean",
              "title" : "Armored",
              "description" : "This option will cause PGP to base64 encode the encrypted text, making it available for copy/paste, etc.",
              "$comment" : "group:common"
            },
            "integrity" : {
              "type" : "boolean",
              "title" : "Integrity",
              "description" : "Adds an integrity check/sign into the encryption file. The default value is true.",
              "$comment" : "group:common",
              "default" : true
            },
            "provider" : {
              "type" : "string",
              "title" : "Provider",
              "description" : "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work.",
              "$comment" : "group:common"
            },
            "algorithm" : {
              "type" : "number",
              "title" : "Algorithm",
              "description" : "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting.",
              "$comment" : "group:common"
            },
            "compressionAlgorithm" : {
              "type" : "number",
              "title" : "Compression Algorithm",
              "description" : "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting.",
              "$comment" : "group:common"
            },
            "hashAlgorithm" : {
              "type" : "number",
              "title" : "Hash Algorithm",
              "description" : "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing.",
              "$comment" : "group:common"
            },
            "signatureVerificationOption" : {
              "type" : "string",
              "title" : "Signature Verification Option",
              "description" : "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ProtobufDataFormat" : {
          "title" : "Protobuf",
          "description" : "Serialize and deserialize Java objects using Google's Protocol buffers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClass" : {
              "type" : "string",
              "title" : "Instance Class",
              "description" : "Name of class to use when unmarshalling",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which Protobuf library to use.",
              "default" : "GoogleProtobuf",
              "enum" : [ "GoogleProtobuf", "Jackson" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:common"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            },
            "contentTypeFormat" : {
              "type" : "string",
              "title" : "Content Type Format",
              "description" : "Defines a content type format in which protobuf message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native protobuf or json fields representation. The default value is native.",
              "default" : "native",
              "enum" : [ "native", "json" ],
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.RssDataFormat" : {
          "title" : "RSS",
          "description" : "Transform from ROME SyndFeed Java Objects to XML and vice-versa.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.SmooksDataFormat" : {
          "title" : "Smooks",
          "description" : "Transform and bind XML as well as non-XML data, including EDI, CSV, JSON, and YAML using Smooks.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "smooksConfig" : {
              "type" : "string",
              "title" : "Smooks Config",
              "description" : "Path to the Smooks configuration file.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "smooksConfig" ]
        },
        "org.zenithblox.model.dataformat.SoapDataFormat" : {
          "title" : "SOAP",
          "description" : "Marshal Java objects to SOAP messages and back.",
          "required" : [ "contextPath" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "contextPath" : {
              "type" : "string",
              "title" : "Context Path",
              "description" : "Package name where your JAXB classes are located.",
              "$comment" : "group:common"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "To overrule and use a specific encoding",
              "$comment" : "group:common"
            },
            "elementNameStrategyRef" : {
              "type" : "string",
              "title" : "Element Name Strategy Ref",
              "description" : "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.zenithblox.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.",
              "$comment" : "group:advanced"
            },
            "version" : {
              "type" : "string",
              "title" : "Version",
              "description" : "SOAP version should either be 1.1 or 1.2. Is by default 1.1",
              "default" : "1.1",
              "enum" : [ "1.1", "1.2" ],
              "$comment" : "group:common"
            },
            "namespacePrefixRef" : {
              "type" : "string",
              "title" : "Namespace Prefix Ref",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping.",
              "$comment" : "group:advanced"
            },
            "schema" : {
              "type" : "string",
              "title" : "Schema",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.SwiftMtDataFormat" : {
          "title" : "SWIFT MT",
          "description" : "Encode and decode SWIFT MT messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "writeInJson" : {
              "type" : "boolean",
              "title" : "Write In Json",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.SwiftMxDataFormat" : {
          "title" : "SWIFT MX",
          "description" : "Encode and decode SWIFT MX messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "writeConfigRef" : {
              "type" : "string",
              "title" : "Write Config Ref",
              "description" : "Refers to a specific configuration to use when marshalling a message to lookup from the registry.",
              "$comment" : "group:advanced"
            },
            "writeInJson" : {
              "type" : "boolean",
              "title" : "Write In Json",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "$comment" : "group:advanced"
            },
            "readMessageId" : {
              "type" : "string",
              "title" : "Read Message Id",
              "description" : "The type of MX message to produce when unmarshalling an input stream. If not set, it will be automatically detected from the namespace used.",
              "$comment" : "group:advanced"
            },
            "readConfigRef" : {
              "type" : "string",
              "title" : "Read Config Ref",
              "description" : "Refers to a specific configuration to use when unmarshalling an input stream to lookup from the registry.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.SyslogDataFormat" : {
          "title" : "Syslog",
          "description" : "Marshall SyslogMessages to RFC3164 and RFC5424 messages and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.TarFileDataFormat" : {
          "title" : "Tar File",
          "description" : "Archive files into tarballs or extract files from tarballs.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the tar file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            },
            "allowEmptyDirectory" : {
              "type" : "boolean",
              "title" : "Allow Empty Directory",
              "description" : "If the tar file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
              "$comment" : "group:common"
            },
            "preservePathElements" : {
              "type" : "boolean",
              "title" : "Preserve Path Elements",
              "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the tar file.",
              "$comment" : "group:common"
            },
            "maxDecompressedSize" : {
              "type" : "number",
              "title" : "Max Decompressed Size",
              "description" : "Set the maximum decompressed size of a tar file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
              "default" : "1073741824",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.ThriftDataFormat" : {
          "title" : "Thrift",
          "description" : "Serialize and deserialize messages using Apache Thrift binary data format.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClass" : {
              "type" : "string",
              "title" : "Instance Class",
              "description" : "Name of class to use when unmarshalling",
              "$comment" : "group:common"
            },
            "contentTypeFormat" : {
              "type" : "string",
              "title" : "Content Type Format",
              "description" : "Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native binary thrift, json or simple json fields representation. The default value is binary.",
              "default" : "binary",
              "enum" : [ "binary", "json", "sjson" ],
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.TidyMarkupDataFormat" : {
          "title" : "TidyMarkup",
          "description" : "Parse (potentially invalid) HTML into valid HTML or DOM.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "dataObjectType" : {
              "type" : "string",
              "title" : "Data Object Type",
              "description" : "What data type to unmarshal as, can either be org.w3c.dom.Node or java.lang.String. Is by default org.w3c.dom.Node",
              "default" : "org.w3c.dom.Node",
              "enum" : [ "org.w3c.dom.Node", "java.lang.String" ],
              "$comment" : "group:common"
            },
            "omitXmlDeclaration" : {
              "type" : "boolean",
              "title" : "Omit Xml Declaration",
              "description" : "When returning a String, do we omit the XML declaration in the top.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityCsvDataFormat" : {
          "title" : "uniVocity CSV",
          "description" : "Marshal and unmarshal Java objects from and to CSV (Comma Separated Values) using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "The delimiter of values",
              "default" : ",",
              "$comment" : "group:common"
            },
            "quoteAllFields" : {
              "type" : "boolean",
              "title" : "Quote All Fields",
              "description" : "Whether or not all values must be quoted when writing them.",
              "$comment" : "group:common"
            },
            "quote" : {
              "type" : "string",
              "title" : "Quote",
              "description" : "The quote symbol.",
              "default" : "\"",
              "$comment" : "group:advanced"
            },
            "quoteEscape" : {
              "type" : "string",
              "title" : "Quote Escape",
              "description" : "The quote escape symbol",
              "default" : "\"",
              "$comment" : "group:advanced"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityHeader" : {
          "title" : "uniVocity Header",
          "description" : "To configure headers for UniVocity data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Header name",
              "$comment" : "group:common"
            },
            "length" : {
              "type" : "string",
              "title" : "Length",
              "description" : "Header length",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.dataformat.UniVocityFixedDataFormat" : {
          "title" : "uniVocity Fixed Length",
          "description" : "Marshal and unmarshal Java objects from and to fixed length records using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "padding" : {
              "type" : "string",
              "title" : "Padding",
              "description" : "The padding character. The default value is a space",
              "$comment" : "group:common"
            },
            "skipTrailingCharsUntilNewline" : {
              "type" : "boolean",
              "title" : "Skip Trailing Chars Until Newline",
              "description" : "Whether or not the trailing characters until new line must be ignored. The default value is false",
              "$comment" : "group:common"
            },
            "recordEndsOnNewline" : {
              "type" : "boolean",
              "title" : "Record Ends On Newline",
              "description" : "Whether or not the record ends on new line. The default value is false",
              "$comment" : "group:common"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityTsvDataFormat" : {
          "title" : "uniVocity TSV",
          "description" : "Marshal and unmarshal Java objects from and to TSV (Tab-Separated Values) records using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "escapeChar" : {
              "type" : "string",
              "title" : "Escape Char",
              "description" : "The escape character.",
              "default" : "\\",
              "$comment" : "group:advanced"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.XMLSecurityDataFormat" : {
          "title" : "XML Security",
          "description" : "Encrypt and decrypt XML payloads using Apache Santuario.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "xmlCipherAlgorithm" : {
              "type" : "string",
              "title" : "Xml Cipher Algorithm",
              "description" : "The cipher algorithm to be used for encryption/decryption of the XML message content. The available choices are: XMLCipher.TRIPLEDES XMLCipher.AES_128 XMLCipher.AES_128_GCM XMLCipher.AES_192 XMLCipher.AES_192_GCM XMLCipher.AES_256 XMLCipher.AES_256_GCM XMLCipher.SEED_128 XMLCipher.CAMELLIA_128 XMLCipher.CAMELLIA_192 XMLCipher.CAMELLIA_256 The default value is XMLCipher.AES_256_GCM",
              "default" : "AES-256-GCM",
              "enum" : [ "TRIPLEDES", "AES_128", "AES_128_GCM", "AES_192", "AES_192_GCM", "AES_256", "AES_256_GCM", "SEED_128", "CAMELLIA_128", "CAMELLIA_192", "CAMELLIA_256" ],
              "$comment" : "group:common"
            },
            "passPhrase" : {
              "type" : "string",
              "title" : "Pass Phrase",
              "description" : "A String used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
              "$comment" : "group:common"
            },
            "passPhraseByte" : {
              "type" : "string",
              "title" : "Pass Phrase Byte",
              "description" : "A byte used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
              "format" : "binary",
              "$comment" : "group:advanced"
            },
            "secureTag" : {
              "type" : "string",
              "title" : "Secure Tag",
              "description" : "The XPath reference to the XML Element selected for encryption/decryption. If no tag is specified, the entire payload is encrypted/decrypted.",
              "$comment" : "group:common"
            },
            "secureTagContents" : {
              "type" : "boolean",
              "title" : "Secure Tag Contents",
              "description" : "A boolean value to specify whether the XML Element is to be encrypted or the contents of the XML Element. false = Element Level. true = Element Content Level.",
              "$comment" : "group:common"
            },
            "keyCipherAlgorithm" : {
              "type" : "string",
              "title" : "Key Cipher Algorithm",
              "description" : "The cipher algorithm to be used for encryption/decryption of the asymmetric key. The available choices are: XMLCipher.RSA_v1dot5 XMLCipher.RSA_OAEP XMLCipher.RSA_OAEP_11 The default value is XMLCipher.RSA_OAEP",
              "default" : "RSA_OAEP",
              "enum" : [ "RSA_v1dot5", "RSA_OAEP", "RSA_OAEP_11" ],
              "$comment" : "group:common"
            },
            "recipientKeyAlias" : {
              "type" : "string",
              "title" : "Recipient Key Alias",
              "description" : "The key alias to be used when retrieving the recipient's public or private key from a KeyStore when performing asymmetric key encryption or decryption.",
              "$comment" : "group:common"
            },
            "keyOrTrustStoreParametersRef" : {
              "type" : "string",
              "title" : "Key Or Trust Store Parameters Ref",
              "description" : "Refers to a KeyStore instance to lookup in the registry, which is used for configuration options for creating and loading a KeyStore instance that represents the sender's trustStore or recipient's keyStore.",
              "$comment" : "group:common"
            },
            "keyPassword" : {
              "type" : "string",
              "title" : "Key Password",
              "description" : "The password to be used for retrieving the private key from the KeyStore. This key is used for asymmetric decryption.",
              "$comment" : "group:common"
            },
            "digestAlgorithm" : {
              "type" : "string",
              "title" : "Digest Algorithm",
              "description" : "The digest algorithm to use with the RSA OAEP algorithm. The available choices are: XMLCipher.SHA1 XMLCipher.SHA256 XMLCipher.SHA512 The default value is XMLCipher.SHA1",
              "default" : "SHA1",
              "enum" : [ "SHA1", "SHA256", "SHA512" ],
              "$comment" : "group:common"
            },
            "mgfAlgorithm" : {
              "type" : "string",
              "title" : "Mgf Algorithm",
              "description" : "The MGF Algorithm to use with the RSA OAEP algorithm. The available choices are: EncryptionConstants.MGF1_SHA1 EncryptionConstants.MGF1_SHA256 EncryptionConstants.MGF1_SHA512 The default value is EncryptionConstants.MGF1_SHA1",
              "default" : "MGF1_SHA1",
              "enum" : [ "MGF1_SHA1", "MGF1_SHA256", "MGF1_SHA512" ],
              "$comment" : "group:common"
            },
            "addKeyValueForEncryptedKey" : {
              "type" : "boolean",
              "title" : "Add Key Value For Encrypted Key",
              "description" : "Whether to add the public key used to encrypt the session key as a KeyValue in the EncryptedKey structure or not.",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.YAMLDataFormat" : {
          "title" : "YAML",
          "description" : "Marshal and unmarshal Java objects to and from YAML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which yaml library to use. By default it is SnakeYAML",
              "default" : "SnakeYAML",
              "enum" : [ "SnakeYAML" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "constructor" : {
              "type" : "string",
              "title" : "Constructor",
              "description" : "BaseConstructor to construct incoming documents.",
              "$comment" : "group:advanced"
            },
            "representer" : {
              "type" : "string",
              "title" : "Representer",
              "description" : "Representer to emit outgoing objects.",
              "$comment" : "group:advanced"
            },
            "dumperOptions" : {
              "type" : "string",
              "title" : "Dumper Options",
              "description" : "DumperOptions to configure outgoing objects.",
              "$comment" : "group:advanced"
            },
            "resolver" : {
              "type" : "string",
              "title" : "Resolver",
              "description" : "Resolver to detect implicit type",
              "$comment" : "group:advanced"
            },
            "useApplicationContextClassLoader" : {
              "type" : "boolean",
              "title" : "Use Application Context Class Loader",
              "description" : "Use ApplicationContextClassLoader as custom ClassLoader",
              "$comment" : "group:common",
              "default" : true
            },
            "prettyFlow" : {
              "type" : "boolean",
              "title" : "Pretty Flow",
              "description" : "Force the emitter to produce a pretty YAML document when using the flow style.",
              "$comment" : "group:common"
            },
            "allowAnyType" : {
              "type" : "boolean",
              "title" : "Allow Any Type",
              "description" : "Allow any class to be un-marshaled",
              "$comment" : "group:common"
            },
            "typeFilter" : {
              "type" : "array",
              "title" : "Type Filter",
              "description" : "Set the types SnakeYAML is allowed to un-marshall",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLTypeFilterDefinition"
              },
              "$comment" : "group:common"
            },
            "maxAliasesForCollections" : {
              "type" : "number",
              "title" : "Max Aliases For Collections",
              "description" : "Set the maximum amount of aliases allowed for collections.",
              "default" : "50",
              "$comment" : "group:advanced"
            },
            "allowRecursiveKeys" : {
              "type" : "boolean",
              "title" : "Allow Recursive Keys",
              "description" : "Set whether recursive keys are allowed.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.YAMLTypeFilterDefinition" : {
          "title" : "YAML Type Filter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Value of type such as class name or regular expression",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to filter by class type or regular expression",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.model.dataformat.YAMLTypeFilterType"
            }
          }
        },
        "org.zenithblox.model.dataformat.ZipDeflaterDataFormat" : {
          "title" : "Zip Deflater",
          "description" : "Compress and decompress streams using java.util.zip.Deflater and java.util.zip.Inflater.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "compressionLevel" : {
              "type" : "string",
              "title" : "Compression Level",
              "description" : "To specify a specific compression between 0-9. -1 is default compression, 0 is no compression, and 9 is the best compression.",
              "default" : "-1",
              "enum" : [ "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ],
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ZipFileDataFormat" : {
          "title" : "Zip File",
          "description" : "Compression and decompress streams using java.util.zip.ZipStream.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the zip file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            },
            "allowEmptyDirectory" : {
              "type" : "boolean",
              "title" : "Allow Empty Directory",
              "description" : "If the zip file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
              "$comment" : "group:common"
            },
            "preservePathElements" : {
              "type" : "boolean",
              "title" : "Preserve Path Elements",
              "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file.",
              "$comment" : "group:common"
            },
            "maxDecompressedSize" : {
              "type" : "number",
              "title" : "Max Decompressed Size",
              "description" : "Set the maximum decompressed size of a zip file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
              "default" : "1073741824",
              "$comment" : "group:advanced"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "multicast" : {
    "model" : {
      "kind" : "model",
      "name" : "multicast",
      "title" : "Multicast",
      "description" : "Routes the same message to multiple paths either sequentially or in parallel.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.MulticastDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "aggregationStrategy" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to an AggregationStrategy to be used to assemble the replies from the multicasts, into a single outgoing message from the Multicast. By default Zwangine will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy"
      },
      "aggregationStrategyMethodName" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy."
      },
      "aggregationStrategyMethodAllowNull" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Allow Null",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy"
      },
      "parallelAggregate" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Parallel Aggregate",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : true,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Zwangine synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe."
      },
      "parallelProcessing" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Parallel Processing",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then sending messages to the multicasts occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. Its only the sending and processing the replies from the multicasts which happens concurrently. When parallel processing is enabled, then the Zwangine routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the multicast, then make sure to enable the synchronous option as well."
      },
      "synchronous" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Synchronous",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the multicast is complete, even if parallel processing is enabled."
      },
      "streaming" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Streaming",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Zwangine will process replies out-of-order, eg in the order they come back. If disabled, Zwangine will process replies in the same order as defined by the multicast."
      },
      "stopOnException" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Stop On Exception",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.zenithblox.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the multicast will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end"
      },
      "timeout" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Timeout",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "0",
        "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Multicast hasn't been able to send and process all replies within the given timeframe, then the timeout triggers and the Multicast breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Zwangine to shut down in a graceful manner may continue to run. So use this option with a bit of care."
      },
      "executorService" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well."
      },
      "onPrepare" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "On Prepare",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.Processor",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be send. This can be used to deep-clone messages that should be send, or any custom logic needed before the exchange is send."
      },
      "shareUnitOfWork" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Share Unit Of Work",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and each of the sub messages. Multicast will by default not share unit of work between the parent exchange and each multicasted exchange. This means each sub exchange has its own individual unit of work."
      },
      "outputs" : {
        "index" : 15,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineMulticastIndex" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Multicast Index",
        "label" : "producer",
        "required" : false,
        "javaType" : "int",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "An index counter that increases for each Exchange being multicasted. The counter starts from 0."
      },
      "ZwangineMulticastComplete" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Multicast Complete",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether this Exchange is the last."
      },
      "ZwangineToEndpoint" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "Multicast",
      "description" : "Routes the same message to multiple paths either sequentially or in parallel.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "Refers to an AggregationStrategy to be used to assemble the replies from the multicasts, into a single outgoing message from the Multicast. By default Zwangine will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategyMethodAllowNull" : {
          "type" : "boolean",
          "title" : "Aggregation Strategy Method Allow Null",
          "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy",
          "$comment" : "group:advanced"
        },
        "parallelAggregate" : {
          "type" : "boolean",
          "title" : "Parallel Aggregate",
          "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Zwangine synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe.",
          "deprecated" : true,
          "$comment" : "group:advanced"
        },
        "parallelProcessing" : {
          "type" : "boolean",
          "title" : "Parallel Processing",
          "description" : "If enabled then sending messages to the multicasts occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. Its only the sending and processing the replies from the multicasts which happens concurrently. When parallel processing is enabled, then the Zwangine routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the multicast, then make sure to enable the synchronous option as well.",
          "$comment" : "group:common"
        },
        "synchronous" : {
          "type" : "boolean",
          "title" : "Synchronous",
          "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the multicast is complete, even if parallel processing is enabled.",
          "$comment" : "group:common"
        },
        "streaming" : {
          "type" : "boolean",
          "title" : "Streaming",
          "description" : "If enabled then Zwangine will process replies out-of-order, eg in the order they come back. If disabled, Zwangine will process replies in the same order as defined by the multicast.",
          "$comment" : "group:common"
        },
        "stopOnException" : {
          "type" : "boolean",
          "title" : "Stop On Exception",
          "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.zenithblox.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the multicast will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end",
          "$comment" : "group:advanced"
        },
        "timeout" : {
          "type" : "string",
          "title" : "Timeout",
          "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Multicast hasn't been able to send and process all replies within the given timeframe, then the timeout triggers and the Multicast breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Zwangine to shut down in a graceful manner may continue to run. So use this option with a bit of care.",
          "default" : "0",
          "$comment" : "group:advanced",
          "format" : "duration"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "Refers to a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "onPrepare" : {
          "type" : "string",
          "title" : "On Prepare",
          "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be send. This can be used to deep-clone messages that should be send, or any custom logic needed before the exchange is send.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.Processor"
        },
        "shareUnitOfWork" : {
          "type" : "boolean",
          "title" : "Share Unit Of Work",
          "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and each of the sub messages. Multicast will by default not share unit of work between the parent exchange and each multicasted exchange. This means each sub exchange has its own individual unit of work.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "onFallback" : {
    "model" : {
      "kind" : "model",
      "name" : "onFallback",
      "title" : "On Fallback",
      "description" : "Route to be executed when Circuit Breaker EIP executes fallback",
      "deprecated" : false,
      "label" : "eip,routing,error",
      "javaType" : "org.zenithblox.model.OnFallbackDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "fallbackViaNetwork" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Fallback Via Network",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the fallback goes over the network. If the fallback will go over the network it is another possible point of failure. It is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool this would prevent the fallback from running if the two commands share the same pool."
      },
      "outputs" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "On Fallback",
      "description" : "Route to be executed when Circuit Breaker EIP executes fallback",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "fallbackViaNetwork" : {
          "type" : "boolean",
          "title" : "Fallback Via Network",
          "description" : "Whether the fallback goes over the network. If the fallback will go over the network it is another possible point of failure. It is important to execute the fallback command on a separate thread-pool, otherwise if the main command were to become latent and fill the thread-pool this would prevent the fallback from running if the two commands share the same pool.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "otherwise" : {
    "model" : {
      "kind" : "model",
      "name" : "otherwise",
      "title" : "Otherwise",
      "description" : "Route to be executed when all other choices evaluate to false",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.OtherwiseDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "outputs" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "Otherwise",
      "description" : "Route to be executed when all other choices evaluate to false",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "pausable" : {
    "model" : {
      "kind" : "model",
      "name" : "pausable",
      "title" : "Pausable",
      "description" : "Pausable EIP to support resuming processing from last known offset.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.PausableDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "consumerListener" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Consumer Listener",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.resume.ConsumerListener",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the consumer listener to use"
      },
      "untilCheck" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Until Check",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "java.util.function.Predicate",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "References to a java.util.function.Predicate to use for until checks. The predicate is responsible for evaluating whether the processing can resume or not. Such predicate should return true if the consumption can resume, or false otherwise. The exact point of when the predicate is called is dependent on the component, and it may be called on either one of the available events. Implementations should not assume the predicate to be called at any specific point."
      }
    },
    "propertiesSchema" : {
      "title" : "Pausable",
      "description" : "Pausable EIP to support resuming processing from last known offset.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "consumerListener" : {
          "type" : "string",
          "title" : "Consumer Listener",
          "description" : "Sets the consumer listener to use",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.resume.ConsumerListener"
        },
        "untilCheck" : {
          "type" : "string",
          "title" : "Until Check",
          "description" : "References to a java.util.function.Predicate to use for until checks. The predicate is responsible for evaluating whether the processing can resume or not. Such predicate should return true if the consumption can resume, or false otherwise. The exact point of when the predicate is called is dependent on the component, and it may be called on either one of the available events. Implementations should not assume the predicate to be called at any specific point.",
          "$comment" : "group:common",
          "format" : "bean:java.util.function.Predicate"
        }
      },
      "required" : [ "consumerListener", "untilCheck" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "pipeline" : {
    "model" : {
      "kind" : "model",
      "name" : "pipeline",
      "title" : "Pipeline",
      "description" : "Routes the message to a sequence of processors.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.PipelineDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "outputs" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "Pipeline",
      "description" : "Routes the message to a sequence of processors.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "policy" : {
    "model" : {
      "kind" : "model",
      "name" : "policy",
      "title" : "Policy",
      "description" : "Defines a policy the route will use",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.PolicyDefinition",
      "abstract" : true,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "ref" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Ref",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to use for lookup the policy in the registry."
      }
    },
    "propertiesSchema" : {
      "title" : "Policy",
      "description" : "Defines a policy the route will use",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "ref" : {
          "type" : "string",
          "title" : "Ref",
          "description" : "Sets a reference to use for lookup the policy in the registry.",
          "$comment" : "group:common"
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
          }
        }
      },
      "required" : [ "ref" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "poll" : {
    "model" : {
      "kind" : "model",
      "name" : "poll",
      "title" : "Poll",
      "description" : "Polls a message from a static endpoint",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.PollDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "variableReceive" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message."
      },
      "uri" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Uri",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the uri of the endpoint to poll from."
      },
      "timeout" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Timeout",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "20000",
        "description" : "Timeout in millis when polling from the external service. The timeout has influence about the poll enrich behavior. It basically operations in three different modes: negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available. 0 - Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet. positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns null if timed out The default value is 20000 (20 seconds)."
      }
    },
    "propertiesSchema" : {
      "title" : "Poll",
      "description" : "Polls a message from a static endpoint",
      "required" : [ "uri" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
          "$comment" : "group:common"
        },
        "uri" : {
          "type" : "string",
          "title" : "Uri",
          "description" : "Sets the uri of the endpoint to poll from.",
          "$comment" : "group:common"
        },
        "timeout" : {
          "type" : "string",
          "title" : "Timeout",
          "description" : "Timeout in millis when polling from the external service. The timeout has influence about the poll enrich behavior. It basically operations in three different modes: negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available. 0 - Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet. positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns null if timed out The default value is 20000 (20 seconds).",
          "default" : "20000",
          "$comment" : "group:advanced",
          "format" : "duration"
        },
        "parameters" : {
          "type" : "object"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "pollEnrich" : {
    "model" : {
      "kind" : "model",
      "name" : "pollEnrich",
      "title" : "Poll Enrich",
      "description" : "Enriches messages with data polled from a secondary resource",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.PollEnrichDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression that computes the endpoint uri to use as the resource endpoint to enrich from"
      },
      "variableReceive" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message."
      },
      "aggregationStrategy" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message. By default Zwangine will use the reply from the external service as outgoing message."
      },
      "aggregationStrategyMethodName" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy."
      },
      "aggregationStrategyMethodAllowNull" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Allow Null",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy."
      },
      "aggregateOnException" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Aggregate On Exception",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If this option is false then the aggregate method is not used if there was an exception thrown while trying to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what to do if there was an exception in the aggregate method. For example to suppress the exception or set a custom message body etc."
      },
      "timeout" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Timeout",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "-1",
        "description" : "Timeout in millis when polling from the external service. The timeout has influence about the poll enrich behavior. It basically operations in three different modes: negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available. 0 - Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet. positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns null if timed out The default value is -1 and therefore the method could block indefinitely, and therefore its recommended to use a timeout value"
      },
      "cacheSize" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ConsumerCache which is used to cache and reuse consumers when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      },
      "ignoreInvalidEndpoint" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoint",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint"
      },
      "autoStartComponents" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Auto Start Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to auto startup components when poll enricher is starting up."
      }
    },
    "exchangeProperties" : {
      "ZwangineToEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "Poll Enrich",
      "description" : "Enriches messages with data polled from a secondary resource",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression that computes the endpoint uri to use as the resource endpoint to enrich from",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
          "$comment" : "group:common"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message. By default Zwangine will use the reply from the external service as outgoing message.",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategyMethodAllowNull" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Allow Null",
          "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregateOnException" : {
          "type" : "boolean",
          "title" : "Aggregate On Exception",
          "description" : "If this option is false then the aggregate method is not used if there was an exception thrown while trying to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what to do if there was an exception in the aggregate method. For example to suppress the exception or set a custom message body etc.",
          "$comment" : "group:advanced"
        },
        "timeout" : {
          "type" : "string",
          "title" : "Timeout",
          "description" : "Timeout in millis when polling from the external service. The timeout has influence about the poll enrich behavior. It basically operations in three different modes: negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available. 0 - Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet. positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns null if timed out The default value is -1 and therefore the method could block indefinitely, and therefore its recommended to use a timeout value",
          "default" : "-1",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ConsumerCache which is used to cache and reuse consumers when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "ignoreInvalidEndpoint" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoint",
          "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
          "$comment" : "group:advanced"
        },
        "autoStartComponents" : {
          "type" : "boolean",
          "title" : "Auto Start Components",
          "description" : "Whether to auto startup components when poll enricher is starting up.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "process" : {
    "model" : {
      "kind" : "model",
      "name" : "process",
      "title" : "Process",
      "description" : "Calls a Zwangine processor",
      "deprecated" : false,
      "label" : "eip,endpoint",
      "javaType" : "org.zenithblox.model.ProcessDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "ref" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Ref",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Reference to the Processor to lookup in the registry to use. A Processor is a class of type org.zenithblox.Processor, which can are to be called by this EIP. In this processor you have custom Java code, that can work with the message, such as to do custom business logic, special message manipulations and so on. By default, the ref, will lookup the bean in the Zwangine registry. The ref can use prefix that controls how the processor is obtained. You can use #bean:myBean where myBean is the id of the Zwangine processor (lookup). Can also be used for creating new beans by their class name by prefixing with #class, eg #class:com.foo.MyClassType. And it is also possible to refer to singleton beans by their type in the registry by prefixing with #type: syntax, eg #type:com.foo.MyClassType"
      }
    },
    "propertiesSchema" : {
      "title" : "Process",
      "description" : "Calls a Zwangine processor",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "ref" : {
          "type" : "string",
          "title" : "Ref",
          "description" : "Reference to the Processor to lookup in the registry to use. A Processor is a class of type org.zenithblox.Processor, which can are to be called by this EIP. In this processor you have custom Java code, that can work with the message, such as to do custom business logic, special message manipulations and so on. By default, the ref, will lookup the bean in the Zwangine registry. The ref can use prefix that controls how the processor is obtained. You can use #bean:myBean where myBean is the id of the Zwangine processor (lookup). Can also be used for creating new beans by their class name by prefixing with #class, eg #class:com.foo.MyClassType. And it is also possible to refer to singleton beans by their type in the registry by prefixing with #type: syntax, eg #type:com.foo.MyClassType",
          "$comment" : "group:common"
        }
      },
      "required" : [ "ref" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "recipientList" : {
    "model" : {
      "kind" : "model",
      "name" : "recipientList",
      "title" : "Recipient List",
      "description" : "Route messages to a number of dynamically specified recipients",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.RecipientListDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression that returns which endpoints (url) to send the message to (the recipients). If the expression return an empty value then the message is not sent to any recipients."
      },
      "delimiter" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : ",",
        "description" : "Delimiter used if the Expression returned multiple endpoints. Can be turned off using the value false. The default value is ,"
      },
      "aggregationStrategy" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the AggregationStrategy to be used to assemble the replies from the recipients, into a single outgoing message from the RecipientList. By default Zwangine will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy"
      },
      "aggregationStrategyMethodName" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy."
      },
      "aggregationStrategyMethodAllowNull" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Allow Null",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy"
      },
      "parallelAggregate" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Parallel Aggregate",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : true,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Zwangine synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe."
      },
      "parallelProcessing" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Parallel Processing",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then sending messages to the recipients occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. Its only the sending and processing the replies from the recipients which happens concurrently. When parallel processing is enabled, then the Zwangine routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the recipient list, then make sure to enable the synchronous option as well."
      },
      "synchronous" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Synchronous",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the recipient list is complete, even if parallel processing is enabled."
      },
      "timeout" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Timeout",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "0",
        "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Recipient List hasn't been able to send and process all replies within the given timeframe, then the timeout triggers and the Recipient List breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Zwangine to shut down in a graceful manner may continue to run. So use this option with a bit of care."
      },
      "executorService" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well."
      },
      "stopOnException" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Stop On Exception",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.zenithblox.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the recipient list will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end"
      },
      "ignoreInvalidEndpoints" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoints",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint"
      },
      "streaming" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Streaming",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Zwangine will process replies out-of-order, eg in the order they come back. If disabled, Zwangine will process replies in the same order as defined by the recipient list."
      },
      "onPrepare" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "On Prepare",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.Processor",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be used send. This can be used to deep-clone messages that should be send, or any custom logic needed before the exchange is send."
      },
      "cacheSize" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      },
      "shareUnitOfWork" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Share Unit Of Work",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and each of the sub messages. Recipient List will by default not share unit of work between the parent exchange and each recipient exchange. This means each sub exchange has its own individual unit of work."
      }
    },
    "exchangeProperties" : {
      "ZwangineRecipientListEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Recipient List Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The endpoint uri of this recipient list"
      },
      "ZwangineToEndpoint" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "Recipient List",
      "description" : "Route messages to a number of dynamically specified recipients",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression that returns which endpoints (url) to send the message to (the recipients). If the expression return an empty value then the message is not sent to any recipients.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "delimiter" : {
          "type" : "string",
          "title" : "Delimiter",
          "description" : "Delimiter used if the Expression returned multiple endpoints. Can be turned off using the value false. The default value is ,",
          "default" : ",",
          "$comment" : "group:common"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "Sets the AggregationStrategy to be used to assemble the replies from the recipients, into a single outgoing message from the RecipientList. By default Zwangine will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategyMethodAllowNull" : {
          "type" : "boolean",
          "title" : "Aggregation Strategy Method Allow Null",
          "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy",
          "$comment" : "group:advanced"
        },
        "parallelAggregate" : {
          "type" : "boolean",
          "title" : "Parallel Aggregate",
          "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Zwangine synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe.",
          "deprecated" : true,
          "$comment" : "group:advanced"
        },
        "parallelProcessing" : {
          "type" : "boolean",
          "title" : "Parallel Processing",
          "description" : "If enabled then sending messages to the recipients occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. Its only the sending and processing the replies from the recipients which happens concurrently. When parallel processing is enabled, then the Zwangine routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the recipient list, then make sure to enable the synchronous option as well.",
          "$comment" : "group:common"
        },
        "synchronous" : {
          "type" : "boolean",
          "title" : "Synchronous",
          "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the recipient list is complete, even if parallel processing is enabled.",
          "$comment" : "group:common"
        },
        "timeout" : {
          "type" : "string",
          "title" : "Timeout",
          "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Recipient List hasn't been able to send and process all replies within the given timeframe, then the timeout triggers and the Recipient List breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Zwangine to shut down in a graceful manner may continue to run. So use this option with a bit of care.",
          "default" : "0",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "stopOnException" : {
          "type" : "boolean",
          "title" : "Stop On Exception",
          "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.zenithblox.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the recipient list will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end",
          "$comment" : "group:advanced"
        },
        "ignoreInvalidEndpoints" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoints",
          "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
          "$comment" : "group:advanced"
        },
        "streaming" : {
          "type" : "boolean",
          "title" : "Streaming",
          "description" : "If enabled then Zwangine will process replies out-of-order, eg in the order they come back. If disabled, Zwangine will process replies in the same order as defined by the recipient list.",
          "$comment" : "group:advanced"
        },
        "onPrepare" : {
          "type" : "string",
          "title" : "On Prepare",
          "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be used send. This can be used to deep-clone messages that should be send, or any custom logic needed before the exchange is send.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.Processor"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "shareUnitOfWork" : {
          "type" : "boolean",
          "title" : "Share Unit Of Work",
          "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and each of the sub messages. Recipient List will by default not share unit of work between the parent exchange and each recipient exchange. This means each sub exchange has its own individual unit of work.",
          "$comment" : "group:advanced"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "removeHeader" : {
    "model" : {
      "kind" : "model",
      "name" : "removeHeader",
      "title" : "Remove Header",
      "description" : "Removes a named header from the message",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.RemoveHeaderDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of header to remove"
      }
    },
    "propertiesSchema" : {
      "title" : "Remove Header",
      "description" : "Removes a named header from the message",
      "required" : [ "name" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of header to remove",
          "$comment" : "group:common"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "removeHeaders" : {
    "model" : {
      "kind" : "model",
      "name" : "removeHeaders",
      "title" : "Remove Headers",
      "description" : "Removes message headers whose name matches a specified pattern",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.RemoveHeadersDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "pattern" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name or pattern of headers to remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive)."
      },
      "excludePattern" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Exclude Pattern",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name or patter of headers to not remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive)."
      }
    },
    "propertiesSchema" : {
      "title" : "Remove Headers",
      "description" : "Removes message headers whose name matches a specified pattern",
      "required" : [ "pattern" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Name or pattern of headers to remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
          "$comment" : "group:common"
        },
        "excludePattern" : {
          "type" : "string",
          "title" : "Exclude Pattern",
          "description" : "Name or patter of headers to not remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "removeProperties" : {
    "model" : {
      "kind" : "model",
      "name" : "removeProperties",
      "title" : "Remove Properties",
      "description" : "Removes message exchange properties whose name matches a specified pattern",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.RemovePropertiesDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "pattern" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name or pattern of properties to remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive)."
      },
      "excludePattern" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Exclude Pattern",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name or pattern of properties to not remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive)."
      }
    },
    "propertiesSchema" : {
      "title" : "Remove Properties",
      "description" : "Removes message exchange properties whose name matches a specified pattern",
      "required" : [ "pattern" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Name or pattern of properties to remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
          "$comment" : "group:common"
        },
        "excludePattern" : {
          "type" : "string",
          "title" : "Exclude Pattern",
          "description" : "Name or pattern of properties to not remove. The pattern is matched in the following order: 1 = exact match 2 = wildcard (pattern ends with a and the name starts with the pattern) 3 = regular expression (all of above is case in-sensitive).",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "removeProperty" : {
    "model" : {
      "kind" : "model",
      "name" : "removeProperty",
      "title" : "Remove Property",
      "description" : "Removes a named property from the message exchange",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.RemovePropertyDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of property to remove."
      }
    },
    "propertiesSchema" : {
      "title" : "Remove Property",
      "description" : "Removes a named property from the message exchange",
      "required" : [ "name" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of property to remove.",
          "$comment" : "group:common"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "removeVariable" : {
    "model" : {
      "kind" : "model",
      "name" : "removeVariable",
      "title" : "Remove Variable",
      "description" : "Removes a named variable",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.RemoveVariableDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of variable to remove."
      }
    },
    "propertiesSchema" : {
      "title" : "Remove Variable",
      "description" : "Removes a named variable",
      "required" : [ "name" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of variable to remove.",
          "$comment" : "group:common"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "resequence" : {
    "model" : {
      "kind" : "model",
      "name" : "resequence",
      "title" : "Resequence",
      "description" : "Resequences (re-order) messages based on an expression",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ResequenceDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to use for re-ordering the messages, such as a header with a sequence number"
      },
      "resequencerConfig" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Resequencer Config",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.config.ResequencerConfig",
        "oneOf" : [ "batchConfig", "streamConfig" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To configure the resequencer in using either batch or stream configuration. Will by default use batch configuration."
      },
      "outputs" : {
        "index" : 5,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "Resequence",
      "description" : "Resequences (re-order) messages based on an expression",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to use for re-ordering the messages, such as a header with a sequence number",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      }, {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "batchConfig" ],
          "properties" : {
            "batchConfig" : {
              "$ref" : "#/definitions/org.zenithblox.model.config.BatchResequencerConfig"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "batchConfig" ]
            }, {
              "required" : [ "streamConfig" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "streamConfig" ],
          "properties" : {
            "streamConfig" : {
              "$ref" : "#/definitions/org.zenithblox.model.config.StreamResequencerConfig"
            }
          }
        } ]
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { },
        "batchConfig" : { },
        "streamConfig" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.config.BatchResequencerConfig" : {
          "title" : "Batch Config",
          "description" : "Configures batch-processing resequence eip.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "batchSize" : {
              "type" : "number",
              "title" : "Batch Size",
              "description" : "Sets the size of the batch to be re-ordered. The default size is 100.",
              "default" : "100",
              "$comment" : "group:common"
            },
            "batchTimeout" : {
              "type" : "string",
              "title" : "Batch Timeout",
              "description" : "Sets the timeout for collecting elements to be re-ordered. The default timeout is 1000 msec.",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "allowDuplicates" : {
              "type" : "boolean",
              "title" : "Allow Duplicates",
              "description" : "Whether to allow duplicates.",
              "$comment" : "group:advanced"
            },
            "reverse" : {
              "type" : "boolean",
              "title" : "Reverse",
              "description" : "Whether to reverse the ordering.",
              "$comment" : "group:advanced"
            },
            "ignoreInvalidExchanges" : {
              "type" : "boolean",
              "title" : "Ignore Invalid Exchanges",
              "description" : "Whether to ignore invalid exchanges",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.config.StreamResequencerConfig" : {
          "title" : "Stream Config",
          "description" : "Configures stream-processing resequence eip.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "capacity" : {
              "type" : "number",
              "title" : "Capacity",
              "description" : "Sets the capacity of the resequencer inbound queue.",
              "default" : "1000",
              "$comment" : "group:common"
            },
            "timeout" : {
              "type" : "string",
              "title" : "Timeout",
              "description" : "Sets minimum time (milliseconds) to wait for missing elements (messages).",
              "default" : "1000",
              "$comment" : "group:common",
              "format" : "duration"
            },
            "deliveryAttemptInterval" : {
              "type" : "string",
              "title" : "Delivery Attempt Interval",
              "description" : "Sets the interval in milliseconds the stream resequencer will at most wait while waiting for condition of being able to deliver.",
              "default" : "1000",
              "$comment" : "group:advanced",
              "format" : "duration"
            },
            "ignoreInvalidExchanges" : {
              "type" : "boolean",
              "title" : "Ignore Invalid Exchanges",
              "description" : "Whether to ignore invalid exchanges",
              "$comment" : "group:advanced"
            },
            "rejectOld" : {
              "type" : "boolean",
              "title" : "Reject Old",
              "description" : "If true, throws an exception when messages older than the last delivered message are processed",
              "$comment" : "group:advanced"
            },
            "comparator" : {
              "type" : "string",
              "title" : "Comparator",
              "description" : "To use a custom comparator as a org.zenithblox.processor.resequencer.ExpressionResultComparator type.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.processor.resequencer.ExpressionResultComparator"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "resumable" : {
    "model" : {
      "kind" : "model",
      "name" : "resumable",
      "title" : "Resumable",
      "description" : "Resume EIP to support resuming processing from last known offset.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ResumableDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "resumeStrategy" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Resume Strategy",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.resume.ResumeStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the resume strategy to use"
      },
      "loggingLevel" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Logging Level",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.LoggingLevel",
        "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "ERROR"
      },
      "intermittent" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Intermittent",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether the offsets will be intermittently present or whether they must be present in every exchange"
      }
    },
    "propertiesSchema" : {
      "title" : "Resumable",
      "description" : "Resume EIP to support resuming processing from last known offset.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "resumeStrategy" : {
          "type" : "string",
          "title" : "Resume Strategy",
          "description" : "Sets the resume strategy to use",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.resume.ResumeStrategy"
        },
        "loggingLevel" : {
          "type" : "string",
          "title" : "Logging Level",
          "default" : "ERROR",
          "enum" : [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ],
          "$comment" : "group:advanced"
        },
        "intermittent" : {
          "type" : "boolean",
          "title" : "Intermittent",
          "description" : "Sets whether the offsets will be intermittently present or whether they must be present in every exchange",
          "$comment" : "group:advanced"
        }
      },
      "required" : [ "resumeStrategy" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "rollback" : {
    "model" : {
      "kind" : "model",
      "name" : "rollback",
      "title" : "Rollback",
      "description" : "Forces a rollback by stopping routing the message",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.RollbackDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "message" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Message",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Message to use in rollback exception"
      },
      "markRollbackOnly" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Mark Rollback Only",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Mark the transaction for rollback only (cannot be overruled to commit)"
      },
      "markRollbackOnlyLast" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Mark Rollback Only Last",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Mark only last sub transaction for rollback only. When using sub transactions (if the transaction manager support this)"
      }
    },
    "propertiesSchema" : {
      "title" : "Rollback",
      "description" : "Forces a rollback by stopping routing the message",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "message" : {
          "type" : "string",
          "title" : "Message",
          "description" : "Message to use in rollback exception",
          "$comment" : "group:common"
        },
        "markRollbackOnly" : {
          "type" : "boolean",
          "title" : "Mark Rollback Only",
          "description" : "Mark the transaction for rollback only (cannot be overruled to commit)",
          "$comment" : "group:common"
        },
        "markRollbackOnlyLast" : {
          "type" : "boolean",
          "title" : "Mark Rollback Only Last",
          "description" : "Mark only last sub transaction for rollback only. When using sub transactions (if the transaction manager support this)",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "routingSlip" : {
    "model" : {
      "kind" : "model",
      "name" : "routingSlip",
      "title" : "Routing Slip",
      "description" : "Routes a message through a series of steps that are pre-determined (the slip)",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.RoutingSlipDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to define the routing slip, which defines which endpoints to route the message in a pipeline style. Notice the expression is evaluated once, if you want a more dynamic style, then the dynamic router eip is a better choice."
      },
      "uriDelimiter" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Uri Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : ",",
        "description" : "Sets the uri delimiter to use"
      },
      "ignoreInvalidEndpoints" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoints",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint"
      },
      "cacheSize" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this routing slip, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      }
    },
    "exchangeProperties" : {
      "ZwangineSlipEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Slip Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The endpoint uri of this routing slip"
      },
      "ZwangineToEndpoint" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "Routing Slip",
      "description" : "Routes a message through a series of steps that are pre-determined (the slip)",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to define the routing slip, which defines which endpoints to route the message in a pipeline style. Notice the expression is evaluated once, if you want a more dynamic style, then the dynamic router eip is a better choice.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "uriDelimiter" : {
          "type" : "string",
          "title" : "Uri Delimiter",
          "description" : "Sets the uri delimiter to use",
          "default" : ",",
          "$comment" : "group:common"
        },
        "ignoreInvalidEndpoints" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoints",
          "description" : "Ignore the invalidate endpoint exception when try to create a producer with that endpoint",
          "$comment" : "group:advanced"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this routing slip, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "saga" : {
    "model" : {
      "kind" : "model",
      "name" : "saga",
      "title" : "Saga",
      "description" : "Enables Sagas on the route",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.SagaDefinition",
      "abstract" : true,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "sagaService" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Saga Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.saga.ZwangineSagaService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to the id to lookup in the registry for the specific ZwangineSagaService to use."
      },
      "propagation" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Propagation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.SagaPropagation",
        "enum" : [ "REQUIRED", "REQUIRES_NEW", "MANDATORY", "SUPPORTS", "NOT_SUPPORTED", "NEVER" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "REQUIRED",
        "description" : "Set the Saga propagation mode (REQUIRED, REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER)."
      },
      "completionMode" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Completion Mode",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.SagaCompletionMode",
        "enum" : [ "AUTO", "MANUAL" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "AUTO",
        "description" : "Determine how the saga should be considered complete. When set to AUTO, the saga is completed when the exchange that initiates the saga is processed successfully, or compensated when it completes exceptionally. When set to MANUAL, the user must complete or compensate the saga using the saga:complete or saga:compensate endpoints."
      },
      "timeout" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Timeout",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set the maximum amount of time for the Saga. After the timeout is expired, the saga will be compensated automatically (unless a different decision has been taken in the meantime)."
      },
      "compensation" : {
        "index" : 7,
        "kind" : "element",
        "displayName" : "Compensation",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.SagaActionUriDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The compensation endpoint URI that must be called to compensate all changes done in the route. The route corresponding to the compensation URI must perform compensation and complete without error. If errors occur during compensation, the saga service may call again the compensation URI to retry."
      },
      "completion" : {
        "index" : 8,
        "kind" : "element",
        "displayName" : "Completion",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.SagaActionUriDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The completion endpoint URI that will be called when the Saga is completed successfully. The route corresponding to the completion URI must perform completion tasks and terminate without error. If errors occur during completion, the saga service may call again the completion URI to retry."
      },
      "option" : {
        "index" : 9,
        "kind" : "element",
        "displayName" : "Option",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.PropertyExpressionDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Allows to save properties of the current exchange in order to re-use them in a compensation/completion callback route. Options are usually helpful e.g. to store and retrieve identifiers of objects that should be deleted in compensating actions. Option values will be transformed into input headers of the compensation/completion exchange."
      },
      "outputs" : {
        "index" : 10,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "Saga",
      "description" : "Enables Sagas on the route",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "sagaService" : {
          "type" : "string",
          "title" : "Saga Service",
          "description" : "Refers to the id to lookup in the registry for the specific ZwangineSagaService to use.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.saga.ZwangineSagaService"
        },
        "propagation" : {
          "type" : "string",
          "title" : "Propagation",
          "description" : "Set the Saga propagation mode (REQUIRED, REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER).",
          "default" : "REQUIRED",
          "enum" : [ "REQUIRED", "REQUIRES_NEW", "MANDATORY", "SUPPORTS", "NOT_SUPPORTED", "NEVER" ],
          "$comment" : "group:advanced"
        },
        "completionMode" : {
          "type" : "string",
          "title" : "Completion Mode",
          "description" : "Determine how the saga should be considered complete. When set to AUTO, the saga is completed when the exchange that initiates the saga is processed successfully, or compensated when it completes exceptionally. When set to MANUAL, the user must complete or compensate the saga using the saga:complete or saga:compensate endpoints.",
          "default" : "AUTO",
          "enum" : [ "AUTO", "MANUAL" ],
          "$comment" : "group:advanced"
        },
        "timeout" : {
          "type" : "string",
          "title" : "Timeout",
          "description" : "Set the maximum amount of time for the Saga. After the timeout is expired, the saga will be compensated automatically (unless a different decision has been taken in the meantime).",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "compensation" : {
          "title" : "Compensation",
          "description" : "The compensation endpoint URI that must be called to compensate all changes done in the route. The route corresponding to the compensation URI must perform compensation and complete without error. If errors occur during compensation, the saga service may call again the compensation URI to retry.",
          "$ref" : "#/definitions/org.zenithblox.model.SagaActionUriDefinition",
          "$comment" : "group:common"
        },
        "completion" : {
          "title" : "Completion",
          "description" : "The completion endpoint URI that will be called when the Saga is completed successfully. The route corresponding to the completion URI must perform completion tasks and terminate without error. If errors occur during completion, the saga service may call again the completion URI to retry.",
          "$ref" : "#/definitions/org.zenithblox.model.SagaActionUriDefinition",
          "$comment" : "group:common"
        },
        "option" : {
          "type" : "array",
          "title" : "Option",
          "description" : "Allows to save properties of the current exchange in order to re-use them in a compensation/completion callback route. Options are usually helpful e.g. to store and retrieve identifiers of objects that should be deleted in compensating actions. Option values will be transformed into input headers of the compensation/completion exchange.",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.PropertyExpressionDefinition"
          },
          "$comment" : "group:advanced"
        }
      },
      "definitions" : {
        "org.zenithblox.model.SagaActionUriDefinition" : {
          "required" : [ "uri" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "disabled" : {
              "type" : "boolean"
            },
            "id" : {
              "type" : "string"
            },
            "parameters" : {
              "type" : "object"
            },
            "uri" : {
              "type" : "string"
            }
          }
        },
        "org.zenithblox.model.PropertyExpressionDefinition" : {
          "title" : "Property Expression",
          "description" : "A key value pair where the value is an expression.",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "expression" ]
                }, {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "expression" ],
              "properties" : {
                "expression" : {
                  "title" : "Expression",
                  "description" : "Property values as an expression",
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
                }
              }
            } ],
            "format" : "expression"
          } ],
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "expression" : { },
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          },
          "required" : [ "key", "expression" ]
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "sample" : {
    "model" : {
      "kind" : "model",
      "name" : "sample",
      "title" : "Sample",
      "description" : "Extract a sample of the messages passing through a route",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.SamplingDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "samplePeriod" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Sample Period",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "1000",
        "description" : "Sets the sample period during which only a single Exchange will pass through."
      },
      "messageFrequency" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Message Frequency",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Long",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the sample message count which only a single Exchange will pass through after this many received."
      }
    },
    "propertiesSchema" : {
      "title" : "Sample",
      "description" : "Extract a sample of the messages passing through a route",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "samplePeriod" : {
          "type" : "string",
          "title" : "Sample Period",
          "description" : "Sets the sample period during which only a single Exchange will pass through.",
          "default" : "1000",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "messageFrequency" : {
          "type" : "number",
          "title" : "Message Frequency",
          "description" : "Sets the sample message count which only a single Exchange will pass through after this many received.",
          "$comment" : "group:common"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "script" : {
    "model" : {
      "kind" : "model",
      "name" : "script",
      "title" : "Script",
      "description" : "Executes a script from a language which does not change the message body.",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.ScriptDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to return the transformed message body (the new message body to use)"
      }
    },
    "propertiesSchema" : {
      "title" : "Script",
      "description" : "Executes a script from a language which does not change the message body.",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to return the transformed message body (the new message body to use)",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "setBody" : {
    "model" : {
      "kind" : "model",
      "name" : "setBody",
      "title" : "Set Body",
      "description" : "Sets the contents of the message body",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SetBodyDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression that returns the new body to use"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Body",
      "description" : "Sets the contents of the message body",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression that returns the new body to use",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "setExchangePattern" : {
    "model" : {
      "kind" : "model",
      "name" : "setExchangePattern",
      "title" : "Set Exchange Pattern",
      "description" : "Sets the exchange pattern on the message exchange",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.SetExchangePatternDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "pattern" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "common",
        "required" : true,
        "type" : "enum",
        "javaType" : "org.zenithblox.ExchangePattern",
        "enum" : [ "InOnly", "InOut" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the new exchange pattern of the Exchange to be used from this point forward"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Exchange Pattern",
      "description" : "Sets the exchange pattern on the message exchange",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Sets the new exchange pattern of the Exchange to be used from this point forward",
          "enum" : [ "InOnly", "InOut" ],
          "$comment" : "group:common"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "pattern" ]
    }
  },
  "setHeader" : {
    "model" : {
      "kind" : "model",
      "name" : "setHeader",
      "title" : "Set Header",
      "description" : "Sets the value of a message header",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SetHeaderDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of message header to set a new value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used."
      },
      "expression" : {
        "index" : 4,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to return the value of the header"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Header",
      "description" : "Sets the value of a message header",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to return the value of the header",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of message header to set a new value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "required" : [ "name", "expression" ],
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "setHeaders" : {
    "model" : {
      "kind" : "model",
      "name" : "setHeaders",
      "title" : "Set Headers",
      "description" : "Allows setting multiple headers on the message at the same time.",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SetHeadersDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "headers" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Headers",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.SetHeaderDefinition>",
        "oneOf" : [ "setHeader" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Contains the headers to be set"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Headers",
      "description" : "Allows setting multiple headers on the message at the same time.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "headers" : {
          "type" : "array",
          "title" : "Headers",
          "description" : "Contains the headers to be set",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.SetHeaderDefinition"
          },
          "$comment" : "group:common"
        }
      },
      "definitions" : {
        "org.zenithblox.model.SetHeaderDefinition" : {
          "title" : "Set Header",
          "description" : "Sets the value of a message header",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "expression" ]
                }, {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "expression" ],
              "properties" : {
                "expression" : {
                  "title" : "Expression",
                  "description" : "Expression to return the value of the header",
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
                }
              }
            } ],
            "format" : "expression"
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of message header to set a new value The simple language can be used to define a dynamic evaluated header name to be used. Otherwise a constant name will be used.",
              "$comment" : "group:common"
            },
            "expression" : { },
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          },
          "required" : [ "name", "expression" ]
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "headers" ]
    }
  },
  "setProperty" : {
    "model" : {
      "kind" : "model",
      "name" : "setProperty",
      "title" : "Set Property",
      "description" : "Sets a named property on the message exchange",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SetPropertyDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of exchange property to set a new value. The simple language can be used to define a dynamic evaluated exchange property name to be used. Otherwise a constant name will be used."
      },
      "expression" : {
        "index" : 4,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to return the value of the message exchange property"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Property",
      "description" : "Sets a named property on the message exchange",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to return the value of the message exchange property",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of exchange property to set a new value. The simple language can be used to define a dynamic evaluated exchange property name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "required" : [ "name", "expression" ],
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "setVariable" : {
    "model" : {
      "kind" : "model",
      "name" : "setVariable",
      "title" : "Set Variable",
      "description" : "Sets the value of a variable",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SetVariableDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of variable to set a new value The simple language can be used to define a dynamic evaluated variable name to be used. Otherwise a constant name will be used."
      },
      "expression" : {
        "index" : 4,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to return the value of the variable"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Variable",
      "description" : "Sets the value of a variable",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to return the value of the variable",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Name of variable to set a new value The simple language can be used to define a dynamic evaluated variable name to be used. Otherwise a constant name will be used.",
          "$comment" : "group:common"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "required" : [ "name", "expression" ],
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "setVariables" : {
    "model" : {
      "kind" : "model",
      "name" : "setVariables",
      "title" : "Set Variables",
      "description" : "Allows setting multiple variables at the same time.",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SetVariablesDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "variables" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Variables",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.SetVariableDefinition>",
        "oneOf" : [ "setVariable" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Contains the variables to be set"
      }
    },
    "propertiesSchema" : {
      "title" : "Set Variables",
      "description" : "Allows setting multiple variables at the same time.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "variables" : {
          "type" : "array",
          "title" : "Variables",
          "description" : "Contains the variables to be set",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.SetVariableDefinition"
          },
          "$comment" : "group:common"
        }
      },
      "definitions" : {
        "org.zenithblox.model.SetVariableDefinition" : {
          "title" : "Set Variable",
          "description" : "Sets the value of a variable",
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "expression" ]
                }, {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "expression" ],
              "properties" : {
                "expression" : {
                  "title" : "Expression",
                  "description" : "Expression to return the value of the variable",
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
                }
              }
            } ],
            "format" : "expression"
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the description of this node",
              "$comment" : "group:common"
            },
            "disabled" : {
              "type" : "boolean",
              "title" : "Disabled",
              "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
              "$comment" : "group:advanced"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of variable to set a new value The simple language can be used to define a dynamic evaluated variable name to be used. Otherwise a constant name will be used.",
              "$comment" : "group:common"
            },
            "expression" : { },
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          },
          "required" : [ "name", "expression" ]
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "variables" ]
    }
  },
  "sort" : {
    "model" : {
      "kind" : "model",
      "name" : "sort",
      "title" : "Sort",
      "description" : "Sorts the contents of the message",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.SortDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Optional expression to sort by something else than the message body"
      },
      "comparator" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Comparator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.Comparator",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the comparator to use for sorting"
      }
    },
    "propertiesSchema" : {
      "title" : "Sort",
      "description" : "Sorts the contents of the message",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Optional expression to sort by something else than the message body",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "comparator" : {
          "type" : "string",
          "title" : "Comparator",
          "description" : "Sets the comparator to use for sorting",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.Comparator"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "split" : {
    "model" : {
      "kind" : "model",
      "name" : "split",
      "title" : "Split",
      "description" : "Splits a single message into many sub-messages.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.SplitDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression of how to split the message body, such as as-is, using a tokenizer, or using a xpath."
      },
      "delimiter" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : ",",
        "description" : "Delimiter used in splitting messages. Can be turned off using the value false. To force not splitting then the delimiter can be set to single to use the value as a single list, this can be needed in some special situations. The default value is comma."
      },
      "aggregationStrategy" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.AggregationStrategy",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to the AggregationStrategy to be used to assemble the replies from the split messages, into a single outgoing message from the Splitter. By default Zwangine will use the original incoming message to the splitter (leave it unchanged). You can also use a POJO as the AggregationStrategy"
      },
      "aggregationStrategyMethodName" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy."
      },
      "aggregationStrategyMethodAllowNull" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Aggregation Strategy Method Allow Null",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy"
      },
      "parallelAggregate" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Parallel Aggregate",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : true,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Zwangine synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe."
      },
      "parallelProcessing" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Parallel Processing",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then processing each split messages occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. It's only processing the sub messages from the splitter which happens concurrently. When parallel processing is enabled, then the Zwangine routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the splitter, then make sure to enable the synchronous option as well."
      },
      "synchronous" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Synchronous",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the split is complete, even if parallel processing is enabled."
      },
      "streaming" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Streaming",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "When in streaming mode, then the splitter splits the original message on-demand, and each split message is processed one by one. This reduces memory usage as the splitter do not split all the messages first, but then we do not know the total size, and therefore the org.zenithblox.Exchange#SPLIT_SIZE is empty. In non-streaming mode (default) the splitter will split each message first, to know the total size, and then process each message one by one. This requires to keep all the split messages in memory and therefore requires more memory. The total size is provided in the org.zenithblox.Exchange#SPLIT_SIZE header. The streaming mode also affects the aggregation behavior. If enabled then Zwangine will process replies out-of-order, e.g. in the order they come back. If disabled, Zwangine will process replies in the same order as the messages was split."
      },
      "stopOnException" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Stop On Exception",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.zenithblox.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the splitter will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end"
      },
      "timeout" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Timeout",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "0",
        "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Splitter hasn't been able to split and process all the sub messages within the given timeframe, then the timeout triggers and the Splitter breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Zwangine to shut down in a graceful manner may continue to run. So use this option with a bit of care."
      },
      "executorService" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatically implied, and you do not have to enable that option as well."
      },
      "onPrepare" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "On Prepare",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.Processor",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be sent. This can be used to deep-clone messages that should be sent, or any custom logic needed before the exchange is sent."
      },
      "shareUnitOfWork" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Share Unit Of Work",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and each of the sub messages. Splitter will by default not share unit of work between the parent exchange and each split exchange. This means each split exchange has its own individual unit of work."
      },
      "outputs" : {
        "index" : 17,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineSplitIndex" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Split Index",
        "label" : "producer",
        "required" : false,
        "javaType" : "int",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A split counter that increases for each Exchange being split. The counter starts from 0."
      },
      "ZwangineSplitComplete" : {
        "index" : 1,
        "kind" : "exchangeProperty",
        "displayName" : "Split Complete",
        "label" : "producer",
        "required" : false,
        "javaType" : "boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether this Exchange is the last."
      },
      "ZwangineSplitSize" : {
        "index" : 2,
        "kind" : "exchangeProperty",
        "displayName" : "Split Size",
        "label" : "producer",
        "required" : false,
        "javaType" : "int",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The total number of Exchanges that was split. This property is not applied for stream based splitting, except for the very last message because then Zwangine knows the total size."
      }
    },
    "propertiesSchema" : {
      "title" : "Split",
      "description" : "Splits a single message into many sub-messages.",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression of how to split the message body, such as as-is, using a tokenizer, or using a xpath.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "delimiter" : {
          "type" : "string",
          "title" : "Delimiter",
          "description" : "Delimiter used in splitting messages. Can be turned off using the value false. To force not splitting then the delimiter can be set to single to use the value as a single list, this can be needed in some special situations. The default value is comma.",
          "default" : ",",
          "$comment" : "group:common"
        },
        "aggregationStrategy" : {
          "type" : "string",
          "title" : "Aggregation Strategy",
          "description" : "Sets a reference to the AggregationStrategy to be used to assemble the replies from the split messages, into a single outgoing message from the Splitter. By default Zwangine will use the original incoming message to the splitter (leave it unchanged). You can also use a POJO as the AggregationStrategy",
          "$comment" : "group:common",
          "format" : "bean:org.zenithblox.AggregationStrategy"
        },
        "aggregationStrategyMethodName" : {
          "type" : "string",
          "title" : "Aggregation Strategy Method Name",
          "description" : "This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.",
          "$comment" : "group:advanced"
        },
        "aggregationStrategyMethodAllowNull" : {
          "type" : "boolean",
          "title" : "Aggregation Strategy Method Allow Null",
          "description" : "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy",
          "$comment" : "group:advanced"
        },
        "parallelAggregate" : {
          "type" : "boolean",
          "title" : "Parallel Aggregate",
          "description" : "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default this is false meaning that Zwangine synchronizes the call to the aggregate method. Though in some use-cases this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe.",
          "deprecated" : true,
          "$comment" : "group:advanced"
        },
        "parallelProcessing" : {
          "type" : "boolean",
          "title" : "Parallel Processing",
          "description" : "If enabled then processing each split messages occurs concurrently. Note the caller thread will still wait until all messages has been fully processed, before it continues. It's only processing the sub messages from the splitter which happens concurrently. When parallel processing is enabled, then the Zwangine routing engin will continue processing using last used thread from the parallel thread pool. However, if you want to use the original thread that called the splitter, then make sure to enable the synchronous option as well.",
          "$comment" : "group:common"
        },
        "synchronous" : {
          "type" : "boolean",
          "title" : "Synchronous",
          "description" : "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the split is complete, even if parallel processing is enabled.",
          "$comment" : "group:common"
        },
        "streaming" : {
          "type" : "boolean",
          "title" : "Streaming",
          "description" : "When in streaming mode, then the splitter splits the original message on-demand, and each split message is processed one by one. This reduces memory usage as the splitter do not split all the messages first, but then we do not know the total size, and therefore the org.zenithblox.Exchange#SPLIT_SIZE is empty. In non-streaming mode (default) the splitter will split each message first, to know the total size, and then process each message one by one. This requires to keep all the split messages in memory and therefore requires more memory. The total size is provided in the org.zenithblox.Exchange#SPLIT_SIZE header. The streaming mode also affects the aggregation behavior. If enabled then Zwangine will process replies out-of-order, e.g. in the order they come back. If disabled, Zwangine will process replies in the same order as the messages was split.",
          "$comment" : "group:common"
        },
        "stopOnException" : {
          "type" : "boolean",
          "title" : "Stop On Exception",
          "description" : "Will now stop further processing if an exception or failure occurred during processing of an org.zenithblox.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message) or an exception was thrown and handled by the error handler (such as using onException). In all situations the splitter will stop further processing. This is the same behavior as in pipeline, which is used by the routing engine. The default behavior is to not stop but continue processing till the end",
          "$comment" : "group:advanced"
        },
        "timeout" : {
          "type" : "string",
          "title" : "Timeout",
          "description" : "Sets a total timeout specified in millis, when using parallel processing. If the Splitter hasn't been able to split and process all the sub messages within the given timeframe, then the timeout triggers and the Splitter breaks out and continues. Notice if you provide a TimeoutAwareAggregationStrategy then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks for which it is difficult for Zwangine to shut down in a graceful manner may continue to run. So use this option with a bit of care.",
          "default" : "0",
          "$comment" : "group:advanced",
          "format" : "duration"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "To use a custom Thread Pool to be used for parallel processing. Notice if you set this option, then parallel processing is automatically implied, and you do not have to enable that option as well.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "onPrepare" : {
          "type" : "string",
          "title" : "On Prepare",
          "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be sent. This can be used to deep-clone messages that should be sent, or any custom logic needed before the exchange is sent.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.Processor"
        },
        "shareUnitOfWork" : {
          "type" : "boolean",
          "title" : "Share Unit Of Work",
          "description" : "Shares the org.zenithblox.spi.UnitOfWork with the parent and each of the sub messages. Splitter will by default not share unit of work between the parent exchange and each split exchange. This means each split exchange has its own individual unit of work.",
          "$comment" : "group:advanced"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "step" : {
    "model" : {
      "kind" : "model",
      "name" : "step",
      "title" : "Step",
      "description" : "Routes the message to a sequence of processors which is grouped together as one logical name",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.StepDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "outputs" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "exchangeProperties" : {
      "ZwangineStepId" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "Step Id",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of the Step EIP"
      }
    },
    "propertiesSchema" : {
      "title" : "Step",
      "description" : "Routes the message to a sequence of processors which is grouped together as one logical name",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "stop" : {
    "model" : {
      "kind" : "model",
      "name" : "stop",
      "title" : "Stop",
      "description" : "Stops the processing of the current message",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.StopDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      }
    },
    "propertiesSchema" : {
      "title" : "Stop",
      "description" : "Stops the processing of the current message",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "threads" : {
    "model" : {
      "kind" : "model",
      "name" : "threads",
      "title" : "Threads",
      "description" : "Specifies that all steps after this node are processed asynchronously",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ThreadsDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "executorService" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom thread pool"
      },
      "poolSize" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Pool Size",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the core pool size"
      },
      "maxPoolSize" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Max Pool Size",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum pool size"
      },
      "keepAliveTime" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Keep Alive Time",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Long",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the keep alive time for idle threads"
      },
      "timeUnit" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Time Unit",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.util.concurrent.TimeUnit",
        "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the keep alive time unit. By default SECONDS is used."
      },
      "maxQueueSize" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Max Queue Size",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum number of tasks in the work queue. Use -1 or Integer.MAX_VALUE for an unbounded queue"
      },
      "allowCoreThreadTimeOut" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Allow Core Thread Time Out",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether idle core threads are allowed to timeout and therefore can shrink the pool size below the core pool size Is by default false"
      },
      "threadName" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Thread Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "Threads",
        "description" : "Sets the thread name to use."
      },
      "rejectedPolicy" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Rejected Policy",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.util.concurrent.ThreadPoolRejectedPolicy",
        "enum" : [ "Abort", "CallerRuns" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the handler for tasks which cannot be executed by the thread pool."
      },
      "callerRunsWhenRejected" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Caller Runs When Rejected",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "true",
        "description" : "Whether or not to use as caller runs as fallback when a task is rejected being added to the thread pool (when its full). This is only used as fallback if no rejectedPolicy has been configured, or the thread pool has no configured rejection handler. Is by default true"
      }
    },
    "propertiesSchema" : {
      "title" : "Threads",
      "description" : "Specifies that all steps after this node are processed asynchronously",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "To use a custom thread pool",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "poolSize" : {
          "type" : "number",
          "title" : "Pool Size",
          "description" : "Sets the core pool size",
          "$comment" : "group:common"
        },
        "maxPoolSize" : {
          "type" : "number",
          "title" : "Max Pool Size",
          "description" : "Sets the maximum pool size",
          "$comment" : "group:common"
        },
        "keepAliveTime" : {
          "type" : "number",
          "title" : "Keep Alive Time",
          "description" : "Sets the keep alive time for idle threads",
          "$comment" : "group:common"
        },
        "timeUnit" : {
          "type" : "string",
          "title" : "Time Unit",
          "description" : "Sets the keep alive time unit. By default SECONDS is used.",
          "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ],
          "$comment" : "group:advanced"
        },
        "maxQueueSize" : {
          "type" : "number",
          "title" : "Max Queue Size",
          "description" : "Sets the maximum number of tasks in the work queue. Use -1 or Integer.MAX_VALUE for an unbounded queue",
          "$comment" : "group:common"
        },
        "allowCoreThreadTimeOut" : {
          "type" : "boolean",
          "title" : "Allow Core Thread Time Out",
          "description" : "Whether idle core threads are allowed to timeout and therefore can shrink the pool size below the core pool size Is by default false",
          "$comment" : "group:advanced"
        },
        "threadName" : {
          "type" : "string",
          "title" : "Thread Name",
          "description" : "Sets the thread name to use.",
          "default" : "Threads",
          "$comment" : "group:common"
        },
        "rejectedPolicy" : {
          "type" : "string",
          "title" : "Rejected Policy",
          "description" : "Sets the handler for tasks which cannot be executed by the thread pool.",
          "enum" : [ "Abort", "CallerRuns" ],
          "$comment" : "group:advanced"
        },
        "callerRunsWhenRejected" : {
          "type" : "string",
          "title" : "Caller Runs When Rejected",
          "description" : "Whether or not to use as caller runs as fallback when a task is rejected being added to the thread pool (when its full). This is only used as fallback if no rejectedPolicy has been configured, or the thread pool has no configured rejection handler. Is by default true",
          "default" : "true",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "throttle" : {
    "model" : {
      "kind" : "model",
      "name" : "throttle",
      "title" : "Throttle",
      "description" : "Controls the rate at which messages are passed to the next node in the route",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ThrottleDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to configure the maximum number of messages to throttle per request"
      },
      "mode" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.ThrottlingMode",
        "enum" : [ "TotalRequests", "ConcurrentRequests" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "TotalRequests",
        "description" : "Sets the throttling mode to one of the available modes enumerated in ThrottlingMode"
      },
      "correlationExpression" : {
        "index" : 5,
        "kind" : "expression",
        "displayName" : "Correlation Expression",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ExpressionSubElementDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The expression used to calculate the correlation key to use for throttle grouping. The Exchange which has the same correlation key is throttled together."
      },
      "executorService" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom thread pool (ScheduledExecutorService) by the throttler."
      },
      "asyncDelayed" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Async Delayed",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Enables asynchronous delay which means the thread will not block while delaying."
      },
      "callerRunsWhenRejected" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Caller Runs When Rejected",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the caller should run the task when it was rejected by the thread pool. Is by default true"
      },
      "rejectExecution" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Reject Execution",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not throttler throws the ThrottlerRejectedExecutionException when the exchange exceeds the request limit Is by default false"
      },
      "timePeriodMillis" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Time Period Millis",
        "group" : "common",
        "required" : false,
        "type" : "duration",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "1000",
        "description" : "Sets the time period during which the maximum request count is valid for"
      }
    },
    "propertiesSchema" : {
      "title" : "Throttle",
      "description" : "Controls the rate at which messages are passed to the next node in the route",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to configure the maximum number of messages to throttle per request",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "mode" : {
          "type" : "string",
          "title" : "Mode",
          "description" : "Sets the throttling mode to one of the available modes enumerated in ThrottlingMode",
          "default" : "TotalRequests",
          "enum" : [ "TotalRequests", "ConcurrentRequests" ],
          "$comment" : "group:common"
        },
        "correlationExpression" : {
          "title" : "Correlation Expression",
          "description" : "The expression used to calculate the correlation key to use for throttle grouping. The Exchange which has the same correlation key is throttled together.",
          "$ref" : "#/definitions/org.zenithblox.model.ExpressionSubElementDefinition",
          "$comment" : "group:common",
          "format" : "expressionProperty"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "To use a custom thread pool (ScheduledExecutorService) by the throttler.",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "asyncDelayed" : {
          "type" : "boolean",
          "title" : "Async Delayed",
          "description" : "Enables asynchronous delay which means the thread will not block while delaying.",
          "$comment" : "group:advanced"
        },
        "callerRunsWhenRejected" : {
          "type" : "boolean",
          "title" : "Caller Runs When Rejected",
          "description" : "Whether or not the caller should run the task when it was rejected by the thread pool. Is by default true",
          "$comment" : "group:advanced",
          "default" : true
        },
        "rejectExecution" : {
          "type" : "boolean",
          "title" : "Reject Execution",
          "description" : "Whether or not throttler throws the ThrottlerRejectedExecutionException when the exchange exceeds the request limit Is by default false",
          "$comment" : "group:advanced"
        },
        "timePeriodMillis" : {
          "type" : "string",
          "title" : "Time Period Millis",
          "description" : "Sets the time period during which the maximum request count is valid for",
          "default" : "1000",
          "$comment" : "group:common",
          "format" : "duration"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.ExpressionSubElementDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "constant" ]
                }, {
                  "required" : [ "csimple" ]
                }, {
                  "required" : [ "datasonnet" ]
                }, {
                  "required" : [ "exchangeProperty" ]
                }, {
                  "required" : [ "groovy" ]
                }, {
                  "required" : [ "header" ]
                }, {
                  "required" : [ "hl7terser" ]
                }, {
                  "required" : [ "java" ]
                }, {
                  "required" : [ "joor" ]
                }, {
                  "required" : [ "jq" ]
                }, {
                  "required" : [ "js" ]
                }, {
                  "required" : [ "jsonpath" ]
                }, {
                  "required" : [ "language" ]
                }, {
                  "required" : [ "method" ]
                }, {
                  "required" : [ "mvel" ]
                }, {
                  "required" : [ "ognl" ]
                }, {
                  "required" : [ "python" ]
                }, {
                  "required" : [ "ref" ]
                }, {
                  "required" : [ "simple" ]
                }, {
                  "required" : [ "spel" ]
                }, {
                  "required" : [ "tokenize" ]
                }, {
                  "required" : [ "variable" ]
                }, {
                  "required" : [ "wasm" ]
                }, {
                  "required" : [ "xpath" ]
                }, {
                  "required" : [ "xquery" ]
                }, {
                  "required" : [ "xtokenize" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "throwException" : {
    "model" : {
      "kind" : "model",
      "name" : "throwException",
      "title" : "Throw Exception",
      "description" : "Throws an exception",
      "deprecated" : false,
      "label" : "error",
      "javaType" : "org.zenithblox.model.ThrowExceptionDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "message" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Message",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To create a new exception instance and use the given message as caused message (supports simple language)"
      },
      "exceptionType" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Exception Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The class of the exception to create using the message."
      },
      "ref" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Reference to the exception instance to lookup from the registry to throw"
      }
    },
    "propertiesSchema" : {
      "title" : "Throw Exception",
      "description" : "Throws an exception",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "message" : {
          "type" : "string",
          "title" : "Message",
          "description" : "To create a new exception instance and use the given message as caused message (supports simple language)",
          "$comment" : "group:common"
        },
        "exceptionType" : {
          "type" : "string",
          "title" : "Exception Type",
          "description" : "The class of the exception to create using the message.",
          "$comment" : "group:common"
        },
        "ref" : {
          "type" : "string",
          "title" : "Ref",
          "description" : "Reference to the exception instance to lookup from the registry to throw",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "to" : {
    "model" : {
      "kind" : "model",
      "name" : "to",
      "title" : "To",
      "description" : "Sends the message to a static endpoint",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ToDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "variableSend" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Variable Send",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "variableReceive" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message."
      },
      "uri" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Uri",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the uri of the endpoint to send to."
      },
      "pattern" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.ExchangePattern",
        "enum" : [ "InOnly", "InOut" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the optional ExchangePattern used to invoke this endpoint"
      }
    },
    "exchangeProperties" : {
      "ZwangineToEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "To",
      "description" : "Sends the message to a static endpoint",
      "required" : [ "uri" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "variableSend" : {
          "type" : "string",
          "title" : "Variable Send",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
          "$comment" : "group:common"
        },
        "uri" : {
          "type" : "string",
          "title" : "Uri",
          "description" : "Sets the uri of the endpoint to send to.",
          "$comment" : "group:common"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
          "enum" : [ "InOnly", "InOut" ],
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "toD" : {
    "model" : {
      "kind" : "model",
      "name" : "toD",
      "title" : "To D",
      "description" : "Sends the message to a dynamic endpoint",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.ToDynamicDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "uri" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Uri",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.zenithblox.language.simple.SimpleLanguage expression."
      },
      "variableSend" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Variable Send",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "variableReceive" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current Message , however the headers from the Message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "pattern" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.ExchangePattern",
        "enum" : [ "InOnly", "InOut" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the optional ExchangePattern used to invoke this endpoint"
      },
      "cacheSize" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      },
      "ignoreInvalidEndpoint" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoint",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore invalid endpoint URIs and skip sending the message."
      },
      "allowOptimisedComponents" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Allow Optimised Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to allow components to optimise toD if they are org.zenithblox.spi.SendDynamicAware ."
      },
      "autoStartComponents" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Auto Start Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to auto startup components when toD is starting up."
      }
    },
    "exchangeProperties" : {
      "ZwangineToEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "To D",
      "description" : "Sends the message to a dynamic endpoint",
      "required" : [ "uri" ],
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "uri" : {
          "type" : "string",
          "title" : "Uri",
          "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.zenithblox.language.simple.SimpleLanguage expression.",
          "$comment" : "group:common"
        },
        "variableSend" : {
          "type" : "string",
          "title" : "Variable Send",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current Message , however the headers from the Message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
          "enum" : [ "InOnly", "InOut" ],
          "$comment" : "group:advanced"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "ignoreInvalidEndpoint" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoint",
          "description" : "Whether to ignore invalid endpoint URIs and skip sending the message.",
          "$comment" : "group:advanced"
        },
        "allowOptimisedComponents" : {
          "type" : "boolean",
          "title" : "Allow Optimised Components",
          "description" : "Whether to allow components to optimise toD if they are org.zenithblox.spi.SendDynamicAware .",
          "$comment" : "group:advanced",
          "default" : true
        },
        "autoStartComponents" : {
          "type" : "boolean",
          "title" : "Auto Start Components",
          "description" : "Whether to auto startup components when toD is starting up.",
          "$comment" : "group:advanced",
          "default" : true
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "tokenizer" : {
    "model" : {
      "kind" : "model",
      "name" : "tokenizer",
      "title" : "Specialized tokenizer for AI applications",
      "description" : "Represents a Zwangine tokenizer for AI.",
      "deprecated" : false,
      "firstVersion" : "4.8.0",
      "label" : "eip,transformation,ai",
      "javaType" : "org.zenithblox.model.TokenizerDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "tokenizerImplementation" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Tokenizer Implementation",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.TokenizerImplementationDefinition",
        "oneOf" : [ "langChain4jCharacterTokenizer", "langChain4jLineTokenizer", "langChain4jParagraphTokenizer", "langChain4jSentenceTokenizer", "langChain4jWordTokenizer" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the tokenizer implementation"
      }
    },
    "propertiesSchema" : {
      "title" : "Specialized tokenizer for AI applications",
      "description" : "Represents a Zwangine tokenizer for AI.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "langChain4jCharacterTokenizer" : { },
        "langChain4jLineTokenizer" : { },
        "langChain4jParagraphTokenizer" : { },
        "langChain4jSentenceTokenizer" : { },
        "langChain4jWordTokenizer" : { }
      },
      "anyOf" : [ {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "langChain4jCharacterTokenizer" ],
          "properties" : {
            "langChain4jCharacterTokenizer" : {
              "$ref" : "#/definitions/org.zenithblox.model.tokenizer.LangChain4jCharacterTokenizerDefinition"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "langChain4jCharacterTokenizer" ]
            }, {
              "required" : [ "langChain4jLineTokenizer" ]
            }, {
              "required" : [ "langChain4jParagraphTokenizer" ]
            }, {
              "required" : [ "langChain4jSentenceTokenizer" ]
            }, {
              "required" : [ "langChain4jWordTokenizer" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "langChain4jLineTokenizer" ],
          "properties" : {
            "langChain4jLineTokenizer" : {
              "$ref" : "#/definitions/org.zenithblox.model.tokenizer.LangChain4jTokenizerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "langChain4jParagraphTokenizer" ],
          "properties" : {
            "langChain4jParagraphTokenizer" : {
              "$ref" : "#/definitions/org.zenithblox.model.tokenizer.LangChain4jParagraphTokenizerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "langChain4jSentenceTokenizer" ],
          "properties" : {
            "langChain4jSentenceTokenizer" : {
              "$ref" : "#/definitions/org.zenithblox.model.tokenizer.LangChain4jSentenceTokenizerDefinition"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "langChain4jWordTokenizer" ],
          "properties" : {
            "langChain4jWordTokenizer" : {
              "$ref" : "#/definitions/org.zenithblox.model.tokenizer.LangChain4jWordTokenizerDefinition"
            }
          }
        } ]
      } ],
      "definitions" : {
        "org.zenithblox.model.tokenizer.LangChain4jCharacterTokenizerDefinition" : {
          "title" : "LangChain4J Tokenizer with character splitter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "tokenizerType" : {
              "type" : "string",
              "title" : "Tokenizer Type",
              "description" : "Sets the tokenizer type",
              "enum" : [ "OPEN_AI", "AZURE", "QWEN" ],
              "$comment" : "group:common"
            },
            "maxTokens" : {
              "type" : "number",
              "title" : "Max Tokens",
              "description" : "Sets the maximum number of tokens on each segment",
              "$comment" : "group:common"
            },
            "maxOverlap" : {
              "type" : "number",
              "title" : "Max Overlap",
              "description" : "Sets the maximum number of tokens that can overlap in each segment",
              "$comment" : "group:common"
            }
          },
          "required" : [ "maxOverlap", "maxTokens", "tokenizerType" ]
        },
        "org.zenithblox.model.tokenizer.LangChain4jTokenizerDefinition" : {
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "maxOverlap" : {
              "type" : "number"
            },
            "maxTokens" : {
              "type" : "number"
            },
            "tokenizerType" : {
              "type" : "string",
              "enum" : [ "OPEN_AI", "AZURE", "QWEN" ]
            }
          },
          "required" : [ "maxOverlap", "maxTokens" ]
        },
        "org.zenithblox.model.tokenizer.LangChain4jParagraphTokenizerDefinition" : {
          "title" : "LangChain4J Tokenizer with paragraph splitter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "tokenizerType" : {
              "type" : "string",
              "title" : "Tokenizer Type",
              "description" : "Sets the tokenizer type",
              "enum" : [ "OPEN_AI", "AZURE", "QWEN" ],
              "$comment" : "group:common"
            },
            "maxTokens" : {
              "type" : "number",
              "title" : "Max Tokens",
              "description" : "Sets the maximum number of tokens on each segment",
              "$comment" : "group:common"
            },
            "maxOverlap" : {
              "type" : "number",
              "title" : "Max Overlap",
              "description" : "Sets the maximum number of tokens that can overlap in each segment",
              "$comment" : "group:common"
            }
          },
          "required" : [ "maxOverlap", "maxTokens", "tokenizerType" ]
        },
        "org.zenithblox.model.tokenizer.LangChain4jSentenceTokenizerDefinition" : {
          "title" : "LangChain4J Tokenizer with sentence splitter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "tokenizerType" : {
              "type" : "string",
              "title" : "Tokenizer Type",
              "description" : "Sets the tokenizer type",
              "enum" : [ "OPEN_AI", "AZURE", "QWEN" ],
              "$comment" : "group:common"
            },
            "maxTokens" : {
              "type" : "number",
              "title" : "Max Tokens",
              "description" : "Sets the maximum number of tokens on each segment",
              "$comment" : "group:common"
            },
            "maxOverlap" : {
              "type" : "number",
              "title" : "Max Overlap",
              "description" : "Sets the maximum number of tokens that can overlap in each segment",
              "$comment" : "group:common"
            }
          },
          "required" : [ "maxOverlap", "maxTokens", "tokenizerType" ]
        },
        "org.zenithblox.model.tokenizer.LangChain4jWordTokenizerDefinition" : {
          "title" : "LangChain4J Tokenizer with word splitter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "tokenizerType" : {
              "type" : "string",
              "title" : "Tokenizer Type",
              "description" : "Sets the tokenizer type",
              "enum" : [ "OPEN_AI", "AZURE", "QWEN" ],
              "$comment" : "group:common"
            },
            "maxTokens" : {
              "type" : "number",
              "title" : "Max Tokens",
              "description" : "Sets the maximum number of tokens on each segment",
              "$comment" : "group:common"
            },
            "maxOverlap" : {
              "type" : "number",
              "title" : "Max Overlap",
              "description" : "Sets the maximum number of tokens that can overlap in each segment",
              "$comment" : "group:common"
            }
          },
          "required" : [ "maxOverlap", "maxTokens", "tokenizerType" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "transacted" : {
    "model" : {
      "kind" : "model",
      "name" : "transacted",
      "title" : "Transacted",
      "description" : "Enables transaction on the route",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.TransactedDefinition",
      "abstract" : true,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "ref" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to use for lookup the policy in the registry."
      }
    },
    "propertiesSchema" : {
      "title" : "Transacted",
      "description" : "Enables transaction on the route",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "ref" : {
          "type" : "string",
          "title" : "Ref",
          "description" : "Sets a reference to use for lookup the policy in the registry.",
          "$comment" : "group:common"
        },
        "steps" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/items/definitions/org.zenithblox.model.ProcessorDefinition"
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "transform" : {
    "model" : {
      "kind" : "model",
      "name" : "transform",
      "title" : "Transform",
      "description" : "Transforms the message body based on an expression",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.TransformDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Expression to return the transformed message body (the new message body to use)"
      },
      "fromType" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "From Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "From type used in data type transformation."
      },
      "toType" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "To Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To type used as a target data type in the transformation."
      }
    },
    "propertiesSchema" : {
      "title" : "Transform",
      "description" : "Transforms the message body based on an expression",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to return the transformed message body (the new message body to use)",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "fromType" : {
          "type" : "string",
          "title" : "From Type",
          "description" : "From type used in data type transformation.",
          "$comment" : "group:common"
        },
        "toType" : {
          "type" : "string",
          "title" : "To Type",
          "description" : "To type used as a target data type in the transformation.",
          "$comment" : "group:common"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "doTry" : {
    "model" : {
      "kind" : "model",
      "name" : "doTry",
      "title" : "Do Try",
      "description" : "Marks the beginning of a try, catch, finally block",
      "deprecated" : false,
      "label" : "eip,routing,error",
      "javaType" : "org.zenithblox.model.TryDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "outputs" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "Do Try",
      "description" : "Marks the beginning of a try, catch, finally block",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "unmarshal" : {
    "model" : {
      "kind" : "model",
      "name" : "unmarshal",
      "title" : "Unmarshal",
      "description" : "Converts the message data received from the wire into a format that Apache Zwangine processors can consume",
      "deprecated" : false,
      "label" : "eip,dataformat,transformation",
      "javaType" : "org.zenithblox.model.UnmarshalDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "dataFormatType" : {
        "index" : 3,
        "kind" : "element",
        "displayName" : "Data Format Type",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.DataFormatDefinition",
        "oneOf" : [ "asn1", "avro", "barcode", "base64", "beanio", "bindy", "cbor", "crypto", "csv", "custom", "fhirJson", "fhirXml", "flatpack", "fury", "grok", "gzipDeflater", "hl7", "ical", "jacksonXml", "jaxb", "json", "jsonApi", "lzf", "mimeMultipart", "parquetAvro", "pgp", "protobuf", "rss", "smooks", "soap", "swiftMt", "swiftMx", "syslog", "tarFile", "thrift", "tidyMarkup", "univocityCsv", "univocityFixed", "univocityTsv", "xmlSecurity", "yaml", "zipDeflater", "zipFile" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The data format to be used"
      },
      "variableSend" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Variable Send",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "variableReceive" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message."
      },
      "allowNullBody" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Allow Null Body",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Indicates whether null is allowed as value of a body to unmarshall."
      }
    },
    "propertiesSchema" : {
      "title" : "Unmarshal",
      "description" : "Converts the message data received from the wire into a format that Zenithblox Zwangine processors can consume",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "variableSend" : {
          "type" : "string",
          "title" : "Variable Send",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable to store the received message body (only body, not headers). This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using receive variable then the received body is stored only in this variable and not on the current message.",
          "$comment" : "group:common"
        },
        "allowNullBody" : {
          "type" : "boolean",
          "title" : "Allow Null Body",
          "description" : "Indicates whether null is allowed as value of a body to unmarshall.",
          "$comment" : "group:advanced"
        },
        "asn1" : { },
        "avro" : { },
        "barcode" : { },
        "base64" : { },
        "beanio" : { },
        "bindy" : { },
        "cbor" : { },
        "crypto" : { },
        "csv" : { },
        "custom" : { },
        "fhirJson" : { },
        "fhirXml" : { },
        "flatpack" : { },
        "fury" : { },
        "grok" : { },
        "gzipDeflater" : { },
        "hl7" : { },
        "ical" : { },
        "jacksonXml" : { },
        "jaxb" : { },
        "json" : { },
        "jsonApi" : { },
        "lzf" : { },
        "mimeMultipart" : { },
        "parquetAvro" : { },
        "pgp" : { },
        "protobuf" : { },
        "rss" : { },
        "smooks" : { },
        "soap" : { },
        "swiftMt" : { },
        "swiftMx" : { },
        "syslog" : { },
        "tarFile" : { },
        "thrift" : { },
        "tidyMarkup" : { },
        "univocityCsv" : { },
        "univocityFixed" : { },
        "univocityTsv" : { },
        "xmlSecurity" : { },
        "yaml" : { },
        "zipDeflater" : { },
        "zipFile" : { }
      },
      "anyOf" : [ {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "asn1" ],
          "properties" : {
            "asn1" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ASN1DataFormat"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "asn1" ]
            }, {
              "required" : [ "avro" ]
            }, {
              "required" : [ "barcode" ]
            }, {
              "required" : [ "base64" ]
            }, {
              "required" : [ "beanio" ]
            }, {
              "required" : [ "bindy" ]
            }, {
              "required" : [ "cbor" ]
            }, {
              "required" : [ "crypto" ]
            }, {
              "required" : [ "csv" ]
            }, {
              "required" : [ "custom" ]
            }, {
              "required" : [ "fhirJson" ]
            }, {
              "required" : [ "fhirXml" ]
            }, {
              "required" : [ "flatpack" ]
            }, {
              "required" : [ "fury" ]
            }, {
              "required" : [ "grok" ]
            }, {
              "required" : [ "gzipDeflater" ]
            }, {
              "required" : [ "hl7" ]
            }, {
              "required" : [ "ical" ]
            }, {
              "required" : [ "jacksonXml" ]
            }, {
              "required" : [ "jaxb" ]
            }, {
              "required" : [ "json" ]
            }, {
              "required" : [ "jsonApi" ]
            }, {
              "required" : [ "lzf" ]
            }, {
              "required" : [ "mimeMultipart" ]
            }, {
              "required" : [ "parquetAvro" ]
            }, {
              "required" : [ "pgp" ]
            }, {
              "required" : [ "protobuf" ]
            }, {
              "required" : [ "rss" ]
            }, {
              "required" : [ "smooks" ]
            }, {
              "required" : [ "soap" ]
            }, {
              "required" : [ "swiftMt" ]
            }, {
              "required" : [ "swiftMx" ]
            }, {
              "required" : [ "syslog" ]
            }, {
              "required" : [ "tarFile" ]
            }, {
              "required" : [ "thrift" ]
            }, {
              "required" : [ "tidyMarkup" ]
            }, {
              "required" : [ "univocityCsv" ]
            }, {
              "required" : [ "univocityFixed" ]
            }, {
              "required" : [ "univocityTsv" ]
            }, {
              "required" : [ "xmlSecurity" ]
            }, {
              "required" : [ "yaml" ]
            }, {
              "required" : [ "zipDeflater" ]
            }, {
              "required" : [ "zipFile" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "avro" ],
          "properties" : {
            "avro" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.AvroDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "barcode" ],
          "properties" : {
            "barcode" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BarcodeDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "base64" ],
          "properties" : {
            "base64" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.Base64DataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "beanio" ],
          "properties" : {
            "beanio" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BeanioDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "bindy" ],
          "properties" : {
            "bindy" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.BindyDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "cbor" ],
          "properties" : {
            "cbor" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CBORDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "crypto" ],
          "properties" : {
            "crypto" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CryptoDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "csv" ],
          "properties" : {
            "csv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CsvDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "custom" ],
          "properties" : {
            "custom" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.CustomDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "fhirJson" ],
          "properties" : {
            "fhirJson" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FhirJsonDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "fhirXml" ],
          "properties" : {
            "fhirXml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FhirXmlDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "flatpack" ],
          "properties" : {
            "flatpack" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FlatpackDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "fury" ],
          "properties" : {
            "fury" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.FuryDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "grok" ],
          "properties" : {
            "grok" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.GrokDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "gzipDeflater" ],
          "properties" : {
            "gzipDeflater" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.GzipDeflaterDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "hl7" ],
          "properties" : {
            "hl7" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.HL7DataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "ical" ],
          "properties" : {
            "ical" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.IcalDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "jacksonXml" ],
          "properties" : {
            "jacksonXml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JacksonXMLDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "jaxb" ],
          "properties" : {
            "jaxb" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JaxbDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "json" ],
          "properties" : {
            "json" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JsonDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "jsonApi" ],
          "properties" : {
            "jsonApi" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.JsonApiDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "lzf" ],
          "properties" : {
            "lzf" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.LZFDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "mimeMultipart" ],
          "properties" : {
            "mimeMultipart" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.MimeMultipartDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "parquetAvro" ],
          "properties" : {
            "parquetAvro" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ParquetAvroDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "pgp" ],
          "properties" : {
            "pgp" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.PGPDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "protobuf" ],
          "properties" : {
            "protobuf" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ProtobufDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "rss" ],
          "properties" : {
            "rss" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.RssDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "smooks" ],
          "properties" : {
            "smooks" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SmooksDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "soap" ],
          "properties" : {
            "soap" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SoapDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "swiftMt" ],
          "properties" : {
            "swiftMt" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SwiftMtDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "swiftMx" ],
          "properties" : {
            "swiftMx" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SwiftMxDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "syslog" ],
          "properties" : {
            "syslog" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.SyslogDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "tarFile" ],
          "properties" : {
            "tarFile" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.TarFileDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "thrift" ],
          "properties" : {
            "thrift" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ThriftDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "tidyMarkup" ],
          "properties" : {
            "tidyMarkup" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.TidyMarkupDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "univocityCsv" ],
          "properties" : {
            "univocityCsv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityCsvDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "univocityFixed" ],
          "properties" : {
            "univocityFixed" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityFixedDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "univocityTsv" ],
          "properties" : {
            "univocityTsv" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityTsvDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "xmlSecurity" ],
          "properties" : {
            "xmlSecurity" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.XMLSecurityDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "yaml" ],
          "properties" : {
            "yaml" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "zipDeflater" ],
          "properties" : {
            "zipDeflater" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ZipDeflaterDataFormat"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "zipFile" ],
          "properties" : {
            "zipFile" : {
              "$ref" : "#/definitions/org.zenithblox.model.dataformat.ZipFileDataFormat"
            }
          }
        } ]
      } ],
      "definitions" : {
        "org.zenithblox.model.dataformat.ASN1DataFormat" : {
          "title" : "ASN.1 File",
          "description" : "Encode and decode data structures using Abstract Syntax Notation One (ASN.1).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class to use when unmarshalling.",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the asn1 file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.AvroDataFormat" : {
          "title" : "Avro",
          "description" : "Serialize and deserialize messages using Apache Avro binary data format.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClassName" : {
              "type" : "string",
              "title" : "Instance Class Name",
              "description" : "Class name to use for marshal and unmarshalling",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which Avro library to use.",
              "default" : "avroJackson",
              "enum" : [ "ApacheAvro", "Jackson" ],
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.component.jackson.SchemaResolver"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.BarcodeDataFormat" : {
          "title" : "Barcode",
          "description" : "Transform strings to various 1D/2D barcode bitmap formats and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "barcodeFormat" : {
              "type" : "string",
              "title" : "Barcode Format",
              "description" : "Barcode format such as QR-Code",
              "$comment" : "group:common"
            },
            "imageType" : {
              "type" : "string",
              "title" : "Image Type",
              "description" : "Image type of the barcode such as png",
              "$comment" : "group:common"
            },
            "width" : {
              "type" : "number",
              "title" : "Width",
              "description" : "Width of the barcode",
              "$comment" : "group:common"
            },
            "height" : {
              "type" : "number",
              "title" : "Height",
              "description" : "Height of the barcode",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.Base64DataFormat" : {
          "title" : "Base64",
          "description" : "Encode and decode data using Base64.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "lineLength" : {
              "type" : "number",
              "title" : "Line Length",
              "description" : "To specific a maximum line length for the encoded data. By default 76 is used.",
              "default" : "76",
              "$comment" : "group:common"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separators to use. Uses new line characters (CRLF) by default.",
              "$comment" : "group:advanced"
            },
            "urlSafe" : {
              "type" : "boolean",
              "title" : "Url Safe",
              "description" : "Instead of emitting '' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes. Is by default false.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.BeanioDataFormat" : {
          "title" : "BeanIO",
          "description" : "Marshal and unmarshal Java beans to and from flat files (such as CSV, delimited, or fixed length formats).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "mapping" : {
              "type" : "string",
              "title" : "Mapping",
              "description" : "The BeanIO mapping file. Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file.",
              "$comment" : "group:common"
            },
            "streamName" : {
              "type" : "string",
              "title" : "Stream Name",
              "description" : "The name of the stream to use.",
              "$comment" : "group:common"
            },
            "ignoreUnidentifiedRecords" : {
              "type" : "boolean",
              "title" : "Ignore Unidentified Records",
              "description" : "Whether to ignore unidentified records.",
              "$comment" : "group:common"
            },
            "ignoreUnexpectedRecords" : {
              "type" : "boolean",
              "title" : "Ignore Unexpected Records",
              "description" : "Whether to ignore unexpected records.",
              "$comment" : "group:common"
            },
            "ignoreInvalidRecords" : {
              "type" : "boolean",
              "title" : "Ignore Invalid Records",
              "description" : "Whether to ignore invalid records.",
              "$comment" : "group:common"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "The charset to use. Is by default the JVM platform default charset.",
              "$comment" : "group:advanced"
            },
            "beanReaderErrorHandlerType" : {
              "type" : "string",
              "title" : "Bean Reader Error Handler Type",
              "description" : "To use a custom org.zenithblox.dataformat.beanio.BeanIOErrorHandler as error handler while parsing. Configure the fully qualified class name of the error handler. Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords may not be in use when you use a custom error handler.",
              "$comment" : "group:advanced"
            },
            "unmarshalSingleObject" : {
              "type" : "boolean",
              "title" : "Unmarshal Single Object",
              "description" : "This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter is only intended in special use-cases where beanio maps the Zwangine message to a single POJO bean.",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "mapping", "streamName" ]
        },
        "org.zenithblox.model.dataformat.BindyDataFormat" : {
          "title" : "Bindy",
          "description" : "Marshal and unmarshal Java beans from and to flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to use Csv, Fixed, or KeyValue.",
              "enum" : [ "Csv", "Fixed", "KeyValue" ],
              "$comment" : "group:common"
            },
            "classType" : {
              "type" : "string",
              "title" : "Class Type",
              "description" : "Name of model class to use.",
              "$comment" : "group:common"
            },
            "allowEmptyStream" : {
              "type" : "boolean",
              "title" : "Allow Empty Stream",
              "description" : "Whether to allow empty streams in the unmarshal process. If true, no exception will be thrown when a body without records is provided.",
              "$comment" : "group:common"
            },
            "unwrapSingleInstance" : {
              "type" : "boolean",
              "title" : "Unwrap Single Instance",
              "description" : "When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a java.util.List.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "locale" : {
              "type" : "string",
              "title" : "Locale",
              "description" : "To configure a default locale to use, such as us for united states. To use the JVM platform default locale then use the name default",
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "type" ]
        },
        "org.zenithblox.model.dataformat.CBORDataFormat" : {
          "title" : "CBOR",
          "description" : "Unmarshal a CBOR payload to POJO and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson CBOR ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson CBOR is allowed to attempt to use the ZwangineCBORUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.CryptoDataFormat" : {
          "title" : "Crypto (Java Cryptographic Extension)",
          "description" : "Encrypt and decrypt messages using Java Cryptography Extension (JCE).",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "algorithm" : {
              "type" : "string",
              "title" : "Algorithm",
              "description" : "The JCE algorithm name indicating the cryptographic algorithm that will be used.",
              "$comment" : "group:common"
            },
            "keyRef" : {
              "type" : "string",
              "title" : "Key Ref",
              "description" : "Refers to the secret key to lookup from the register to use.",
              "$comment" : "group:common"
            },
            "cryptoProvider" : {
              "type" : "string",
              "title" : "Crypto Provider",
              "description" : "The name of the JCE Security Provider that should be used.",
              "$comment" : "group:advanced"
            },
            "initVectorRef" : {
              "type" : "string",
              "title" : "Init Vector Ref",
              "description" : "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher.",
              "$comment" : "group:advanced"
            },
            "algorithmParameterRef" : {
              "type" : "string",
              "title" : "Algorithm Parameter Ref",
              "description" : "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type.",
              "$comment" : "group:advanced"
            },
            "bufferSize" : {
              "type" : "number",
              "title" : "Buffer Size",
              "description" : "The size of the buffer used in the signature process.",
              "default" : "4096",
              "$comment" : "group:common"
            },
            "macAlgorithm" : {
              "type" : "string",
              "title" : "Mac Algorithm",
              "description" : "The JCE algorithm name indicating the Message Authentication algorithm.",
              "default" : "HmacSHA1",
              "$comment" : "group:common"
            },
            "shouldAppendHMAC" : {
              "type" : "boolean",
              "title" : "Should Append HMAC",
              "description" : "Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data.",
              "$comment" : "group:common",
              "default" : true
            },
            "inline" : {
              "type" : "boolean",
              "title" : "Inline",
              "description" : "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.CsvDataFormat" : {
          "title" : "CSV",
          "description" : "Handle CSV (Comma Separated Values) payloads.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "formatRef" : {
              "type" : "string",
              "title" : "Format Ref",
              "description" : "The reference format to use, it will be updated with the other format options, the default value is CSVFormat.DEFAULT",
              "$comment" : "group:advanced"
            },
            "formatName" : {
              "type" : "string",
              "title" : "Format Name",
              "description" : "The name of the format to use, the default value is CSVFormat.DEFAULT",
              "default" : "DEFAULT",
              "enum" : [ "DEFAULT", "EXCEL", "INFORMIX_UNLOAD", "INFORMIX_UNLOAD_CSV", "MYSQL", "RFC4180" ],
              "$comment" : "group:advanced"
            },
            "commentMarkerDisabled" : {
              "type" : "boolean",
              "title" : "Comment Marker Disabled",
              "description" : "Disables the comment marker of the reference format.",
              "$comment" : "group:advanced"
            },
            "commentMarker" : {
              "type" : "string",
              "title" : "Comment Marker",
              "description" : "Sets the comment marker of the reference format.",
              "$comment" : "group:advanced"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "Sets the delimiter to use. The default value is , (comma)",
              "$comment" : "group:common"
            },
            "escapeDisabled" : {
              "type" : "boolean",
              "title" : "Escape Disabled",
              "description" : "Use for disabling using escape character",
              "$comment" : "group:advanced"
            },
            "escape" : {
              "type" : "string",
              "title" : "Escape",
              "description" : "Sets the escape character to use",
              "$comment" : "group:advanced"
            },
            "headerDisabled" : {
              "type" : "boolean",
              "title" : "Header Disabled",
              "description" : "Use for disabling headers",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "To configure the CSV headers",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:common"
            },
            "allowMissingColumnNames" : {
              "type" : "boolean",
              "title" : "Allow Missing Column Names",
              "description" : "Whether to allow missing column names.",
              "$comment" : "group:common"
            },
            "ignoreEmptyLines" : {
              "type" : "boolean",
              "title" : "Ignore Empty Lines",
              "description" : "Whether to ignore empty lines.",
              "$comment" : "group:common"
            },
            "ignoreSurroundingSpaces" : {
              "type" : "boolean",
              "title" : "Ignore Surrounding Spaces",
              "description" : "Whether to ignore surrounding spaces",
              "$comment" : "group:common"
            },
            "nullStringDisabled" : {
              "type" : "boolean",
              "title" : "Null String Disabled",
              "description" : "Used to disable null strings",
              "$comment" : "group:advanced"
            },
            "nullString" : {
              "type" : "string",
              "title" : "Null String",
              "description" : "Sets the null string",
              "$comment" : "group:advanced"
            },
            "quoteDisabled" : {
              "type" : "boolean",
              "title" : "Quote Disabled",
              "description" : "Used to disable quotes",
              "$comment" : "group:common"
            },
            "quote" : {
              "type" : "string",
              "title" : "Quote",
              "description" : "Sets the quote to use which by default is double-quote character",
              "$comment" : "group:common"
            },
            "recordSeparatorDisabled" : {
              "type" : "string",
              "title" : "Record Separator Disabled",
              "description" : "Used for disabling record separator",
              "$comment" : "group:common"
            },
            "recordSeparator" : {
              "type" : "string",
              "title" : "Record Separator",
              "description" : "Sets the record separator (aka new line) which by default is new line characters (CRLF)",
              "$comment" : "group:common"
            },
            "skipHeaderRecord" : {
              "type" : "boolean",
              "title" : "Skip Header Record",
              "description" : "Whether to skip the header record in the output",
              "$comment" : "group:common"
            },
            "quoteMode" : {
              "type" : "string",
              "title" : "Quote Mode",
              "description" : "Sets the quote mode",
              "enum" : [ "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE" ],
              "$comment" : "group:common"
            },
            "ignoreHeaderCase" : {
              "type" : "boolean",
              "title" : "Ignore Header Case",
              "description" : "Sets whether or not to ignore case when accessing header names.",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Sets whether or not to trim leading and trailing blanks.",
              "$comment" : "group:common"
            },
            "trailingDelimiter" : {
              "type" : "boolean",
              "title" : "Trailing Delimiter",
              "description" : "Sets whether or not to add a trailing delimiter.",
              "$comment" : "group:common"
            },
            "marshallerFactoryRef" : {
              "type" : "string",
              "title" : "Marshaller Factory Ref",
              "description" : "Sets the implementation of the CsvMarshallerFactory interface which is able to customize marshalling/unmarshalling behavior by extending CsvMarshaller or creating it from scratch.",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one.",
              "$comment" : "group:advanced"
            },
            "useMaps" : {
              "type" : "boolean",
              "title" : "Use Maps",
              "description" : "Whether the unmarshalling should produce maps (HashMap)for the lines values instead of lists. It requires to have header (either defined or collected).",
              "$comment" : "group:common"
            },
            "useOrderedMaps" : {
              "type" : "boolean",
              "title" : "Use Ordered Maps",
              "description" : "Whether the unmarshalling should produce ordered maps (LinkedHashMap) for the lines values instead of lists. It requires to have header (either defined or collected).",
              "$comment" : "group:common"
            },
            "recordConverterRef" : {
              "type" : "string",
              "title" : "Record Converter Ref",
              "description" : "Refers to a custom CsvRecordConverter to lookup from the registry to use.",
              "$comment" : "group:advanced"
            },
            "captureHeaderRecord" : {
              "type" : "boolean",
              "title" : "Capture Header Record",
              "description" : "Whether the unmarshalling should capture the header record and store it in the message header",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.CustomDataFormat" : {
          "title" : "Custom",
          "description" : "Delegate to a custom org.zenithblox.spi.DataFormat implementation via Zwangine registry.",
          "required" : [ "ref" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to the custom org.zenithblox.spi.DataFormat to lookup from the Zwangine registry.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.FhirJsonDataFormat" : {
          "title" : "FHIR JSon",
          "description" : "Marshall and unmarshall FHIR objects to/from JSON.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "fhirVersion" : {
              "type" : "string",
              "title" : "Fhir Version",
              "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
              "default" : "R4",
              "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
              "$comment" : "group:common"
            },
            "fhirContext" : {
              "type" : "string",
              "title" : "Fhir Context",
              "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
              "$comment" : "group:common"
            },
            "parserErrorHandler" : {
              "type" : "string",
              "title" : "Parser Error Handler",
              "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
              "$comment" : "group:advanced"
            },
            "parserOptions" : {
              "type" : "string",
              "title" : "Parser Options",
              "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
              "$comment" : "group:advanced"
            },
            "preferTypes" : {
              "type" : "string",
              "title" : "Prefer Types",
              "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "forceResourceId" : {
              "type" : "string",
              "title" : "Force Resource Id",
              "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
              "$comment" : "group:advanced"
            },
            "serverBaseUrl" : {
              "type" : "string",
              "title" : "Server Base Url",
              "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
              "$comment" : "group:advanced"
            },
            "omitResourceId" : {
              "type" : "boolean",
              "title" : "Omit Resource Id",
              "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
              "$comment" : "group:advanced"
            },
            "encodeElementsAppliesToChildResourcesOnly" : {
              "type" : "boolean",
              "title" : "Encode Elements Applies To Child Resources Only",
              "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
              "$comment" : "group:advanced"
            },
            "encodeElements" : {
              "type" : "string",
              "title" : "Encode Elements",
              "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
              "$comment" : "group:advanced"
            },
            "dontEncodeElements" : {
              "type" : "string",
              "title" : "Dont Encode Elements",
              "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
              "$comment" : "group:advanced"
            },
            "stripVersionsFromReferences" : {
              "type" : "boolean",
              "title" : "Strip Versions From References",
              "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
              "$comment" : "group:advanced"
            },
            "overrideResourceIdWithBundleEntryFullUrl" : {
              "type" : "boolean",
              "title" : "Override Resource Id With Bundle Entry Full Url",
              "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
              "$comment" : "group:advanced"
            },
            "summaryMode" : {
              "type" : "boolean",
              "title" : "Summary Mode",
              "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
              "$comment" : "group:advanced"
            },
            "suppressNarratives" : {
              "type" : "boolean",
              "title" : "Suppress Narratives",
              "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
              "$comment" : "group:advanced"
            },
            "dontStripVersionsFromReferencesAtPaths" : {
              "type" : "string",
              "title" : "Dont Strip Versions From References At Paths",
              "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.FhirXmlDataFormat" : {
          "title" : "FHIR XML",
          "description" : "Marshall and unmarshall FHIR objects to/from XML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "fhirVersion" : {
              "type" : "string",
              "title" : "Fhir Version",
              "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
              "default" : "R4",
              "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
              "$comment" : "group:common"
            },
            "fhirContext" : {
              "type" : "string",
              "title" : "Fhir Context",
              "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible.",
              "$comment" : "group:common"
            },
            "parserErrorHandler" : {
              "type" : "string",
              "title" : "Parser Error Handler",
              "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler",
              "$comment" : "group:advanced"
            },
            "parserOptions" : {
              "type" : "string",
              "title" : "Parser Options",
              "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions.",
              "$comment" : "group:advanced"
            },
            "preferTypes" : {
              "type" : "string",
              "title" : "Prefer Types",
              "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "forceResourceId" : {
              "type" : "string",
              "title" : "Force Resource Id",
              "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType",
              "$comment" : "group:advanced"
            },
            "serverBaseUrl" : {
              "type" : "string",
              "title" : "Server Base Url",
              "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base.",
              "$comment" : "group:advanced"
            },
            "omitResourceId" : {
              "type" : "boolean",
              "title" : "Omit Resource Id",
              "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID.",
              "$comment" : "group:advanced"
            },
            "encodeElementsAppliesToChildResourcesOnly" : {
              "type" : "boolean",
              "title" : "Encode Elements Applies To Child Resources Only",
              "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)",
              "$comment" : "group:advanced"
            },
            "encodeElements" : {
              "type" : "string",
              "title" : "Encode Elements",
              "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded",
              "$comment" : "group:advanced"
            },
            "dontEncodeElements" : {
              "type" : "string",
              "title" : "Dont Encode Elements",
              "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode.",
              "$comment" : "group:advanced"
            },
            "stripVersionsFromReferences" : {
              "type" : "boolean",
              "title" : "Strip Versions From References",
              "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)",
              "$comment" : "group:advanced"
            },
            "overrideResourceIdWithBundleEntryFullUrl" : {
              "type" : "boolean",
              "title" : "Override Resource Id With Bundle Entry Full Url",
              "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id).",
              "$comment" : "group:advanced"
            },
            "summaryMode" : {
              "type" : "boolean",
              "title" : "Summary Mode",
              "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included.",
              "$comment" : "group:advanced"
            },
            "suppressNarratives" : {
              "type" : "boolean",
              "title" : "Suppress Narratives",
              "description" : "If set to true (default is false), narratives will not be included in the encoded values.",
              "$comment" : "group:advanced"
            },
            "dontStripVersionsFromReferencesAtPaths" : {
              "type" : "string",
              "title" : "Dont Strip Versions From References At Paths",
              "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.FlatpackDataFormat" : {
          "title" : "Flatpack",
          "description" : "Marshal and unmarshal Java lists and maps to/from flat files (such as CSV, delimited, or fixed length formats) using Flatpack library.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "definition" : {
              "type" : "string",
              "title" : "Definition",
              "description" : "The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap.",
              "$comment" : "group:common"
            },
            "fixed" : {
              "type" : "boolean",
              "title" : "Fixed",
              "description" : "Delimited or fixed. Is by default false = delimited",
              "$comment" : "group:common"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "The delimiter char (could be ; , or similar)",
              "default" : ",",
              "$comment" : "group:common"
            },
            "ignoreFirstRecord" : {
              "type" : "boolean",
              "title" : "Ignore First Record",
              "description" : "Whether the first line is ignored for delimited files (for the column headers). Is by default true.",
              "$comment" : "group:common",
              "default" : true
            },
            "allowShortLines" : {
              "type" : "boolean",
              "title" : "Allow Short Lines",
              "description" : "Allows for lines to be shorter than expected and ignores the extra characters",
              "$comment" : "group:common"
            },
            "ignoreExtraColumns" : {
              "type" : "boolean",
              "title" : "Ignore Extra Columns",
              "description" : "Allows for lines to be longer than expected and ignores the extra characters.",
              "$comment" : "group:common"
            },
            "textQualifier" : {
              "type" : "string",
              "title" : "Text Qualifier",
              "description" : "If the text is qualified with a character. Uses quote character by default.",
              "$comment" : "group:advanced"
            },
            "parserFactoryRef" : {
              "type" : "string",
              "title" : "Parser Factory Ref",
              "description" : "References to a custom parser factory to lookup in the registry",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.FuryDataFormat" : {
          "title" : "Fury",
          "description" : "Serialize and deserialize messages using Apache Fury",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "requireClassRegistration" : {
              "type" : "boolean",
              "title" : "Require Class Registration",
              "description" : "Whether to require register classes",
              "$comment" : "group:advanced",
              "default" : true
            },
            "threadSafe" : {
              "type" : "boolean",
              "title" : "Thread Safe",
              "description" : "Whether to use the threadsafe fury",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowAutoWiredFury" : {
              "type" : "boolean",
              "title" : "Allow Auto Wired Fury",
              "description" : "Whether to auto-discover Fury from the registry",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.GrokDataFormat" : {
          "title" : "Grok",
          "description" : "Unmarshal unstructured data to objects using Logstash based Grok patterns.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "pattern" : {
              "type" : "string",
              "title" : "Pattern",
              "description" : "The grok pattern to match lines of input",
              "$comment" : "group:common"
            },
            "flattened" : {
              "type" : "boolean",
              "title" : "Flattened",
              "description" : "Turns on flattened mode. In flattened mode the exception is thrown when there are multiple pattern matches with same key.",
              "$comment" : "group:common"
            },
            "allowMultipleMatchesPerLine" : {
              "type" : "boolean",
              "title" : "Allow Multiple Matches Per Line",
              "description" : "If false, every line of input is matched for pattern only once. Otherwise the line can be scanned multiple times when non-terminal pattern is used.",
              "$comment" : "group:common",
              "default" : true
            },
            "namedOnly" : {
              "type" : "boolean",
              "title" : "Named Only",
              "description" : "Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})",
              "$comment" : "group:common"
            }
          },
          "required" : [ "pattern" ]
        },
        "org.zenithblox.model.dataformat.GzipDeflaterDataFormat" : {
          "title" : "GZip Deflater",
          "description" : "Compress and decompress messages using java.util.zip.GZIPStream.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.HL7DataFormat" : {
          "title" : "HL7",
          "description" : "Marshal and unmarshal HL7 (Health Care) model objects using the HL7 MLLP codec.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the HL7 message Is by default true.",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.IcalDataFormat" : {
          "title" : "iCal",
          "description" : "Marshal and unmarshal iCal (.ics) documents to/from model objects.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "validating" : {
              "type" : "boolean",
              "title" : "Validating",
              "description" : "Whether to validate.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.JacksonXMLDataFormat" : {
          "title" : "Jackson XML",
          "description" : "Unmarshal an XML payloads to POJOs and back using XMLMapper extension of Jackson.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "xmlMapper" : {
              "type" : "string",
              "title" : "Xml Mapper",
              "description" : "Lookup and use the existing XmlMapper with the given id.",
              "$comment" : "group:advanced"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "enableJaxbAnnotationModule" : {
              "type" : "boolean",
              "title" : "Enable Jaxb Annotation Module",
              "description" : "Whether to enable the JAXB annotations module when using jackson. When enabled then JAXB annotations can be used by Jackson.",
              "$comment" : "group:advanced"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.JaxbDataFormat" : {
          "title" : "JAXB",
          "description" : "Unmarshal XML payloads to POJOs and back using JAXB2 XML marshalling standard.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "contextPath" : {
              "type" : "string",
              "title" : "Context Path",
              "description" : "Package name where your JAXB classes are located.",
              "$comment" : "group:common"
            },
            "contextPathIsClassName" : {
              "type" : "boolean",
              "title" : "Context Path Is Class Name",
              "description" : "This can be set to true to mark that the contextPath is referring to a classname and not a package name.",
              "$comment" : "group:common"
            },
            "schema" : {
              "type" : "string",
              "title" : "Schema",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "$comment" : "group:common"
            },
            "schemaSeverityLevel" : {
              "type" : "string",
              "title" : "Schema Severity Level",
              "description" : "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error.",
              "default" : "0",
              "enum" : [ "0", "1", "2" ],
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common",
              "default" : true
            },
            "objectFactory" : {
              "type" : "boolean",
              "title" : "Object Factory",
              "description" : "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "ignoreJAXBElement" : {
              "type" : "boolean",
              "title" : "Ignore JAXBElement",
              "description" : "Whether to ignore JAXBElement elements - only needed to be set to false in very special use-cases.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "mustBeJAXBElement" : {
              "type" : "boolean",
              "title" : "Must Be JAXBElement",
              "description" : "Whether marhsalling must be java objects with JAXB annotations. And if not then it fails. This option can be set to false to relax that, such as when the data is already in XML format.",
              "$comment" : "group:advanced"
            },
            "filterNonXmlChars" : {
              "type" : "boolean",
              "title" : "Filter Non Xml Chars",
              "description" : "To ignore non xml characheters and replace them with an empty space.",
              "$comment" : "group:advanced"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "To overrule and use a specific encoding",
              "$comment" : "group:common"
            },
            "fragment" : {
              "type" : "boolean",
              "title" : "Fragment",
              "description" : "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Zwangine will pass this class to JAXB's unmarshaler.",
              "$comment" : "group:advanced"
            },
            "partClass" : {
              "type" : "string",
              "title" : "Part Class",
              "description" : "Name of class used for fragment parsing. See more details at the fragment option.",
              "$comment" : "group:advanced"
            },
            "partNamespace" : {
              "type" : "string",
              "title" : "Part Namespace",
              "description" : "XML namespace to use for fragment parsing. See more details at the fragment option.",
              "$comment" : "group:advanced"
            },
            "namespacePrefixRef" : {
              "type" : "string",
              "title" : "Namespace Prefix Ref",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping.",
              "$comment" : "group:advanced"
            },
            "xmlStreamWriterWrapper" : {
              "type" : "string",
              "title" : "Xml Stream Writer Wrapper",
              "description" : "To use a custom xml stream writer.",
              "$comment" : "group:advanced"
            },
            "schemaLocation" : {
              "type" : "string",
              "title" : "Schema Location",
              "description" : "To define the location of the schema",
              "$comment" : "group:common"
            },
            "noNamespaceSchemaLocation" : {
              "type" : "string",
              "title" : "No Namespace Schema Location",
              "description" : "To define the location of the namespaceless schema",
              "$comment" : "group:advanced"
            },
            "jaxbProviderProperties" : {
              "type" : "string",
              "title" : "Jaxb Provider Properties",
              "description" : "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller.",
              "$comment" : "group:advanced"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "accessExternalSchemaProtocols" : {
              "type" : "string",
              "title" : "Access External Schema Protocols",
              "description" : "Only in use if schema validation has been enabled. Restrict access to the protocols specified for external reference set by the schemaLocation attribute, Import and Include element. Examples of protocols are file, http, jar:file. false or none to deny all access to external references; a specific protocol, such as file, to give permission to only the protocol; the keyword all to grant permission to all protocols.",
              "default" : "false",
              "$comment" : "group:security"
            }
          },
          "required" : [ "contextPath" ]
        },
        "org.zenithblox.model.dataformat.JsonDataFormat" : {
          "title" : "JSon",
          "description" : "Marshal POJOs to JSON and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:common"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will look for an objectMapper to use from the registry",
              "$comment" : "group:common"
            },
            "prettyPrint" : {
              "type" : "boolean",
              "title" : "Pretty Print",
              "description" : "To enable pretty printing output nicely formatted. Is by default false.",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which json library to use.",
              "default" : "Jackson",
              "enum" : [ "Fastjson", "Gson", "Jackson", "Johnzon", "Jsonb" ],
              "$comment" : "group:common"
            },
            "combineUnicodeSurrogates" : {
              "type" : "boolean",
              "title" : "Combine Unicode Surrogates",
              "description" : "Force generator that outputs JSON content to combine surrogate pairs (if any) into 4-byte characters. This should be preferred when using 4-byte characters such as Japanese.",
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:advanced"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:advanced"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows using different collection types than java.util.Collection based as default.",
              "$comment" : "group:advanced"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:advanced"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:advanced"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling. This option will have no effect on the others Json DataFormat, like gson and fastjson.",
              "$comment" : "group:advanced"
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced",
              "format" : "bean:org.zenithblox.component.jackson.SchemaResolver"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namingStrategy" : {
              "type" : "string",
              "title" : "Naming Strategy",
              "description" : "If set then Jackson will use the the defined Property Naming Strategy.Possible values are: LOWER_CAMEL_CASE, LOWER_DOT_CASE, LOWER_CASE, KEBAB_CASE, SNAKE_CASE and UPPER_CAMEL_CASE",
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            },
            "dateFormatPattern" : {
              "type" : "string",
              "title" : "Date Format Pattern",
              "description" : "To configure the date format while marshall or unmarshall Date fields in JSON using Gson",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.JsonApiDataFormat" : {
          "title" : "JSonApi",
          "description" : "Marshal and unmarshal JSON:API resources using JSONAPI-Converter library.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "dataFormatTypes" : {
              "type" : "string",
              "title" : "Data Format Types",
              "description" : "The classes to take into account for the marshalling. Multiple classes can be separated by comma.",
              "$comment" : "group:common"
            },
            "mainFormatType" : {
              "type" : "string",
              "title" : "Main Format Type",
              "description" : "The class to take into account while unmarshalling.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.LZFDataFormat" : {
          "title" : "LZF Deflate Compression",
          "description" : "Compress and decompress streams using LZF deflate algorithm.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingParallelCompression" : {
              "type" : "boolean",
              "title" : "Using Parallel Compression",
              "description" : "Enable encoding (compress) using multiple processing cores.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.MimeMultipartDataFormat" : {
          "title" : "MIME Multipart",
          "description" : "Marshal Zwangine messages with attachments into MIME-Multipart messages and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "multipartSubType" : {
              "type" : "string",
              "title" : "Multipart Sub Type",
              "description" : "Specify the subtype of the MIME Multipart. Default is mixed.",
              "default" : "mixed",
              "$comment" : "group:common"
            },
            "multipartWithoutAttachment" : {
              "type" : "boolean",
              "title" : "Multipart Without Attachment",
              "description" : "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false.",
              "$comment" : "group:common"
            },
            "headersInline" : {
              "type" : "boolean",
              "title" : "Headers Inline",
              "description" : "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Zwangine headers (false). Default is false.",
              "$comment" : "group:common"
            },
            "includeHeaders" : {
              "type" : "string",
              "title" : "Include Headers",
              "description" : "A regex that defines which Zwangine headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers",
              "$comment" : "group:common"
            },
            "binaryContent" : {
              "type" : "boolean",
              "title" : "Binary Content",
              "description" : "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ParquetAvroDataFormat" : {
          "title" : "Parquet File",
          "description" : "Parquet Avro serialization and de-serialization.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "compressionCodecName" : {
              "type" : "string",
              "title" : "Compression Codec Name",
              "description" : "Compression codec to use when marshalling.",
              "default" : "GZIP",
              "enum" : [ "UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD", "LZ4_RAW" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class to use when (un)marshalling. If omitted, parquet files are converted into Avro's GenericRecords for unmarshalling and input objects are assumed as GenericRecords for marshalling.",
              "$comment" : "group:common"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator of records or read all the records at once.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.PGPDataFormat" : {
          "title" : "PGP",
          "description" : "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "keyUserid" : {
              "type" : "string",
              "title" : "Key Userid",
              "description" : "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID.",
              "$comment" : "group:common"
            },
            "signatureKeyUserid" : {
              "type" : "string",
              "title" : "Signature Key Userid",
              "description" : "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID.",
              "$comment" : "group:common"
            },
            "password" : {
              "type" : "string",
              "title" : "Password",
              "description" : "Password used when opening the private key (not used for encryption).",
              "$comment" : "group:common"
            },
            "signaturePassword" : {
              "type" : "string",
              "title" : "Signature Password",
              "description" : "Password used when opening the private key used for signing (during encryption).",
              "$comment" : "group:common"
            },
            "keyFileName" : {
              "type" : "string",
              "title" : "Key File Name",
              "description" : "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
              "$comment" : "group:common"
            },
            "signatureKeyFileName" : {
              "type" : "string",
              "title" : "Signature Key File Name",
              "description" : "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
              "$comment" : "group:common"
            },
            "signatureKeyRing" : {
              "type" : "string",
              "title" : "Signature Key Ring",
              "description" : "Keyring used for signing/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time.",
              "$comment" : "group:common"
            },
            "armored" : {
              "type" : "boolean",
              "title" : "Armored",
              "description" : "This option will cause PGP to base64 encode the encrypted text, making it available for copy/paste, etc.",
              "$comment" : "group:common"
            },
            "integrity" : {
              "type" : "boolean",
              "title" : "Integrity",
              "description" : "Adds an integrity check/sign into the encryption file. The default value is true.",
              "$comment" : "group:common",
              "default" : true
            },
            "provider" : {
              "type" : "string",
              "title" : "Provider",
              "description" : "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work.",
              "$comment" : "group:common"
            },
            "algorithm" : {
              "type" : "number",
              "title" : "Algorithm",
              "description" : "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting.",
              "$comment" : "group:common"
            },
            "compressionAlgorithm" : {
              "type" : "number",
              "title" : "Compression Algorithm",
              "description" : "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting.",
              "$comment" : "group:common"
            },
            "hashAlgorithm" : {
              "type" : "number",
              "title" : "Hash Algorithm",
              "description" : "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing.",
              "$comment" : "group:common"
            },
            "signatureVerificationOption" : {
              "type" : "string",
              "title" : "Signature Verification Option",
              "description" : "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ProtobufDataFormat" : {
          "title" : "Protobuf",
          "description" : "Serialize and deserialize Java objects using Google's Protocol buffers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClass" : {
              "type" : "string",
              "title" : "Instance Class",
              "description" : "Name of class to use when unmarshalling",
              "$comment" : "group:common"
            },
            "objectMapper" : {
              "type" : "string",
              "title" : "Object Mapper",
              "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson.",
              "$comment" : "group:advanced"
            },
            "useDefaultObjectMapper" : {
              "type" : "boolean",
              "title" : "Use Default Object Mapper",
              "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry.",
              "$comment" : "group:common",
              "default" : true
            },
            "autoDiscoverObjectMapper" : {
              "type" : "boolean",
              "title" : "Auto Discover Object Mapper",
              "description" : "If set to true then Jackson will lookup for an objectMapper into the registry",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which Protobuf library to use.",
              "default" : "GoogleProtobuf",
              "enum" : [ "GoogleProtobuf", "Jackson" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "jsonView" : {
              "type" : "string",
              "title" : "Json View",
              "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations",
              "$comment" : "group:common"
            },
            "include" : {
              "type" : "string",
              "title" : "Include",
              "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL",
              "$comment" : "group:common"
            },
            "allowJmsType" : {
              "type" : "boolean",
              "title" : "Allow Jms Type",
              "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.",
              "$comment" : "group:advanced"
            },
            "collectionType" : {
              "type" : "string",
              "title" : "Collection Type",
              "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default.",
              "$comment" : "group:common"
            },
            "useList" : {
              "type" : "boolean",
              "title" : "Use List",
              "description" : "To unmarshal to a List of Map or a List of Pojo.",
              "$comment" : "group:common"
            },
            "moduleClassNames" : {
              "type" : "string",
              "title" : "Module Class Names",
              "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "moduleRefs" : {
              "type" : "string",
              "title" : "Module Refs",
              "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma.",
              "$comment" : "group:advanced"
            },
            "enableFeatures" : {
              "type" : "string",
              "title" : "Enable Features",
              "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "disableFeatures" : {
              "type" : "string",
              "title" : "Disable Features",
              "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma",
              "$comment" : "group:common"
            },
            "allowUnmarshallType" : {
              "type" : "boolean",
              "title" : "Allow Unmarshall Type",
              "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used.",
              "$comment" : "group:common"
            },
            "timezone" : {
              "type" : "string",
              "title" : "Timezone",
              "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling.",
              "$comment" : "group:advanced"
            },
            "schemaResolver" : {
              "type" : "string",
              "title" : "Schema Resolver",
              "description" : "Optional schema resolver used to lookup schemas for the data in transit.",
              "$comment" : "group:advanced"
            },
            "autoDiscoverSchemaResolver" : {
              "type" : "boolean",
              "title" : "Auto Discover Schema Resolver",
              "description" : "When not disabled, the SchemaResolver will be looked up into the registry",
              "$comment" : "group:advanced",
              "default" : true
            },
            "contentTypeFormat" : {
              "type" : "string",
              "title" : "Content Type Format",
              "description" : "Defines a content type format in which protobuf message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native protobuf or json fields representation. The default value is native.",
              "default" : "native",
              "enum" : [ "native", "json" ],
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.RssDataFormat" : {
          "title" : "RSS",
          "description" : "Transform from ROME SyndFeed Java Objects to XML and vice-versa.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.SmooksDataFormat" : {
          "title" : "Smooks",
          "description" : "Transform and bind XML as well as non-XML data, including EDI, CSV, JSON, and YAML using Smooks.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "smooksConfig" : {
              "type" : "string",
              "title" : "Smooks Config",
              "description" : "Path to the Smooks configuration file.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "smooksConfig" ]
        },
        "org.zenithblox.model.dataformat.SoapDataFormat" : {
          "title" : "SOAP",
          "description" : "Marshal Java objects to SOAP messages and back.",
          "required" : [ "contextPath" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "contextPath" : {
              "type" : "string",
              "title" : "Context Path",
              "description" : "Package name where your JAXB classes are located.",
              "$comment" : "group:common"
            },
            "encoding" : {
              "type" : "string",
              "title" : "Encoding",
              "description" : "To overrule and use a specific encoding",
              "$comment" : "group:common"
            },
            "elementNameStrategyRef" : {
              "type" : "string",
              "title" : "Element Name Strategy Ref",
              "description" : "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.zenithblox.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.",
              "$comment" : "group:advanced"
            },
            "version" : {
              "type" : "string",
              "title" : "Version",
              "description" : "SOAP version should either be 1.1 or 1.2. Is by default 1.1",
              "default" : "1.1",
              "enum" : [ "1.1", "1.2" ],
              "$comment" : "group:common"
            },
            "namespacePrefixRef" : {
              "type" : "string",
              "title" : "Namespace Prefix Ref",
              "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping.",
              "$comment" : "group:advanced"
            },
            "schema" : {
              "type" : "string",
              "title" : "Schema",
              "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.SwiftMtDataFormat" : {
          "title" : "SWIFT MT",
          "description" : "Encode and decode SWIFT MT messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "writeInJson" : {
              "type" : "boolean",
              "title" : "Write In Json",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.SwiftMxDataFormat" : {
          "title" : "SWIFT MX",
          "description" : "Encode and decode SWIFT MX messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "writeConfigRef" : {
              "type" : "string",
              "title" : "Write Config Ref",
              "description" : "Refers to a specific configuration to use when marshalling a message to lookup from the registry.",
              "$comment" : "group:advanced"
            },
            "writeInJson" : {
              "type" : "boolean",
              "title" : "Write In Json",
              "description" : "The flag indicating that messages must be marshalled in a JSON format.",
              "$comment" : "group:advanced"
            },
            "readMessageId" : {
              "type" : "string",
              "title" : "Read Message Id",
              "description" : "The type of MX message to produce when unmarshalling an input stream. If not set, it will be automatically detected from the namespace used.",
              "$comment" : "group:advanced"
            },
            "readConfigRef" : {
              "type" : "string",
              "title" : "Read Config Ref",
              "description" : "Refers to a specific configuration to use when unmarshalling an input stream to lookup from the registry.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.SyslogDataFormat" : {
          "title" : "Syslog",
          "description" : "Marshall SyslogMessages to RFC3164 and RFC5424 messages and back.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.TarFileDataFormat" : {
          "title" : "Tar File",
          "description" : "Archive files into tarballs or extract files from tarballs.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the tar file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            },
            "allowEmptyDirectory" : {
              "type" : "boolean",
              "title" : "Allow Empty Directory",
              "description" : "If the tar file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
              "$comment" : "group:common"
            },
            "preservePathElements" : {
              "type" : "boolean",
              "title" : "Preserve Path Elements",
              "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the tar file.",
              "$comment" : "group:common"
            },
            "maxDecompressedSize" : {
              "type" : "number",
              "title" : "Max Decompressed Size",
              "description" : "Set the maximum decompressed size of a tar file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
              "default" : "1073741824",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.ThriftDataFormat" : {
          "title" : "Thrift",
          "description" : "Serialize and deserialize messages using Apache Thrift binary data format.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "instanceClass" : {
              "type" : "string",
              "title" : "Instance Class",
              "description" : "Name of class to use when unmarshalling",
              "$comment" : "group:common"
            },
            "contentTypeFormat" : {
              "type" : "string",
              "title" : "Content Type Format",
              "description" : "Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native binary thrift, json or simple json fields representation. The default value is binary.",
              "default" : "binary",
              "enum" : [ "binary", "json", "sjson" ],
              "$comment" : "group:common"
            },
            "contentTypeHeader" : {
              "type" : "boolean",
              "title" : "Content Type Header",
              "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.TidyMarkupDataFormat" : {
          "title" : "TidyMarkup",
          "description" : "Parse (potentially invalid) HTML into valid HTML or DOM.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "dataObjectType" : {
              "type" : "string",
              "title" : "Data Object Type",
              "description" : "What data type to unmarshal as, can either be org.w3c.dom.Node or java.lang.String. Is by default org.w3c.dom.Node",
              "default" : "org.w3c.dom.Node",
              "enum" : [ "org.w3c.dom.Node", "java.lang.String" ],
              "$comment" : "group:common"
            },
            "omitXmlDeclaration" : {
              "type" : "boolean",
              "title" : "Omit Xml Declaration",
              "description" : "When returning a String, do we omit the XML declaration in the top.",
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityCsvDataFormat" : {
          "title" : "uniVocity CSV",
          "description" : "Marshal and unmarshal Java objects from and to CSV (Comma Separated Values) using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "delimiter" : {
              "type" : "string",
              "title" : "Delimiter",
              "description" : "The delimiter of values",
              "default" : ",",
              "$comment" : "group:common"
            },
            "quoteAllFields" : {
              "type" : "boolean",
              "title" : "Quote All Fields",
              "description" : "Whether or not all values must be quoted when writing them.",
              "$comment" : "group:common"
            },
            "quote" : {
              "type" : "string",
              "title" : "Quote",
              "description" : "The quote symbol.",
              "default" : "\"",
              "$comment" : "group:advanced"
            },
            "quoteEscape" : {
              "type" : "string",
              "title" : "Quote Escape",
              "description" : "The quote escape symbol",
              "default" : "\"",
              "$comment" : "group:advanced"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityHeader" : {
          "title" : "uniVocity Header",
          "description" : "To configure headers for UniVocity data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Header name",
              "$comment" : "group:common"
            },
            "length" : {
              "type" : "string",
              "title" : "Length",
              "description" : "Header length",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.dataformat.UniVocityFixedDataFormat" : {
          "title" : "uniVocity Fixed Length",
          "description" : "Marshal and unmarshal Java objects from and to fixed length records using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "padding" : {
              "type" : "string",
              "title" : "Padding",
              "description" : "The padding character. The default value is a space",
              "$comment" : "group:common"
            },
            "skipTrailingCharsUntilNewline" : {
              "type" : "boolean",
              "title" : "Skip Trailing Chars Until Newline",
              "description" : "Whether or not the trailing characters until new line must be ignored. The default value is false",
              "$comment" : "group:common"
            },
            "recordEndsOnNewline" : {
              "type" : "boolean",
              "title" : "Record Ends On Newline",
              "description" : "Whether or not the record ends on new line. The default value is false",
              "$comment" : "group:common"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.UniVocityTsvDataFormat" : {
          "title" : "uniVocity TSV",
          "description" : "Marshal and unmarshal Java objects from and to TSV (Tab-Separated Values) records using UniVocity Parsers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "escapeChar" : {
              "type" : "string",
              "title" : "Escape Char",
              "description" : "The escape character.",
              "default" : "\\",
              "$comment" : "group:advanced"
            },
            "nullValue" : {
              "type" : "string",
              "title" : "Null Value",
              "description" : "The string representation of a null value. The default value is null",
              "$comment" : "group:advanced"
            },
            "skipEmptyLines" : {
              "type" : "boolean",
              "title" : "Skip Empty Lines",
              "description" : "Whether or not the empty lines must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreTrailingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Trailing Whitespaces",
              "description" : "Whether or not the trailing white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "ignoreLeadingWhitespaces" : {
              "type" : "boolean",
              "title" : "Ignore Leading Whitespaces",
              "description" : "Whether or not the leading white spaces must be ignored. The default value is true",
              "$comment" : "group:common",
              "default" : true
            },
            "headersDisabled" : {
              "type" : "boolean",
              "title" : "Headers Disabled",
              "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false",
              "$comment" : "group:common"
            },
            "headerExtractionEnabled" : {
              "type" : "boolean",
              "title" : "Header Extraction Enabled",
              "description" : "Whether or not the header must be read in the first line of the test document. The default value is false",
              "$comment" : "group:common"
            },
            "numberOfRecordsToRead" : {
              "type" : "number",
              "title" : "Number Of Records To Read",
              "description" : "The maximum number of record to read.",
              "$comment" : "group:advanced"
            },
            "emptyValue" : {
              "type" : "string",
              "title" : "Empty Value",
              "description" : "The String representation of an empty value.",
              "$comment" : "group:advanced"
            },
            "lineSeparator" : {
              "type" : "string",
              "title" : "Line Separator",
              "description" : "The line separator of the files. The default value is to use the JVM platform line separator",
              "$comment" : "group:advanced"
            },
            "normalizedLineSeparator" : {
              "type" : "string",
              "title" : "Normalized Line Separator",
              "description" : "The normalized line separator of the files. The default value is a new line character.",
              "$comment" : "group:advanced"
            },
            "comment" : {
              "type" : "string",
              "title" : "Comment",
              "description" : "The comment symbol. The default value is #",
              "default" : "#",
              "$comment" : "group:advanced"
            },
            "lazyLoad" : {
              "type" : "boolean",
              "title" : "Lazy Load",
              "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false",
              "$comment" : "group:common"
            },
            "asMap" : {
              "type" : "boolean",
              "title" : "As Map",
              "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false",
              "$comment" : "group:common"
            },
            "univocityHeader" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
              }
            }
          }
        },
        "org.zenithblox.model.dataformat.XMLSecurityDataFormat" : {
          "title" : "XML Security",
          "description" : "Encrypt and decrypt XML payloads using Apache Santuario.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "xmlCipherAlgorithm" : {
              "type" : "string",
              "title" : "Xml Cipher Algorithm",
              "description" : "The cipher algorithm to be used for encryption/decryption of the XML message content. The available choices are: XMLCipher.TRIPLEDES XMLCipher.AES_128 XMLCipher.AES_128_GCM XMLCipher.AES_192 XMLCipher.AES_192_GCM XMLCipher.AES_256 XMLCipher.AES_256_GCM XMLCipher.SEED_128 XMLCipher.CAMELLIA_128 XMLCipher.CAMELLIA_192 XMLCipher.CAMELLIA_256 The default value is XMLCipher.AES_256_GCM",
              "default" : "AES-256-GCM",
              "enum" : [ "TRIPLEDES", "AES_128", "AES_128_GCM", "AES_192", "AES_192_GCM", "AES_256", "AES_256_GCM", "SEED_128", "CAMELLIA_128", "CAMELLIA_192", "CAMELLIA_256" ],
              "$comment" : "group:common"
            },
            "passPhrase" : {
              "type" : "string",
              "title" : "Pass Phrase",
              "description" : "A String used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
              "$comment" : "group:common"
            },
            "passPhraseByte" : {
              "type" : "string",
              "title" : "Pass Phrase Byte",
              "description" : "A byte used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
              "format" : "binary",
              "$comment" : "group:advanced"
            },
            "secureTag" : {
              "type" : "string",
              "title" : "Secure Tag",
              "description" : "The XPath reference to the XML Element selected for encryption/decryption. If no tag is specified, the entire payload is encrypted/decrypted.",
              "$comment" : "group:common"
            },
            "secureTagContents" : {
              "type" : "boolean",
              "title" : "Secure Tag Contents",
              "description" : "A boolean value to specify whether the XML Element is to be encrypted or the contents of the XML Element. false = Element Level. true = Element Content Level.",
              "$comment" : "group:common"
            },
            "keyCipherAlgorithm" : {
              "type" : "string",
              "title" : "Key Cipher Algorithm",
              "description" : "The cipher algorithm to be used for encryption/decryption of the asymmetric key. The available choices are: XMLCipher.RSA_v1dot5 XMLCipher.RSA_OAEP XMLCipher.RSA_OAEP_11 The default value is XMLCipher.RSA_OAEP",
              "default" : "RSA_OAEP",
              "enum" : [ "RSA_v1dot5", "RSA_OAEP", "RSA_OAEP_11" ],
              "$comment" : "group:common"
            },
            "recipientKeyAlias" : {
              "type" : "string",
              "title" : "Recipient Key Alias",
              "description" : "The key alias to be used when retrieving the recipient's public or private key from a KeyStore when performing asymmetric key encryption or decryption.",
              "$comment" : "group:common"
            },
            "keyOrTrustStoreParametersRef" : {
              "type" : "string",
              "title" : "Key Or Trust Store Parameters Ref",
              "description" : "Refers to a KeyStore instance to lookup in the registry, which is used for configuration options for creating and loading a KeyStore instance that represents the sender's trustStore or recipient's keyStore.",
              "$comment" : "group:common"
            },
            "keyPassword" : {
              "type" : "string",
              "title" : "Key Password",
              "description" : "The password to be used for retrieving the private key from the KeyStore. This key is used for asymmetric decryption.",
              "$comment" : "group:common"
            },
            "digestAlgorithm" : {
              "type" : "string",
              "title" : "Digest Algorithm",
              "description" : "The digest algorithm to use with the RSA OAEP algorithm. The available choices are: XMLCipher.SHA1 XMLCipher.SHA256 XMLCipher.SHA512 The default value is XMLCipher.SHA1",
              "default" : "SHA1",
              "enum" : [ "SHA1", "SHA256", "SHA512" ],
              "$comment" : "group:common"
            },
            "mgfAlgorithm" : {
              "type" : "string",
              "title" : "Mgf Algorithm",
              "description" : "The MGF Algorithm to use with the RSA OAEP algorithm. The available choices are: EncryptionConstants.MGF1_SHA1 EncryptionConstants.MGF1_SHA256 EncryptionConstants.MGF1_SHA512 The default value is EncryptionConstants.MGF1_SHA1",
              "default" : "MGF1_SHA1",
              "enum" : [ "MGF1_SHA1", "MGF1_SHA256", "MGF1_SHA512" ],
              "$comment" : "group:common"
            },
            "addKeyValueForEncryptedKey" : {
              "type" : "boolean",
              "title" : "Add Key Value For Encrypted Key",
              "description" : "Whether to add the public key used to encrypt the session key as a KeyValue in the EncryptedKey structure or not.",
              "$comment" : "group:common",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.dataformat.YAMLDataFormat" : {
          "title" : "YAML",
          "description" : "Marshal and unmarshal Java objects to and from YAML.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "library" : {
              "type" : "string",
              "title" : "Library",
              "description" : "Which yaml library to use. By default it is SnakeYAML",
              "default" : "SnakeYAML",
              "enum" : [ "SnakeYAML" ],
              "$comment" : "group:common"
            },
            "unmarshalType" : {
              "type" : "string",
              "title" : "Unmarshal Type",
              "description" : "Class name of the java type to use when unmarshalling",
              "$comment" : "group:common"
            },
            "constructor" : {
              "type" : "string",
              "title" : "Constructor",
              "description" : "BaseConstructor to construct incoming documents.",
              "$comment" : "group:advanced"
            },
            "representer" : {
              "type" : "string",
              "title" : "Representer",
              "description" : "Representer to emit outgoing objects.",
              "$comment" : "group:advanced"
            },
            "dumperOptions" : {
              "type" : "string",
              "title" : "Dumper Options",
              "description" : "DumperOptions to configure outgoing objects.",
              "$comment" : "group:advanced"
            },
            "resolver" : {
              "type" : "string",
              "title" : "Resolver",
              "description" : "Resolver to detect implicit type",
              "$comment" : "group:advanced"
            },
            "useApplicationContextClassLoader" : {
              "type" : "boolean",
              "title" : "Use Application Context Class Loader",
              "description" : "Use ApplicationContextClassLoader as custom ClassLoader",
              "$comment" : "group:common",
              "default" : true
            },
            "prettyFlow" : {
              "type" : "boolean",
              "title" : "Pretty Flow",
              "description" : "Force the emitter to produce a pretty YAML document when using the flow style.",
              "$comment" : "group:common"
            },
            "allowAnyType" : {
              "type" : "boolean",
              "title" : "Allow Any Type",
              "description" : "Allow any class to be un-marshaled",
              "$comment" : "group:common"
            },
            "typeFilter" : {
              "type" : "array",
              "title" : "Type Filter",
              "description" : "Set the types SnakeYAML is allowed to un-marshall",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLTypeFilterDefinition"
              },
              "$comment" : "group:common"
            },
            "maxAliasesForCollections" : {
              "type" : "number",
              "title" : "Max Aliases For Collections",
              "description" : "Set the maximum amount of aliases allowed for collections.",
              "default" : "50",
              "$comment" : "group:advanced"
            },
            "allowRecursiveKeys" : {
              "type" : "boolean",
              "title" : "Allow Recursive Keys",
              "description" : "Set whether recursive keys are allowed.",
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.dataformat.YAMLTypeFilterDefinition" : {
          "title" : "YAML Type Filter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Value of type such as class name or regular expression",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to filter by class type or regular expression",
              "$comment" : "group:common",
              "format" : "bean:org.zenithblox.model.dataformat.YAMLTypeFilterType"
            }
          }
        },
        "org.zenithblox.model.dataformat.ZipDeflaterDataFormat" : {
          "title" : "Zip Deflater",
          "description" : "Compress and decompress streams using java.util.zip.Deflater and java.util.zip.Inflater.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "compressionLevel" : {
              "type" : "string",
              "title" : "Compression Level",
              "description" : "To specify a specific compression between 0-9. -1 is default compression, 0 is no compression, and 9 is the best compression.",
              "default" : "-1",
              "enum" : [ "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ],
              "$comment" : "group:common"
            }
          }
        },
        "org.zenithblox.model.dataformat.ZipFileDataFormat" : {
          "title" : "Zip File",
          "description" : "Compression and decompress streams using java.util.zip.ZipStream.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "usingIterator" : {
              "type" : "boolean",
              "title" : "Using Iterator",
              "description" : "If the zip file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode.",
              "$comment" : "group:common"
            },
            "allowEmptyDirectory" : {
              "type" : "boolean",
              "title" : "Allow Empty Directory",
              "description" : "If the zip file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty",
              "$comment" : "group:common"
            },
            "preservePathElements" : {
              "type" : "boolean",
              "title" : "Preserve Path Elements",
              "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file.",
              "$comment" : "group:common"
            },
            "maxDecompressedSize" : {
              "type" : "number",
              "title" : "Max Decompressed Size",
              "description" : "Set the maximum decompressed size of a zip file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
              "default" : "1073741824",
              "$comment" : "group:advanced"
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "validate" : {
    "model" : {
      "kind" : "model",
      "name" : "validate",
      "title" : "Validate",
      "description" : "Validates a message based on an expression",
      "deprecated" : false,
      "label" : "eip,transformation",
      "javaType" : "org.zenithblox.model.ValidateDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Expression to use for validation as a predicate. The expression should return either true or false. If returning false the message is invalid and an exception is thrown."
      },
      "predicateExceptionFactory" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Predicate Exception Factory",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.spi.PredicateExceptionFactory",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The bean id of custom PredicateExceptionFactory to use for creating the exception when the validation fails. By default, Zwangine will throw PredicateValidationException. By using a custom factory you can control which exception to throw instead."
      }
    },
    "propertiesSchema" : {
      "title" : "Validate",
      "description" : "Validates a message based on an expression",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression to use for validation as a predicate. The expression should return either true or false. If returning false the message is invalid and an exception is thrown.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "predicateExceptionFactory" : {
          "type" : "string",
          "title" : "Predicate Exception Factory",
          "description" : "The bean id of custom PredicateExceptionFactory to use for creating the exception when the validation fails. By default, Zwangine will throw PredicateValidationException. By using a custom factory you can control which exception to throw instead.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.spi.PredicateExceptionFactory"
        },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "when" : {
    "model" : {
      "kind" : "model",
      "name" : "when",
      "title" : "When",
      "description" : "Triggers a route when the expression evaluates to true",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.WhenDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Expression used as the predicate to evaluate whether this when should trigger and route the message or not."
      },
      "outputs" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "When",
      "description" : "Triggers a route when the expression evaluates to true",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression used as the predicate to evaluate whether this when should trigger and route the message or not.",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "whenSkipSendToEndpoint" : {
    "model" : {
      "kind" : "model",
      "name" : "whenSkipSendToEndpoint",
      "title" : "When Skip Send To Endpoint",
      "description" : "Predicate to determine if the message should be sent or not to the endpoint, when using interceptSentToEndpoint.",
      "deprecated" : false,
      "label" : "configuration",
      "javaType" : "org.zenithblox.model.WhenSkipSendToEndpointDefinition",
      "abstract" : false,
      "input" : true,
      "output" : true
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "expression" : {
        "index" : 3,
        "kind" : "expression",
        "displayName" : "Expression",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.language.ExpressionDefinition",
        "oneOf" : [ "constant", "csimple", "datasonnet", "exchangeProperty", "groovy", "header", "hl7terser", "java", "joor", "jq", "js", "jsonpath", "language", "method", "mvel", "ognl", "python", "ref", "simple", "spel", "tokenize", "variable", "wasm", "xpath", "xquery", "xtokenize" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "asPredicate" : true,
        "description" : "Expression used as the predicate to evaluate whether the message should be sent or not to the endpoint"
      },
      "outputs" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Outputs",
        "group" : "common",
        "required" : true,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.ProcessorDefinition<java.lang.Object>>",
        "oneOf" : [ "aggregate", "bean", "choice", "circuitBreaker", "claimCheck", "convertBodyTo", "convertHeaderTo", "convertVariableTo", "delay", "doCatch", "doFinally", "doTry", "dynamicRouter", "enrich", "filter", "idempotentConsumer", "intercept", "interceptFrom", "interceptSendToEndpoint", "kamelet", "loadBalance", "log", "loop", "marshal", "multicast", "onCompletion", "onException", "onFallback", "otherwise", "pausable", "pipeline", "policy", "poll", "pollEnrich", "process", "recipientList", "removeHeader", "removeHeaders", "removeProperties", "removeProperty", "removeVariable", "resequence", "resumable", "rollback", "routingSlip", "saga", "sample", "script", "serviceCall", "setBody", "setExchangePattern", "setHeader", "setHeaders", "setProperty", "setVariable", "setVariables", "sort", "split", "step", "stop", "threads", "throttle", "throwException", "to", "toD", "tokenizer", "transacted", "transform", "unmarshal", "validate", "when", "whenSkipSendToEndpoint", "wireTap" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false
      }
    },
    "propertiesSchema" : {
      "title" : "When Skip Send To Endpoint",
      "description" : "Predicate to determine if the message should be sent or not to the endpoint, when using interceptSentToEndpoint.",
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            }, {
              "required" : [ "constant" ]
            }, {
              "required" : [ "csimple" ]
            }, {
              "required" : [ "datasonnet" ]
            }, {
              "required" : [ "exchangeProperty" ]
            }, {
              "required" : [ "groovy" ]
            }, {
              "required" : [ "header" ]
            }, {
              "required" : [ "hl7terser" ]
            }, {
              "required" : [ "java" ]
            }, {
              "required" : [ "joor" ]
            }, {
              "required" : [ "jq" ]
            }, {
              "required" : [ "js" ]
            }, {
              "required" : [ "jsonpath" ]
            }, {
              "required" : [ "language" ]
            }, {
              "required" : [ "method" ]
            }, {
              "required" : [ "mvel" ]
            }, {
              "required" : [ "ognl" ]
            }, {
              "required" : [ "python" ]
            }, {
              "required" : [ "ref" ]
            }, {
              "required" : [ "simple" ]
            }, {
              "required" : [ "spel" ]
            }, {
              "required" : [ "tokenize" ]
            }, {
              "required" : [ "variable" ]
            }, {
              "required" : [ "wasm" ]
            }, {
              "required" : [ "xpath" ]
            }, {
              "required" : [ "xquery" ]
            }, {
              "required" : [ "xtokenize" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Expression used as the predicate to evaluate whether the message should be sent or not to the endpoint",
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        } ],
        "format" : "expression"
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "expression" : { },
        "constant" : { },
        "csimple" : { },
        "datasonnet" : { },
        "exchangeProperty" : { },
        "groovy" : { },
        "header" : { },
        "hl7terser" : { },
        "java" : { },
        "joor" : { },
        "jq" : { },
        "js" : { },
        "jsonpath" : { },
        "language" : { },
        "method" : { },
        "mvel" : { },
        "ognl" : { },
        "python" : { },
        "ref" : { },
        "simple" : { },
        "spel" : { },
        "tokenize" : { },
        "variable" : { },
        "wasm" : { },
        "xpath" : { },
        "xquery" : { },
        "xtokenize" : { }
      },
      "definitions" : {
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "required" : [ "expression" ]
    }
  },
  "wireTap" : {
    "model" : {
      "kind" : "model",
      "name" : "wireTap",
      "title" : "Wire Tap",
      "description" : "Routes a copy of a message (or creates a new message) to a secondary destination while continue routing the original message.",
      "deprecated" : false,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.WireTapDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "copy" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Copy",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Uses a copy of the original exchange"
      },
      "dynamicUri" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Dynamic Uri",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the uri is dynamic or static. If the uri is dynamic then the simple language is used to evaluate a dynamic uri to use as the wire-tap destination, for each incoming message. This works similar to how the toD EIP pattern works. If static then the uri is used as-is as the wire-tap destination."
      },
      "onPrepare" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "On Prepare",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.Processor",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be sent. This can be used to deep-clone messages that should be sent, or any custom logic needed before the exchange is sent."
      },
      "executorService" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Executor Service",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "java.util.concurrent.ExecutorService",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Uses a custom thread pool"
      },
      "uri" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Uri",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.zenithblox.language.simple.SimpleLanguage expression."
      },
      "variableSend" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Variable Send",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "variableReceive" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Variable Receive",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current Message , however the headers from the Message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual."
      },
      "pattern" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.ExchangePattern",
        "enum" : [ "InOnly", "InOut" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the optional ExchangePattern used to invoke this endpoint"
      },
      "cacheSize" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Cache Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers."
      },
      "ignoreInvalidEndpoint" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Endpoint",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore invalid endpoint URIs and skip sending the message."
      },
      "allowOptimisedComponents" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Allow Optimised Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to allow components to optimise toD if they are org.zenithblox.spi.SendDynamicAware ."
      },
      "autoStartComponents" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Auto Start Components",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to auto startup components when toD is starting up."
      }
    },
    "exchangeProperties" : {
      "ZwangineToEndpoint" : {
        "index" : 0,
        "kind" : "exchangeProperty",
        "displayName" : "To Endpoint",
        "label" : "producer",
        "required" : false,
        "javaType" : "String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Endpoint URI where this Exchange is being sent to"
      }
    },
    "propertiesSchema" : {
      "title" : "Wire Tap",
      "description" : "Routes a copy of a message (or creates a new message) to a secondary destination while continue routing the original message.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "copy" : {
          "type" : "boolean",
          "title" : "Copy",
          "description" : "Uses a copy of the original exchange",
          "$comment" : "group:advanced",
          "default" : true
        },
        "dynamicUri" : {
          "type" : "boolean",
          "title" : "Dynamic Uri",
          "description" : "Whether the uri is dynamic or static. If the uri is dynamic then the simple language is used to evaluate a dynamic uri to use as the wire-tap destination, for each incoming message. This works similar to how the toD EIP pattern works. If static then the uri is used as-is as the wire-tap destination.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "onPrepare" : {
          "type" : "string",
          "title" : "On Prepare",
          "description" : "Uses the Processor when preparing the org.zenithblox.Exchange to be sent. This can be used to deep-clone messages that should be sent, or any custom logic needed before the exchange is sent.",
          "$comment" : "group:advanced",
          "format" : "bean:org.zenithblox.Processor"
        },
        "executorService" : {
          "type" : "string",
          "title" : "Executor Service",
          "description" : "Uses a custom thread pool",
          "$comment" : "group:advanced",
          "format" : "bean:java.util.concurrent.ExecutorService"
        },
        "uri" : {
          "type" : "string",
          "title" : "Uri",
          "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.zenithblox.language.simple.SimpleLanguage expression.",
          "$comment" : "group:common"
        },
        "variableSend" : {
          "type" : "string",
          "title" : "Variable Send",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current message, however the headers from the message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "variableReceive" : {
          "type" : "string",
          "title" : "Variable Receive",
          "description" : "To use a variable as the source for the message body to send. This makes it handy to use variables for user data and to easily control what data to use for sending and receiving. Important: When using send variable then the message body is taken from this variable instead of the current Message , however the headers from the Message will still be used as well. In other words, the variable is used instead of the message body, but everything else is as usual.",
          "$comment" : "group:common"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
          "enum" : [ "InOnly", "InOut" ],
          "$comment" : "group:advanced"
        },
        "cacheSize" : {
          "type" : "number",
          "title" : "Cache Size",
          "description" : "Sets the maximum size used by the org.zenithblox.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Zwangine to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
          "$comment" : "group:advanced"
        },
        "ignoreInvalidEndpoint" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Endpoint",
          "description" : "Whether to ignore invalid endpoint URIs and skip sending the message.",
          "$comment" : "group:advanced"
        },
        "allowOptimisedComponents" : {
          "type" : "boolean",
          "title" : "Allow Optimised Components",
          "description" : "Whether to allow components to optimise toD if they are org.zenithblox.spi.SendDynamicAware .",
          "$comment" : "group:advanced",
          "default" : true
        },
        "autoStartComponents" : {
          "type" : "boolean",
          "title" : "Auto Start Components",
          "description" : "Whether to auto startup components when toD is starting up.",
          "$comment" : "group:advanced",
          "default" : true
        }
      },
      "required" : [ "uri" ],
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "serviceCall" : {
    "model" : {
      "kind" : "model",
      "name" : "serviceCall",
      "title" : "Service Call",
      "description" : "To call remote services",
      "deprecated" : true,
      "label" : "eip,routing",
      "javaType" : "org.zenithblox.model.cloud.ServiceCallDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime."
      },
      "name" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the name of the service to use"
      },
      "expression" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "Expression",
        "group" : "common",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.model.cloud.ServiceCallExpressionConfiguration",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Configures the Expression using the given configuration."
      },
      "uri" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Uri",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.zenithblox.language.simple.SimpleLanguage expression."
      },
      "component" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Component",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "http",
        "description" : "The component to use."
      },
      "pattern" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.ExchangePattern",
        "enum" : [ "InOnly", "InOut" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the optional ExchangePattern used to invoke this endpoint"
      },
      "configurationRef" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Configuration Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a ServiceCall configuration to use"
      },
      "serviceDiscoveryRef" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Service Discovery Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a custom ServiceDiscovery to use."
      },
      "serviceFilterRef" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Service Filter Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a custom ServiceFilter to use."
      },
      "serviceChooserRef" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Service Chooser Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a custom ServiceChooser to use."
      },
      "loadBalancerRef" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Load Balancer Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets a reference to a custom ServiceLoadBalancer to use."
      },
      "expressionRef" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Expression Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set a reference to a custom Expression to use."
      },
      "serviceDiscoveryConfiguration" : {
        "index" : 14,
        "kind" : "element",
        "displayName" : "Service Discovery Configuration",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.cloud.ServiceCallServiceDiscoveryConfiguration",
        "oneOf" : [ "cachingServiceDiscovery", "combinedServiceDiscovery", "consulServiceDiscovery", "dnsServiceDiscovery", "kubernetesServiceDiscovery", "staticServiceDiscovery", "zookeeperServiceDiscovery" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Configures the ServiceDiscovery using the given configuration."
      },
      "serviceFilterConfiguration" : {
        "index" : 15,
        "kind" : "element",
        "displayName" : "Service Filter Configuration",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.cloud.ServiceCallServiceFilterConfiguration",
        "oneOf" : [ "blacklistServiceFilter", "combinedServiceFilter", "customServiceFilter", "healthyServiceFilter", "passThroughServiceFilter" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Configures the ServiceFilter using the given configuration."
      },
      "loadBalancerConfiguration" : {
        "index" : 16,
        "kind" : "element",
        "displayName" : "Load Balancer Configuration",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.cloud.ServiceCallServiceLoadBalancerConfiguration",
        "oneOf" : [ "defaultLoadBalancer" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Configures the LoadBalancer using the given configuration."
      }
    },
    "propertiesSchema" : {
      "title" : "Service Call",
      "description" : "To call remote services",
      "deprecated" : true,
      "required" : [ "name" ],
      "type" : "object",
      "additionalProperties" : false,
      "anyOf" : [ {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "blacklistServiceFilter" ],
          "properties" : {
            "blacklistServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.BlacklistServiceCallServiceFilterConfiguration"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "blacklistServiceFilter" ]
            }, {
              "required" : [ "combinedServiceFilter" ]
            }, {
              "required" : [ "customServiceFilter" ]
            }, {
              "required" : [ "healthyServiceFilter" ]
            }, {
              "required" : [ "passThroughServiceFilter" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "combinedServiceFilter" ],
          "properties" : {
            "combinedServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.CombinedServiceCallServiceFilterConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "customServiceFilter" ],
          "properties" : {
            "customServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.CustomServiceCallServiceFilterConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "healthyServiceFilter" ],
          "properties" : {
            "healthyServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.HealthyServiceCallServiceFilterConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "passThroughServiceFilter" ],
          "properties" : {
            "passThroughServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.PassThroughServiceCallServiceFilterConfiguration"
            }
          }
        } ]
      }, {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "cachingServiceDiscovery" ],
          "properties" : {
            "cachingServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.CachingServiceCallServiceDiscoveryConfiguration"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "cachingServiceDiscovery" ]
            }, {
              "required" : [ "combinedServiceDiscovery" ]
            }, {
              "required" : [ "consulServiceDiscovery" ]
            }, {
              "required" : [ "dnsServiceDiscovery" ]
            }, {
              "required" : [ "kubernetesServiceDiscovery" ]
            }, {
              "required" : [ "staticServiceDiscovery" ]
            }, {
              "required" : [ "zookeeperServiceDiscovery" ]
            } ]
          }
        }, {
          "type" : "object",
          "required" : [ "combinedServiceDiscovery" ],
          "properties" : {
            "combinedServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "consulServiceDiscovery" ],
          "properties" : {
            "consulServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "dnsServiceDiscovery" ],
          "properties" : {
            "dnsServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "kubernetesServiceDiscovery" ],
          "properties" : {
            "kubernetesServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "staticServiceDiscovery" ],
          "properties" : {
            "staticServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
            }
          }
        }, {
          "type" : "object",
          "required" : [ "zookeeperServiceDiscovery" ],
          "properties" : {
            "zookeeperServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.ZooKeeperServiceCallServiceDiscoveryConfiguration"
            }
          }
        } ]
      }, {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "defaultLoadBalancer" ],
          "properties" : {
            "defaultLoadBalancer" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.DefaultServiceCallServiceLoadBalancerConfiguration"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "defaultLoadBalancer" ]
            } ]
          }
        } ]
      }, {
        "oneOf" : [ {
          "type" : "object",
          "required" : [ "expression" ],
          "properties" : {
            "expression" : {
              "title" : "Expression",
              "description" : "Configures the Expression using the given configuration.",
              "$ref" : "#/definitions/org.zenithblox.model.cloud.ServiceCallExpressionConfiguration"
            }
          }
        }, {
          "not" : {
            "anyOf" : [ {
              "required" : [ "expression" ]
            } ]
          }
        } ]
      } ],
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "name" : {
          "type" : "string",
          "title" : "Name",
          "description" : "Sets the name of the service to use",
          "$comment" : "group:common"
        },
        "expression" : { },
        "uri" : {
          "type" : "string",
          "title" : "Uri",
          "description" : "The uri of the endpoint to send to. The uri can be dynamic computed using the org.zenithblox.language.simple.SimpleLanguage expression.",
          "$comment" : "group:common"
        },
        "component" : {
          "type" : "string",
          "title" : "Component",
          "description" : "The component to use.",
          "default" : "http",
          "$comment" : "group:common"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "Sets the optional ExchangePattern used to invoke this endpoint",
          "enum" : [ "InOnly", "InOut" ],
          "$comment" : "group:common"
        },
        "configurationRef" : {
          "type" : "string",
          "title" : "Configuration Ref",
          "description" : "Refers to a ServiceCall configuration to use",
          "$comment" : "group:common"
        },
        "serviceDiscoveryRef" : {
          "type" : "string",
          "title" : "Service Discovery Ref",
          "description" : "Sets a reference to a custom ServiceDiscovery to use.",
          "$comment" : "group:common"
        },
        "serviceFilterRef" : {
          "type" : "string",
          "title" : "Service Filter Ref",
          "description" : "Sets a reference to a custom ServiceFilter to use.",
          "$comment" : "group:common"
        },
        "serviceChooserRef" : {
          "type" : "string",
          "title" : "Service Chooser Ref",
          "description" : "Sets a reference to a custom ServiceChooser to use.",
          "$comment" : "group:common"
        },
        "loadBalancerRef" : {
          "type" : "string",
          "title" : "Load Balancer Ref",
          "description" : "Sets a reference to a custom ServiceLoadBalancer to use.",
          "$comment" : "group:common"
        },
        "expressionRef" : {
          "type" : "string",
          "title" : "Expression Ref",
          "description" : "Set a reference to a custom Expression to use.",
          "$comment" : "group:common"
        },
        "blacklistServiceFilter" : { },
        "combinedServiceFilter" : { },
        "customServiceFilter" : { },
        "healthyServiceFilter" : { },
        "passThroughServiceFilter" : { },
        "cachingServiceDiscovery" : { },
        "combinedServiceDiscovery" : { },
        "consulServiceDiscovery" : { },
        "dnsServiceDiscovery" : { },
        "kubernetesServiceDiscovery" : { },
        "staticServiceDiscovery" : { },
        "zookeeperServiceDiscovery" : { },
        "defaultLoadBalancer" : { }
      },
      "definitions" : {
        "org.zenithblox.model.cloud.BlacklistServiceCallServiceFilterConfiguration" : {
          "title" : "Blacklist Service Filter",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "servers" : {
              "type" : "array",
              "title" : "Servers",
              "description" : "Sets the server blacklist. Each entry can be a list of servers separated by comma in the format: servicehost:port,servicehost2:port,servicehost3:port",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.PropertyDefinition" : {
          "title" : "Property",
          "description" : "A key value pair where the value is a literal value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "The name of the property",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "The property value.",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.cloud.CombinedServiceCallServiceFilterConfiguration" : {
          "title" : "Combined Service Filter",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            },
            "blacklistServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.BlacklistServiceCallServiceFilterConfiguration"
            },
            "customServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.CustomServiceCallServiceFilterConfiguration"
            },
            "healthyServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.HealthyServiceCallServiceFilterConfiguration"
            },
            "passThroughServiceFilter" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.PassThroughServiceCallServiceFilterConfiguration"
            }
          }
        },
        "org.zenithblox.model.cloud.CustomServiceCallServiceFilterConfiguration" : {
          "title" : "Custom Service Filter",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference of a ServiceFilter",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.HealthyServiceCallServiceFilterConfiguration" : {
          "title" : "Healthy Service Filter",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.PassThroughServiceCallServiceFilterConfiguration" : {
          "title" : "Pass Through Service Filter",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.CachingServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Caching Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "combinedServiceDiscovery" ],
              "properties" : {
                "combinedServiceDiscovery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration"
                }
              }
            }, {
              "not" : {
                "anyOf" : [ {
                  "required" : [ "combinedServiceDiscovery" ]
                }, {
                  "required" : [ "consulServiceDiscovery" ]
                }, {
                  "required" : [ "dnsServiceDiscovery" ]
                }, {
                  "required" : [ "kubernetesServiceDiscovery" ]
                }, {
                  "required" : [ "staticServiceDiscovery" ]
                } ]
              }
            }, {
              "type" : "object",
              "required" : [ "consulServiceDiscovery" ],
              "properties" : {
                "consulServiceDiscovery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "dnsServiceDiscovery" ],
              "properties" : {
                "dnsServiceDiscovery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "kubernetesServiceDiscovery" ],
              "properties" : {
                "kubernetesServiceDiscovery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "staticServiceDiscovery" ],
              "properties" : {
                "staticServiceDiscovery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
                }
              }
            } ]
          } ],
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "timeout" : {
              "type" : "number",
              "title" : "Timeout",
              "description" : "Set the time the services will be retained.",
              "default" : "60",
              "$comment" : "group:common"
            },
            "units" : {
              "type" : "string",
              "title" : "Units",
              "description" : "Set the time unit for the timeout.",
              "default" : "SECONDS",
              "enum" : [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ],
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            },
            "combinedServiceDiscovery" : { },
            "consulServiceDiscovery" : { },
            "dnsServiceDiscovery" : { },
            "kubernetesServiceDiscovery" : { },
            "staticServiceDiscovery" : { }
          }
        },
        "org.zenithblox.model.cloud.CombinedServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Combined Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            },
            "cachingServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.CachingServiceCallServiceDiscoveryConfiguration"
            },
            "consulServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration"
            },
            "dnsServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.DnsServiceCallServiceDiscoveryConfiguration"
            },
            "kubernetesServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration"
            },
            "staticServiceDiscovery" : {
              "$ref" : "#/definitions/org.zenithblox.model.cloud.StaticServiceCallServiceDiscoveryConfiguration"
            }
          }
        },
        "org.zenithblox.model.cloud.ConsulServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Consul Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "url" : {
              "type" : "string",
              "title" : "Url",
              "description" : "The Consul agent URL",
              "$comment" : "group:common"
            },
            "datacenter" : {
              "type" : "string",
              "title" : "Datacenter",
              "description" : "The data center",
              "$comment" : "group:common"
            },
            "aclToken" : {
              "type" : "string",
              "title" : "Acl Token",
              "description" : "Sets the ACL token to be used with Consul",
              "$comment" : "group:security"
            },
            "userName" : {
              "type" : "string",
              "title" : "User Name",
              "description" : "Sets the username to be used for basic authentication",
              "$comment" : "group:security"
            },
            "password" : {
              "type" : "string",
              "title" : "Password",
              "description" : "Sets the password to be used for basic authentication",
              "$comment" : "group:security"
            },
            "connectTimeoutMillis" : {
              "type" : "number",
              "title" : "Connect Timeout Millis",
              "description" : "Connect timeout for OkHttpClient",
              "$comment" : "group:common"
            },
            "readTimeoutMillis" : {
              "type" : "number",
              "title" : "Read Timeout Millis",
              "description" : "Read timeout for OkHttpClient",
              "$comment" : "group:common"
            },
            "writeTimeoutMillis" : {
              "type" : "number",
              "title" : "Write Timeout Millis",
              "description" : "Write timeout for OkHttpClient",
              "$comment" : "group:common"
            },
            "blockSeconds" : {
              "type" : "number",
              "title" : "Block Seconds",
              "description" : "The seconds to wait for a watch event, default 10 seconds",
              "default" : "10",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.DnsServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Dns Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "proto" : {
              "type" : "string",
              "title" : "Proto",
              "description" : "The transport protocol of the desired service.",
              "default" : "_tcp",
              "$comment" : "group:common"
            },
            "domain" : {
              "type" : "string",
              "title" : "Domain",
              "description" : "The domain name;",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.KubernetesServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Kubernetes Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "lookup" : {
              "type" : "string",
              "title" : "Lookup",
              "description" : "How to perform service lookup. Possible values: client, dns, environment. When using client, then the client queries the kubernetes master to obtain a list of active pods that provides the service, and then random (or round robin) select a pod. When using dns the service name is resolved as name.namespace.svc.dnsDomain. When using dnssrv the service name is resolved with SRV query for _._...svc... When using environment then environment variables are used to lookup the service. By default environment is used.",
              "default" : "environment",
              "enum" : [ "environment", "dns", "client" ],
              "$comment" : "group:common"
            },
            "dnsDomain" : {
              "type" : "string",
              "title" : "Dns Domain",
              "description" : "Sets the DNS domain to use for DNS lookup.",
              "$comment" : "group:dnssrv"
            },
            "portName" : {
              "type" : "string",
              "title" : "Port Name",
              "description" : "Sets the Port Name to use for DNS/DNSSRV lookup.",
              "$comment" : "group:dnssrv"
            },
            "portProtocol" : {
              "type" : "string",
              "title" : "Port Protocol",
              "description" : "Sets the Port Protocol to use for DNS/DNSSRV lookup.",
              "$comment" : "group:dnssrv"
            },
            "namespace" : {
              "type" : "string",
              "title" : "Namespace",
              "description" : "Sets the namespace to use. Will by default use namespace from the ENV variable KUBERNETES_MASTER.",
              "$comment" : "group:common"
            },
            "apiVersion" : {
              "type" : "string",
              "title" : "Api Version",
              "description" : "Sets the API version when using client lookup",
              "$comment" : "group:common"
            },
            "masterUrl" : {
              "type" : "string",
              "title" : "Master Url",
              "description" : "Sets the URL to the master when using client lookup",
              "$comment" : "group:client"
            },
            "username" : {
              "type" : "string",
              "title" : "Username",
              "description" : "Sets the username for authentication when using client lookup",
              "$comment" : "group:client"
            },
            "password" : {
              "type" : "string",
              "title" : "Password",
              "description" : "Sets the password for authentication when using client lookup",
              "$comment" : "group:client"
            },
            "oauthToken" : {
              "type" : "string",
              "title" : "Oauth Token",
              "description" : "Sets the OAUTH token for authentication (instead of username/password) when using client lookup",
              "$comment" : "group:client"
            },
            "caCertData" : {
              "type" : "string",
              "title" : "Ca Cert Data",
              "description" : "Sets the Certificate Authority data when using client lookup",
              "$comment" : "group:client"
            },
            "caCertFile" : {
              "type" : "string",
              "title" : "Ca Cert File",
              "description" : "Sets the Certificate Authority data that are loaded from the file when using client lookup",
              "$comment" : "group:client"
            },
            "clientCertData" : {
              "type" : "string",
              "title" : "Client Cert Data",
              "description" : "Sets the Client Certificate data when using client lookup",
              "$comment" : "group:client"
            },
            "clientCertFile" : {
              "type" : "string",
              "title" : "Client Cert File",
              "description" : "Sets the Client Certificate data that are loaded from the file when using client lookup",
              "$comment" : "group:client"
            },
            "clientKeyAlgo" : {
              "type" : "string",
              "title" : "Client Key Algo",
              "description" : "Sets the Client Keystore algorithm, such as RSA when using client lookup",
              "$comment" : "group:client"
            },
            "clientKeyData" : {
              "type" : "string",
              "title" : "Client Key Data",
              "description" : "Sets the Client Keystore data when using client lookup",
              "$comment" : "group:client"
            },
            "clientKeyFile" : {
              "type" : "string",
              "title" : "Client Key File",
              "description" : "Sets the Client Keystore data that are loaded from the file when using client lookup",
              "$comment" : "group:client"
            },
            "clientKeyPassphrase" : {
              "type" : "string",
              "title" : "Client Key Passphrase",
              "description" : "Sets the Client Keystore passphrase when using client lookup",
              "$comment" : "group:client"
            },
            "trustCerts" : {
              "type" : "boolean",
              "title" : "Trust Certs",
              "description" : "Sets whether to turn on trust certificate check when using client lookup",
              "$comment" : "group:client"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.StaticServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Static Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "servers" : {
              "type" : "array",
              "title" : "Servers",
              "description" : "Sets the server list. Each entry can be a list of servers separated by comma in the format: servicehost:port,servicehost2:port,servicehost3:port",
              "items" : {
                "type" : "string"
              },
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.ZooKeeperServiceCallServiceDiscoveryConfiguration" : {
          "title" : "Zookeeper Service Discovery",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "nodes" : {
              "type" : "string",
              "title" : "Nodes",
              "description" : "A comma separate list of servers to connect to in the form host:port",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "string",
              "title" : "Namespace",
              "description" : "As ZooKeeper is a shared space, users of a given cluster should stay within a pre-defined namespace. If a namespace is set here, all paths will get pre-pended with the namespace",
              "$comment" : "group:common"
            },
            "reconnectBaseSleepTime" : {
              "type" : "string",
              "title" : "Reconnect Base Sleep Time",
              "description" : "Initial amount of time to wait between retries.",
              "$comment" : "group:common"
            },
            "reconnectMaxSleepTime" : {
              "type" : "string",
              "title" : "Reconnect Max Sleep Time",
              "description" : "Max time in ms to sleep on each retry",
              "$comment" : "group:common"
            },
            "reconnectMaxRetries" : {
              "type" : "string",
              "title" : "Reconnect Max Retries",
              "description" : "Max number of times to retry",
              "$comment" : "group:common"
            },
            "sessionTimeout" : {
              "type" : "string",
              "title" : "Session Timeout",
              "description" : "Session timeout.",
              "$comment" : "group:common"
            },
            "connectionTimeout" : {
              "type" : "string",
              "title" : "Connection Timeout",
              "description" : "Connection timeout.",
              "$comment" : "group:common"
            },
            "basePath" : {
              "type" : "string",
              "title" : "Base Path",
              "description" : "Set the base path to store in ZK",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          },
          "required" : [ "basePath", "nodes" ]
        },
        "org.zenithblox.model.cloud.DefaultServiceCallServiceLoadBalancerConfiguration" : {
          "title" : "Default Load Balancer",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            }
          }
        },
        "org.zenithblox.model.cloud.ServiceCallExpressionConfiguration" : {
          "title" : "Service Expression",
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "The id of this node",
              "$comment" : "group:common"
            },
            "hostHeader" : {
              "type" : "string",
              "title" : "Host Header",
              "description" : "The header that holds the service host information, default ServiceCallConstants.SERVICE_HOST",
              "default" : "ZwangineServiceCallServiceHost",
              "$comment" : "group:common"
            },
            "portHeader" : {
              "type" : "string",
              "title" : "Port Header",
              "description" : "The header that holds the service port information, default ServiceCallConstants.SERVICE_PORT",
              "default" : "ZwangineServiceCallServicePort",
              "$comment" : "group:common"
            },
            "properties" : {
              "type" : "array",
              "title" : "Properties",
              "description" : "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using a different one, then the client properties are defined according to the specific service in use.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:advanced"
            },
            "expressionType" : {
              "$ref" : "#/definitions/org.zenithblox.model.language.ExpressionDefinition"
            }
          }
        },
        "org.zenithblox.model.language.ExpressionDefinition" : {
          "type" : "object",
          "anyOf" : [ {
            "oneOf" : [ {
              "type" : "object",
              "required" : [ "constant" ],
              "properties" : {
                "constant" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ConstantExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "csimple" ],
              "properties" : {
                "csimple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.CSimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "datasonnet" ],
              "properties" : {
                "datasonnet" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.DatasonnetExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "exchangeProperty" ],
              "properties" : {
                "exchangeProperty" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.ExchangePropertyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "groovy" ],
              "properties" : {
                "groovy" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.GroovyExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "header" ],
              "properties" : {
                "header" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.HeaderExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "hl7terser" ],
              "properties" : {
                "hl7terser" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.Hl7TerserExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "java" ],
              "properties" : {
                "java" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "joor" ],
              "properties" : {
                "joor" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JoorExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jq" ],
              "properties" : {
                "jq" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JqExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "js" ],
              "properties" : {
                "js" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JavaScriptExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "jsonpath" ],
              "properties" : {
                "jsonpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.JsonPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "language" ],
              "properties" : {
                "language" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.LanguageExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "method" ],
              "properties" : {
                "method" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MethodCallExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "mvel" ],
              "properties" : {
                "mvel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.MvelExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ognl" ],
              "properties" : {
                "ognl" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.OgnlExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "python" ],
              "properties" : {
                "python" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.PythonExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "ref" ],
              "properties" : {
                "ref" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.RefExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "simple" ],
              "properties" : {
                "simple" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SimpleExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "spel" ],
              "properties" : {
                "spel" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.SpELExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "tokenize" ],
              "properties" : {
                "tokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.TokenizerExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "variable" ],
              "properties" : {
                "variable" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.VariableExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "wasm" ],
              "properties" : {
                "wasm" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.WasmExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xpath" ],
              "properties" : {
                "xpath" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XPathExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xquery" ],
              "properties" : {
                "xquery" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XQueryExpression"
                }
              }
            }, {
              "type" : "object",
              "required" : [ "xtokenize" ],
              "properties" : {
                "xtokenize" : {
                  "$ref" : "#/definitions/org.zenithblox.model.language.XMLTokenizerExpression"
                }
              }
            } ]
          } ],
          "properties" : {
            "constant" : { },
            "csimple" : { },
            "datasonnet" : { },
            "exchangeProperty" : { },
            "groovy" : { },
            "header" : { },
            "hl7terser" : { },
            "java" : { },
            "joor" : { },
            "jq" : { },
            "js" : { },
            "jsonpath" : { },
            "language" : { },
            "method" : { },
            "mvel" : { },
            "ognl" : { },
            "python" : { },
            "ref" : { },
            "simple" : { },
            "spel" : { },
            "tokenize" : { },
            "variable" : { },
            "wasm" : { },
            "xpath" : { },
            "xquery" : { },
            "xtokenize" : { }
          }
        },
        "org.zenithblox.model.language.ConstantExpression" : {
          "title" : "Constant",
          "description" : "A fixed value set only once during the route startup.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.CSimpleExpression" : {
          "title" : "CSimple",
          "description" : "Evaluate a compiled simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.DatasonnetExpression" : {
          "title" : "DataSonnet",
          "description" : "To use DataSonnet scripts for message transformations.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "bodyMediaType" : {
              "type" : "string",
              "title" : "Body Media Type",
              "description" : "The String representation of the message's body MediaType",
              "$comment" : "group:common"
            },
            "outputMediaType" : {
              "type" : "string",
              "title" : "Output Media Type",
              "description" : "The String representation of the MediaType to output",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.ExchangePropertyExpression" : {
          "title" : "ExchangeProperty",
          "description" : "Gets a property from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.GroovyExpression" : {
          "title" : "Groovy",
          "description" : "Evaluates a Groovy script.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.HeaderExpression" : {
          "title" : "Header",
          "description" : "Gets a header from the Exchange.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.Hl7TerserExpression" : {
          "title" : "HL7 Terser",
          "description" : "Get the value of a HL7 message field specified by terse location specification syntax.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaExpression" : {
          "title" : "Java",
          "description" : "Evaluates a Java (Java compiled once at runtime) expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JoorExpression" : {
          "title" : "jOOR",
          "description" : "Evaluates a jOOR (Java compiled once at runtime) expression.",
          "deprecated" : true,
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether the expression should be pre compiled once during initialization phase. If this is turned off, then the expression is reloaded and compiled on each evaluation.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "singleQuotes" : {
              "type" : "boolean",
              "title" : "Single Quotes",
              "description" : "Whether single quotes can be used as replacement for double quotes. This is convenient when you need to work with strings inside strings.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JqExpression" : {
          "title" : "JQ",
          "description" : "Evaluates a JQ expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JavaScriptExpression" : {
          "title" : "JavaScript",
          "description" : "Evaluates a JavaScript expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.JsonPathExpression" : {
          "title" : "JSONPath",
          "description" : "Evaluates a JSONPath expression against a JSON message body.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "suppressExceptions" : {
              "type" : "boolean",
              "title" : "Suppress Exceptions",
              "description" : "Whether to suppress exceptions such as PathNotFoundException.",
              "$comment" : "group:common"
            },
            "allowSimple" : {
              "type" : "boolean",
              "title" : "Allow Simple",
              "description" : "Whether to allow in inlined Simple exceptions in the JSONPath expression",
              "$comment" : "group:advanced",
              "default" : true
            },
            "allowEasyPredicate" : {
              "type" : "boolean",
              "title" : "Allow Easy Predicate",
              "description" : "Whether to allow using the easy predicate parser to pre-parse predicates.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "writeAsString" : {
              "type" : "boolean",
              "title" : "Write As String",
              "description" : "Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.",
              "$comment" : "group:common"
            },
            "unpackArray" : {
              "type" : "boolean",
              "title" : "Unpack Array",
              "description" : "Whether to unpack a single element json-array into an object.",
              "$comment" : "group:common"
            },
            "option" : {
              "type" : "string",
              "title" : "Option",
              "description" : "To configure additional options on JSONPath. Multiple values can be separated by comma.",
              "enum" : [ "DEFAULT_PATH_LEAF_TO_NULL", "ALWAYS_RETURN_LIST", "AS_PATH_LIST", "SUPPRESS_EXCEPTIONS", "REQUIRE_PROPERTIES" ],
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.LanguageExpression" : {
          "title" : "Language",
          "description" : "Evaluates a custom language.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "language" : {
              "type" : "string",
              "title" : "Language",
              "description" : "The name of the language to use",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          },
          "required" : [ "expression", "language" ]
        },
        "org.zenithblox.model.language.MethodCallExpression" : {
          "title" : "Bean Method",
          "description" : "Calls a Java bean method.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "ref" : {
              "type" : "string",
              "title" : "Ref",
              "description" : "Reference to an existing bean (bean id) to lookup in the registry",
              "$comment" : "group:common"
            },
            "method" : {
              "type" : "string",
              "title" : "Method",
              "description" : "Name of method to call",
              "$comment" : "group:common"
            },
            "beanType" : {
              "type" : "string",
              "title" : "Bean Type",
              "description" : "Class name (fully qualified) of the bean to use Will lookup in registry and if there is a single instance of the same type, then the existing bean is used, otherwise a new bean is created (requires a default no-arg constructor).",
              "$comment" : "group:common"
            },
            "scope" : {
              "type" : "string",
              "title" : "Scope",
              "description" : "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. So when using prototype scope then this depends on the bean registry implementation.",
              "default" : "Singleton",
              "enum" : [ "Singleton", "Request", "Prototype" ],
              "$comment" : "group:advanced"
            },
            "validate" : {
              "type" : "boolean",
              "title" : "Validate",
              "description" : "Whether to validate the bean has the configured method.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.MvelExpression" : {
          "title" : "MVEL",
          "description" : "Evaluates a MVEL template.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.OgnlExpression" : {
          "title" : "OGNL",
          "description" : "Evaluates an OGNL expression (Apache Commons OGNL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.PythonExpression" : {
          "title" : "Python",
          "description" : "Evaluates a Python expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.RefExpression" : {
          "title" : "Ref",
          "description" : "Uses an existing expression from the registry.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SimpleExpression" : {
          "title" : "Simple",
          "description" : "Evaluates a Zwangine simple expression.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.SpELExpression" : {
          "title" : "SpEL",
          "description" : "Evaluates a Spring expression (SpEL).",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.TokenizerExpression" : {
          "title" : "Tokenize",
          "description" : "Tokenize text payloads using delimiter patterns.",
          "required" : [ "token" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "token" : {
              "type" : "string",
              "title" : "Token",
              "description" : "The (start) token to use as tokenizer, for example you can use the new line token. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "endToken" : {
              "type" : "string",
              "title" : "End Token",
              "description" : "The end token to use as tokenizer if using start/end token pairs. You can use simple language as the token to support dynamic tokens.",
              "$comment" : "group:common"
            },
            "inheritNamespaceTagName" : {
              "type" : "string",
              "title" : "Inherit Namespace Tag Name",
              "description" : "To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.",
              "$comment" : "group:advanced"
            },
            "regex" : {
              "type" : "boolean",
              "title" : "Regex",
              "description" : "If the token is a regular expression pattern. The default value is false",
              "$comment" : "group:advanced"
            },
            "xml" : {
              "type" : "boolean",
              "title" : "Xml",
              "description" : "Whether the input is XML messages. This option must be set to true if working with XML payloads.",
              "$comment" : "group:common"
            },
            "includeTokens" : {
              "type" : "boolean",
              "title" : "Include Tokens",
              "description" : "Whether to include the tokens in the parts when using pairs. When including tokens then the endToken property must also be configured (to use pair mode). The default value is false",
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "string",
              "title" : "Group",
              "description" : "To group N parts together, for example to split big files into chunks of 1000 lines. You can use simple language as the group to support dynamic group sizes.",
              "$comment" : "group:advanced"
            },
            "groupDelimiter" : {
              "type" : "string",
              "title" : "Group Delimiter",
              "description" : "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
              "$comment" : "group:advanced"
            },
            "skipFirst" : {
              "type" : "boolean",
              "title" : "Skip First",
              "description" : "To skip the very first element",
              "$comment" : "group:advanced"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.VariableExpression" : {
          "title" : "Variable",
          "description" : "Gets a variable",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.WasmExpression" : {
          "title" : "Wasm",
          "description" : "Call a wasm (web assembly) function.",
          "required" : [ "expression", "module" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "module" : {
              "type" : "string",
              "title" : "Module",
              "description" : "Set the module (the distributable, loadable, and executable unit of code in WebAssembly) resource that provides the expression function.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XPathExpression" : {
          "title" : "XPath",
          "description" : "Evaluates an XPath expression against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "documentType" : {
              "type" : "string",
              "title" : "Document Type",
              "description" : "Name of class for document type The default value is org.w3c.dom.Document",
              "$comment" : "group:advanced"
            },
            "resultQName" : {
              "type" : "string",
              "title" : "Result QName",
              "description" : "Sets the output type supported by XPath.",
              "default" : "NODESET",
              "enum" : [ "NUMBER", "STRING", "BOOLEAN", "NODESET", "NODE" ],
              "$comment" : "group:common"
            },
            "saxon" : {
              "type" : "boolean",
              "title" : "Saxon",
              "description" : "Whether to use Saxon.",
              "$comment" : "group:advanced"
            },
            "factoryRef" : {
              "type" : "string",
              "title" : "Factory Ref",
              "description" : "References to a custom XPathFactory to lookup in the registry",
              "$comment" : "group:advanced"
            },
            "objectModel" : {
              "type" : "string",
              "title" : "Object Model",
              "description" : "The XPath object model to use",
              "$comment" : "group:advanced"
            },
            "logNamespaces" : {
              "type" : "boolean",
              "title" : "Log Namespaces",
              "description" : "Whether to log namespaces which can assist during troubleshooting",
              "$comment" : "group:advanced"
            },
            "threadSafety" : {
              "type" : "boolean",
              "title" : "Thread Safety",
              "description" : "Whether to enable thread-safety for the returned result of the xpath expression. This applies to when using NODESET as the result type, and the returned set has multiple elements. In this situation there can be thread-safety issues if you process the NODESET concurrently such as from a Zwangine Splitter EIP in parallel processing mode. This option prevents concurrency issues by doing defensive copies of the nodes. It is recommended to turn this option on if you are using zwangine-saxon or Saxon in your application. Saxon has thread-safety issues which can be prevented by turning this option on.",
              "$comment" : "group:advanced"
            },
            "preCompile" : {
              "type" : "boolean",
              "title" : "Pre Compile",
              "description" : "Whether to enable pre-compiling the xpath expression during initialization phase. pre-compile is enabled by default. This can be used to turn off, for example in cases the compilation phase is desired at the starting phase, such as if the application is ahead of time compiled (for example with zwangine-quarkus) which would then load the xpath factory of the built operating system, and not a JVM runtime.",
              "$comment" : "group:advanced",
              "default" : true
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XQueryExpression" : {
          "title" : "XQuery",
          "description" : "Evaluates an XQuery expressions against an XML payload.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "configurationRef" : {
              "type" : "string",
              "title" : "Configuration Ref",
              "description" : "Reference to a saxon configuration instance in the registry to use for xquery (requires zwangine-saxon). This may be needed to add custom functions to a saxon configuration, so these custom functions can be used in xquery expressions.",
              "$comment" : "group:advanced"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        },
        "org.zenithblox.model.language.XMLTokenizerExpression" : {
          "title" : "XML Tokenize",
          "description" : "Tokenize XML payloads.",
          "required" : [ "expression" ],
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "id" : {
              "type" : "string",
              "title" : "Id",
              "description" : "Sets the id of this node",
              "$comment" : "group:common"
            },
            "expression" : {
              "type" : "string",
              "title" : "Expression",
              "description" : "The expression value in your chosen language syntax",
              "$comment" : "group:common"
            },
            "mode" : {
              "type" : "string",
              "title" : "Mode",
              "description" : "The extraction mode. The available extraction modes are: i - injecting the contextual namespace bindings into the extracted token (default) w - wrapping the extracted token in its ancestor context u - unwrapping the extracted token to its child content t - extracting the text content of the specified element",
              "default" : "i",
              "enum" : [ "i", "w", "u", "t" ],
              "$comment" : "group:common"
            },
            "group" : {
              "type" : "number",
              "title" : "Group",
              "description" : "To group N parts together",
              "$comment" : "group:common"
            },
            "namespace" : {
              "type" : "array",
              "title" : "Namespace",
              "description" : "Injects the XML Namespaces of prefix - uri mappings",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.PropertyDefinition"
              },
              "$comment" : "group:common"
            },
            "source" : {
              "type" : "string",
              "title" : "Source",
              "description" : "Source to use, instead of message body. You can prefix with variable:, header:, or property: to specify kind of source. Otherwise, the source is assumed to be a variable. Use empty or null to use default source, which is the message body.",
              "$comment" : "group:common"
            },
            "resultType" : {
              "type" : "string",
              "title" : "Result Type",
              "description" : "Sets the class of the result type (type from output)",
              "$comment" : "group:common"
            },
            "trim" : {
              "type" : "boolean",
              "title" : "Trim",
              "description" : "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
              "$comment" : "group:advanced",
              "default" : true
            }
          }
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "get" : {
    "model" : {
      "kind" : "model",
      "name" : "get",
      "title" : "Get",
      "description" : "Rest GET command",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.GetDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The path mapping URIs of this REST operation such as /{id}."
      },
      "to" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "To",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ToDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call."
      },
      "consumes" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "type" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "outType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Out Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "bindingMode" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off"
      },
      "skipBindingOnErrorCode" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true."
      },
      "deprecated" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Deprecated",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Marks this rest operation as deprecated in OpenApi documentation."
      },
      "streamCache" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether stream caching is enabled on this rest operation."
      },
      "routeId" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Route Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the route"
      }
    },
    "propertiesSchema" : {
      "title" : "Get",
      "description" : "Rest GET command",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "The path mapping URIs of this REST operation such as /{id}.",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "outType" : {
          "type" : "string",
          "title" : "Out Type",
          "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "deprecated" : {
          "type" : "boolean",
          "title" : "Deprecated",
          "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this rest operation.",
          "$comment" : "group:advanced"
        },
        "routeId" : {
          "type" : "string",
          "title" : "Route Id",
          "description" : "Sets the id of the route",
          "$comment" : "group:common"
        },
        "param" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
          }
        },
        "responseMessage" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
          }
        },
        "security" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "post" : {
    "model" : {
      "kind" : "model",
      "name" : "post",
      "title" : "Post",
      "description" : "Rest POST command",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.PostDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The path mapping URIs of this REST operation such as /{id}."
      },
      "to" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "To",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ToDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call."
      },
      "consumes" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "type" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "outType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Out Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "bindingMode" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off"
      },
      "skipBindingOnErrorCode" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true."
      },
      "deprecated" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Deprecated",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Marks this rest operation as deprecated in OpenApi documentation."
      },
      "streamCache" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether stream caching is enabled on this rest operation."
      },
      "routeId" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Route Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the route"
      }
    },
    "propertiesSchema" : {
      "title" : "Post",
      "description" : "Rest POST command",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "The path mapping URIs of this REST operation such as /{id}.",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "outType" : {
          "type" : "string",
          "title" : "Out Type",
          "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "deprecated" : {
          "type" : "boolean",
          "title" : "Deprecated",
          "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this rest operation.",
          "$comment" : "group:advanced"
        },
        "routeId" : {
          "type" : "string",
          "title" : "Route Id",
          "description" : "Sets the id of the route",
          "$comment" : "group:common"
        },
        "param" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
          }
        },
        "responseMessage" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
          }
        },
        "security" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "put" : {
    "model" : {
      "kind" : "model",
      "name" : "put",
      "title" : "Put",
      "description" : "Rest PUT command",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.PutDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The path mapping URIs of this REST operation such as /{id}."
      },
      "to" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "To",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ToDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call."
      },
      "consumes" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "type" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "outType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Out Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "bindingMode" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off"
      },
      "skipBindingOnErrorCode" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true."
      },
      "deprecated" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Deprecated",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Marks this rest operation as deprecated in OpenApi documentation."
      },
      "streamCache" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether stream caching is enabled on this rest operation."
      },
      "routeId" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Route Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the route"
      }
    },
    "propertiesSchema" : {
      "title" : "Put",
      "description" : "Rest PUT command",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "The path mapping URIs of this REST operation such as /{id}.",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "outType" : {
          "type" : "string",
          "title" : "Out Type",
          "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "deprecated" : {
          "type" : "boolean",
          "title" : "Deprecated",
          "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this rest operation.",
          "$comment" : "group:advanced"
        },
        "routeId" : {
          "type" : "string",
          "title" : "Route Id",
          "description" : "Sets the id of the route",
          "$comment" : "group:common"
        },
        "param" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
          }
        },
        "responseMessage" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
          }
        },
        "security" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "delete" : {
    "model" : {
      "kind" : "model",
      "name" : "delete",
      "title" : "Delete",
      "description" : "Rest DELETE command",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.DeleteDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The path mapping URIs of this REST operation such as /{id}."
      },
      "to" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "To",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ToDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call."
      },
      "consumes" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "type" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "outType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Out Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "bindingMode" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off"
      },
      "skipBindingOnErrorCode" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true."
      },
      "deprecated" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Deprecated",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Marks this rest operation as deprecated in OpenApi documentation."
      },
      "streamCache" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether stream caching is enabled on this rest operation."
      },
      "routeId" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Route Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the route"
      }
    },
    "propertiesSchema" : {
      "title" : "Delete",
      "description" : "Rest DELETE command",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "The path mapping URIs of this REST operation such as /{id}.",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "outType" : {
          "type" : "string",
          "title" : "Out Type",
          "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "deprecated" : {
          "type" : "boolean",
          "title" : "Deprecated",
          "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this rest operation.",
          "$comment" : "group:advanced"
        },
        "routeId" : {
          "type" : "string",
          "title" : "Route Id",
          "description" : "Sets the id of the route",
          "$comment" : "group:common"
        },
        "param" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
          }
        },
        "responseMessage" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
          }
        },
        "security" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "head" : {
    "model" : {
      "kind" : "model",
      "name" : "head",
      "title" : "Head",
      "description" : "Rest HEAD command",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.HeadDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The path mapping URIs of this REST operation such as /{id}."
      },
      "to" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "To",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ToDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call."
      },
      "consumes" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "type" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "outType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Out Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "bindingMode" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off"
      },
      "skipBindingOnErrorCode" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true."
      },
      "deprecated" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Deprecated",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Marks this rest operation as deprecated in OpenApi documentation."
      },
      "streamCache" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether stream caching is enabled on this rest operation."
      },
      "routeId" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Route Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the route"
      }
    },
    "propertiesSchema" : {
      "title" : "Head",
      "description" : "Rest HEAD command",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "The path mapping URIs of this REST operation such as /{id}.",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "outType" : {
          "type" : "string",
          "title" : "Out Type",
          "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "deprecated" : {
          "type" : "boolean",
          "title" : "Deprecated",
          "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this rest operation.",
          "$comment" : "group:advanced"
        },
        "routeId" : {
          "type" : "string",
          "title" : "Route Id",
          "description" : "Sets the id of the route",
          "$comment" : "group:common"
        },
        "param" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
          }
        },
        "responseMessage" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
          }
        },
        "security" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  },
  "patch" : {
    "model" : {
      "kind" : "model",
      "name" : "patch",
      "title" : "Patch",
      "description" : "Rest PATCH command",
      "deprecated" : false,
      "label" : "rest",
      "javaType" : "org.zenithblox.model.rest.PatchDefinition",
      "abstract" : false,
      "input" : true,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of this node"
      },
      "description" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Description",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the description of this node"
      },
      "disabled" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime."
      },
      "path" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Path",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The path mapping URIs of this REST operation such as /{id}."
      },
      "to" : {
        "index" : 4,
        "kind" : "element",
        "displayName" : "To",
        "group" : "common",
        "required" : true,
        "type" : "object",
        "javaType" : "org.zenithblox.model.ToDefinition",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The Zwangine endpoint this REST service will call, such as a direct endpoint to link to an existing route that handles this REST call."
      },
      "consumes" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Consumes",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level"
      },
      "produces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Produces",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level"
      },
      "type" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "outType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Out Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type."
      },
      "bindingMode" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Binding Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "off",
        "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off"
      },
      "skipBindingOnErrorCode" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Skip Binding On Error Code",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level"
      },
      "clientRequestValidation" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Client Request Validation",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error."
      },
      "enableCORS" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Enable CORS",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false."
      },
      "enableNoContentResponse" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable No Content Response",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false."
      },
      "apiDocs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Api Docs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true."
      },
      "deprecated" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Deprecated",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Marks this rest operation as deprecated in OpenApi documentation."
      },
      "streamCache" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Stream Cache",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether stream caching is enabled on this rest operation."
      },
      "routeId" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Route Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the id of the route"
      }
    },
    "propertiesSchema" : {
      "title" : "Patch",
      "description" : "Rest PATCH command",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "Sets the id of this node",
          "$comment" : "group:common"
        },
        "description" : {
          "type" : "string",
          "title" : "Description",
          "description" : "Sets the description of this node",
          "$comment" : "group:common"
        },
        "disabled" : {
          "type" : "boolean",
          "title" : "Disabled",
          "description" : "Whether to disable this REST service from the route during build time. Once an REST service has been disabled then it cannot be enabled later at runtime.",
          "$comment" : "group:advanced"
        },
        "path" : {
          "type" : "string",
          "title" : "Path",
          "description" : "The path mapping URIs of this REST operation such as /{id}.",
          "$comment" : "group:common"
        },
        "consumes" : {
          "type" : "string",
          "title" : "Consumes",
          "description" : "To define the content type what the REST service consumes (accept as input), such as application/xml or application/json. This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "produces" : {
          "type" : "string",
          "title" : "Produces",
          "description" : "To define the content type what the REST service produces (uses for output), such as application/xml or application/json This option will override what may be configured on a parent level",
          "$comment" : "group:common"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Sets the class name to use for binding from input to POJO for the incoming data This option will override what may be configured on a parent level. The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "outType" : {
          "type" : "string",
          "title" : "Out Type",
          "description" : "Sets the class name to use for binding from POJO to output for the outgoing data This option will override what may be configured on a parent level The name of the class of the input data. Append a to the end of the name if you want the input to be an array type.",
          "$comment" : "group:advanced"
        },
        "bindingMode" : {
          "type" : "string",
          "title" : "Binding Mode",
          "description" : "Sets the binding mode to use. This option will override what may be configured on a parent level The default value is off",
          "default" : "off",
          "enum" : [ "off", "auto", "json", "xml", "json_xml" ],
          "$comment" : "group:common"
        },
        "skipBindingOnErrorCode" : {
          "type" : "boolean",
          "title" : "Skip Binding On Error Code",
          "description" : "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do. This option will override what may be configured on a parent level",
          "$comment" : "group:advanced"
        },
        "clientRequestValidation" : {
          "type" : "boolean",
          "title" : "Client Request Validation",
          "description" : "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
          "$comment" : "group:advanced"
        },
        "enableCORS" : {
          "type" : "boolean",
          "title" : "Enable CORS",
          "description" : "Whether to enable CORS headers in the HTTP response. This option will override what may be configured on a parent level The default value is false.",
          "$comment" : "group:advanced"
        },
        "enableNoContentResponse" : {
          "type" : "boolean",
          "title" : "Enable No Content Response",
          "description" : "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.",
          "$comment" : "group:advanced"
        },
        "apiDocs" : {
          "type" : "boolean",
          "title" : "Api Docs",
          "description" : "Whether to include or exclude this rest operation in API documentation. The default value is true.",
          "$comment" : "group:advanced",
          "default" : true
        },
        "deprecated" : {
          "type" : "boolean",
          "title" : "Deprecated",
          "description" : "Marks this rest operation as deprecated in OpenApi documentation.",
          "$comment" : "group:advanced"
        },
        "streamCache" : {
          "type" : "boolean",
          "title" : "Stream Cache",
          "description" : "Whether stream caching is enabled on this rest operation.",
          "$comment" : "group:advanced"
        },
        "routeId" : {
          "type" : "string",
          "title" : "Route Id",
          "description" : "Sets the id of the route",
          "$comment" : "group:common"
        },
        "param" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ParamDefinition"
          }
        },
        "responseMessage" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseMessageDefinition"
          }
        },
        "security" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.rest.SecurityDefinition"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.rest.ParamDefinition" : {
          "title" : "Param",
          "description" : "To specify the rest operation parameters.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Sets the parameter description.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Sets the parameter name.",
              "$comment" : "group:common"
            },
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Sets the parameter type.",
              "default" : "path",
              "enum" : [ "body", "formData", "header", "path", "query" ],
              "$comment" : "group:common"
            },
            "defaultValue" : {
              "type" : "string",
              "title" : "Default Value",
              "description" : "Sets the parameter default value.",
              "$comment" : "group:common"
            },
            "required" : {
              "type" : "boolean",
              "title" : "Required",
              "description" : "Sets the parameter required flag.",
              "$comment" : "group:common",
              "default" : true
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the parameter data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values (enum).",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Sets the parameter examples.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.ValueDefinition" : {
          "title" : "Value",
          "description" : "A single value",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "value" ]
        },
        "org.zenithblox.model.rest.RestPropertyDefinition" : {
          "title" : "Rest Property",
          "description" : "A key value pair",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Property key",
              "$comment" : "group:common"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Property value",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key", "value" ]
        },
        "org.zenithblox.model.rest.ResponseMessageDefinition" : {
          "title" : "Response Message",
          "description" : "To specify the rest operation response messages.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "code" : {
              "type" : "string",
              "title" : "Code",
              "description" : "The response code such as a HTTP status code",
              "default" : "200",
              "$comment" : "group:common"
            },
            "message" : {
              "type" : "string",
              "title" : "Message",
              "description" : "The response message (description)",
              "$comment" : "group:common"
            },
            "responseModel" : {
              "type" : "string",
              "title" : "Response Model",
              "description" : "The response model",
              "$comment" : "group:common"
            },
            "header" : {
              "type" : "array",
              "title" : "Header",
              "description" : "Adds a response header",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.ResponseHeaderDefinition"
              },
              "$comment" : "group:common"
            },
            "examples" : {
              "type" : "array",
              "title" : "Examples",
              "description" : "Examples of response messages",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.rest.RestPropertyDefinition"
              },
              "$comment" : "group:common"
            }
          },
          "required" : [ "message" ]
        },
        "org.zenithblox.model.rest.ResponseHeaderDefinition" : {
          "title" : "Response Header",
          "description" : "To specify the rest operation response headers.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "description" : {
              "type" : "string",
              "title" : "Description",
              "description" : "Description of the parameter.",
              "$comment" : "group:common"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Name of the parameter. This option is mandatory.",
              "$comment" : "group:common"
            },
            "collectionFormat" : {
              "type" : "string",
              "title" : "Collection Format",
              "description" : "Sets the parameter collection format.",
              "default" : "csv",
              "enum" : [ "csv", "multi", "pipes", "ssv", "tsv" ],
              "$comment" : "group:common"
            },
            "arrayType" : {
              "type" : "string",
              "title" : "Array Type",
              "description" : "Sets the parameter array type. Required if data type is array. Describes the type of items in the array.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataType" : {
              "type" : "string",
              "title" : "Data Type",
              "description" : "Sets the header data type.",
              "default" : "string",
              "$comment" : "group:common"
            },
            "dataFormat" : {
              "type" : "string",
              "title" : "Data Format",
              "description" : "Sets the parameter data format.",
              "$comment" : "group:common"
            },
            "allowableValues" : {
              "type" : "array",
              "title" : "Allowable Values",
              "description" : "Sets the parameter list of allowable values.",
              "items" : {
                "$ref" : "#/definitions/org.zenithblox.model.ValueDefinition"
              },
              "$comment" : "group:common"
            },
            "example" : {
              "type" : "string",
              "title" : "Example",
              "description" : "Sets the example",
              "$comment" : "group:common"
            }
          },
          "required" : [ "name" ]
        },
        "org.zenithblox.model.rest.SecurityDefinition" : {
          "title" : "Rest Security",
          "description" : "Rest security definition",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "key" : {
              "type" : "string",
              "title" : "Key",
              "description" : "Key used to refer to this security definition",
              "$comment" : "group:common"
            },
            "scopes" : {
              "type" : "string",
              "title" : "Scopes",
              "description" : "The scopes to allow (separate multiple scopes by comma)",
              "$comment" : "group:common"
            }
          },
          "required" : [ "key" ]
        }
      },
      "$schema" : "http://json-schema.org/draft-07/schema#"
    }
  }
}