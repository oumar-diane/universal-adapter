{
  "asn1" : {
    "model" : {
      "kind" : "model",
      "name" : "asn1",
      "title" : "ASN.1 File",
      "description" : "Encode and decode data structures using Abstract Syntax Notation One (ASN.1).",
      "deprecated" : false,
      "firstVersion" : "2.20.0",
      "label" : "dataformat,transformation,file",
      "javaType" : "org.zenithblox.model.dataformat.ASN1DataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "unmarshalType" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class to use when unmarshalling."
      },
      "usingIterator" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Using Iterator",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the asn1 file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class to use when unmarshalling."
        },
        "usingIterator" : {
          "type" : "boolean",
          "title" : "Using Iterator",
          "description" : "If the asn1 file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode."
        }
      },
      "title" : "ASN.1 File",
      "description" : "Encode and decode data structures using Abstract Syntax Notation One (ASN.1).",
      "required" : [ ]
    }
  },
  "avro" : {
    "model" : {
      "kind" : "model",
      "name" : "avro",
      "title" : "Avro",
      "description" : "Serialize and deserialize messages using Apache Avro binary data format.",
      "deprecated" : false,
      "firstVersion" : "2.14.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.AvroDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "instanceClassName" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Instance Class Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name to use for marshal and unmarshalling"
      },
      "library" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Library",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.dataformat.AvroLibrary",
        "enum" : [ "ApacheAvro", "Jackson" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "avroJackson",
        "description" : "Which Avro library to use."
      },
      "objectMapper" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Object Mapper",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson."
      },
      "useDefaultObjectMapper" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Use Default Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry."
      },
      "unmarshalType" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name of the java type to use when unmarshalling"
      },
      "jsonView" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Json View",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
      },
      "include" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Include",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
      },
      "allowJmsType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Allow Jms Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
      },
      "collectionType" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Collection Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
      },
      "useList" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Use List",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To unmarshal to a List of Map or a List of Pojo."
      },
      "moduleClassNames" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Module Class Names",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
      },
      "moduleRefs" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Module Refs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
      },
      "enableFeatures" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Enable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "disableFeatures" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Disable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "allowUnmarshallType" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Allow Unmarshall Type",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
      },
      "timezone" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Timezone",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling."
      },
      "autoDiscoverObjectMapper" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Auto Discover Object Mapper",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true then Jackson will lookup for an objectMapper into the registry"
      },
      "contentTypeHeader" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      },
      "schemaResolver" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Schema Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.component.jackson.SchemaResolver",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Optional schema resolver used to lookup schemas for the data in transit."
      },
      "autoDiscoverSchemaResolver" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Auto Discover Schema Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When not disabled, the SchemaResolver will be looked up into the registry"
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "instanceClassName" : {
          "type" : "string",
          "title" : "Instance Class Name",
          "description" : "Class name to use for marshal and unmarshalling"
        },
        "library" : {
          "type" : "string",
          "title" : "Library",
          "description" : "Which Avro library to use.",
          "default" : "avroJackson",
          "enum" : [ "ApacheAvro", "Jackson" ]
        },
        "objectMapper" : {
          "type" : "string",
          "title" : "Object Mapper",
          "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson."
        },
        "useDefaultObjectMapper" : {
          "type" : "boolean",
          "title" : "Use Default Object Mapper",
          "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry."
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class name of the java type to use when unmarshalling"
        },
        "jsonView" : {
          "type" : "string",
          "title" : "Json View",
          "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
        },
        "include" : {
          "type" : "string",
          "title" : "Include",
          "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
        },
        "allowJmsType" : {
          "type" : "boolean",
          "title" : "Allow Jms Type",
          "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
        },
        "collectionType" : {
          "type" : "string",
          "title" : "Collection Type",
          "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
        },
        "useList" : {
          "type" : "boolean",
          "title" : "Use List",
          "description" : "To unmarshal to a List of Map or a List of Pojo."
        },
        "moduleClassNames" : {
          "type" : "string",
          "title" : "Module Class Names",
          "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
        },
        "moduleRefs" : {
          "type" : "string",
          "title" : "Module Refs",
          "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
        },
        "enableFeatures" : {
          "type" : "string",
          "title" : "Enable Features",
          "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "disableFeatures" : {
          "type" : "string",
          "title" : "Disable Features",
          "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "allowUnmarshallType" : {
          "type" : "boolean",
          "title" : "Allow Unmarshall Type",
          "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
        },
        "timezone" : {
          "type" : "string",
          "title" : "Timezone",
          "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling."
        },
        "autoDiscoverObjectMapper" : {
          "type" : "boolean",
          "title" : "Auto Discover Object Mapper",
          "description" : "If set to true then Jackson will lookup for an objectMapper into the registry"
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        },
        "schemaResolver" : {
          "type" : "string",
          "title" : "Schema Resolver",
          "description" : "Optional schema resolver used to lookup schemas for the data in transit."
        },
        "autoDiscoverSchemaResolver" : {
          "type" : "boolean",
          "title" : "Auto Discover Schema Resolver",
          "description" : "When not disabled, the SchemaResolver will be looked up into the registry"
        }
      },
      "title" : "Avro",
      "description" : "Serialize and deserialize messages using Apache Avro binary data format.",
      "required" : [ ]
    }
  },
  "barcode" : {
    "model" : {
      "kind" : "model",
      "name" : "barcode",
      "title" : "Barcode",
      "description" : "Transform strings to various 1D/2D barcode bitmap formats and back.",
      "deprecated" : false,
      "firstVersion" : "2.14.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.BarcodeDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "barcodeFormat" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Barcode Format",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Barcode format such as QR-Code"
      },
      "imageType" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Image Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Image type of the barcode such as png"
      },
      "width" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Width",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Width of the barcode"
      },
      "height" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Height",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Height of the barcode"
      }
    },
    "propertiesSchema" : {
      "title" : "Barcode",
      "description" : "Transform strings to various 1D/2D barcode bitmap formats and back.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "barcodeFormat" : {
          "type" : "string",
          "title" : "Barcode Format",
          "description" : "Barcode format such as QR-Code"
        },
        "imageType" : {
          "type" : "string",
          "title" : "Image Type",
          "description" : "Image type of the barcode such as png"
        },
        "width" : {
          "type" : "number",
          "title" : "Width",
          "description" : "Width of the barcode"
        },
        "height" : {
          "type" : "number",
          "title" : "Height",
          "description" : "Height of the barcode"
        }
      },
      "required" : [ ]
    }
  },
  "base64" : {
    "model" : {
      "kind" : "model",
      "name" : "base64",
      "title" : "Base64",
      "description" : "Encode and decode data using Base64.",
      "deprecated" : false,
      "firstVersion" : "2.11.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.Base64DataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "lineLength" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Line Length",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "76",
        "description" : "To specific a maximum line length for the encoded data. By default 76 is used."
      },
      "lineSeparator" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The line separators to use. Uses new line characters (CRLF) by default."
      },
      "urlSafe" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Url Safe",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Instead of emitting '' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes. Is by default false."
      }
    },
    "propertiesSchema" : {
      "title" : "Base64",
      "description" : "Encode and decode data using Base64.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "lineLength" : {
          "type" : "number",
          "title" : "Line Length",
          "description" : "To specific a maximum line length for the encoded data. By default 76 is used.",
          "default" : "76"
        },
        "lineSeparator" : {
          "type" : "string",
          "title" : "Line Separator",
          "description" : "The line separators to use. Uses new line characters (CRLF) by default."
        },
        "urlSafe" : {
          "type" : "boolean",
          "title" : "Url Safe",
          "description" : "Instead of emitting '' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode operations. Decoding seamlessly handles both modes. Is by default false."
        }
      },
      "required" : [ ]
    }
  },
  "beanio" : {
    "model" : {
      "kind" : "model",
      "name" : "beanio",
      "title" : "BeanIO",
      "description" : "Marshal and unmarshal Java beans to and from flat files (such as CSV, delimited, or fixed length formats).",
      "deprecated" : false,
      "firstVersion" : "2.10.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.BeanioDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "mapping" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Mapping",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The BeanIO mapping file. Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file."
      },
      "streamName" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Stream Name",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The name of the stream to use."
      },
      "ignoreUnidentifiedRecords" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Ignore Unidentified Records",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore unidentified records."
      },
      "ignoreUnexpectedRecords" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Ignore Unexpected Records",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore unexpected records."
      },
      "ignoreInvalidRecords" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Ignore Invalid Records",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore invalid records."
      },
      "encoding" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Encoding",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The charset to use. Is by default the JVM platform default charset."
      },
      "beanReaderErrorHandlerType" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Bean Reader Error Handler Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom org.zenithblox.dataformat.beanio.BeanIOErrorHandler as error handler while parsing. Configure the fully qualified class name of the error handler. Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords may not be in use when you use a custom error handler."
      },
      "unmarshalSingleObject" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Unmarshal Single Object",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter is only intended in special use-cases where beanio maps the Zwangine message to a single POJO bean."
      }
    },
    "propertiesSchema" : {
      "title" : "BeanIO",
      "description" : "Marshal and unmarshal Java beans to and from flat files (such as CSV, delimited, or fixed length formats).",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "mapping" : {
          "type" : "string",
          "title" : "Mapping",
          "description" : "The BeanIO mapping file. Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file."
        },
        "streamName" : {
          "type" : "string",
          "title" : "Stream Name",
          "description" : "The name of the stream to use."
        },
        "ignoreUnidentifiedRecords" : {
          "type" : "boolean",
          "title" : "Ignore Unidentified Records",
          "description" : "Whether to ignore unidentified records."
        },
        "ignoreUnexpectedRecords" : {
          "type" : "boolean",
          "title" : "Ignore Unexpected Records",
          "description" : "Whether to ignore unexpected records."
        },
        "ignoreInvalidRecords" : {
          "type" : "boolean",
          "title" : "Ignore Invalid Records",
          "description" : "Whether to ignore invalid records."
        },
        "encoding" : {
          "type" : "string",
          "title" : "Encoding",
          "description" : "The charset to use. Is by default the JVM platform default charset."
        },
        "beanReaderErrorHandlerType" : {
          "type" : "string",
          "title" : "Bean Reader Error Handler Type",
          "description" : "To use a custom org.zenithblox.dataformat.beanio.BeanIOErrorHandler as error handler while parsing. Configure the fully qualified class name of the error handler. Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords may not be in use when you use a custom error handler."
        },
        "unmarshalSingleObject" : {
          "type" : "boolean",
          "title" : "Unmarshal Single Object",
          "description" : "This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter is only intended in special use-cases where beanio maps the Zwangine message to a single POJO bean."
        }
      },
      "required" : [ "mapping", "streamName" ]
    }
  },
  "bindy" : {
    "model" : {
      "kind" : "model",
      "name" : "bindy",
      "title" : "Bindy",
      "description" : "Marshal and unmarshal Java beans from and to flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).",
      "deprecated" : false,
      "firstVersion" : "2.0.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.BindyDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "type" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Type",
        "group" : "common",
        "required" : true,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.dataformat.BindyType",
        "enum" : [ "Csv", "Fixed", "KeyValue" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Whether to use Csv, Fixed, or KeyValue."
      },
      "classType" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Class Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of model class to use."
      },
      "allowEmptyStream" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Allow Empty Stream",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to allow empty streams in the unmarshal process. If true, no exception will be thrown when a body without records is provided."
      },
      "unwrapSingleInstance" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Unwrap Single Instance",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a java.util.List."
      },
      "locale" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Locale",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To configure a default locale to use, such as us for united states. To use the JVM platform default locale then use the name default"
      }
    },
    "propertiesSchema" : {
      "title" : "Bindy",
      "description" : "Marshal and unmarshal Java beans from and to flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "allowEmptyStream" : {
          "type" : "boolean",
          "title" : "Allow Empty Stream",
          "description" : "Whether to allow empty streams in the unmarshal process. If true, no exception will be thrown when a body without records is provided."
        },
        "classType" : {
          "type" : "string",
          "title" : "Class Type",
          "description" : "Name of model class to use."
        },
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "locale" : {
          "type" : "string",
          "title" : "Locale",
          "description" : "To configure a default locale to use, such as us for united states. To use the JVM platform default locale then use the name default"
        },
        "type" : {
          "type" : "string",
          "title" : "Type",
          "description" : "Whether to use Csv, Fixed, or KeyValue.",
          "enum" : [ "Csv", "Fixed", "KeyValue" ]
        },
        "unwrapSingleInstance" : {
          "type" : "boolean",
          "title" : "Unwrap Single Instance",
          "description" : "When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a java.util.List."
        }
      },
      "required" : [ "type" ]
    }
  },
  "cbor" : {
    "model" : {
      "kind" : "model",
      "name" : "cbor",
      "title" : "CBOR",
      "description" : "Unmarshal a CBOR payload to POJO and back.",
      "deprecated" : false,
      "firstVersion" : "3.0.0",
      "label" : "dataformat,transformation,json",
      "javaType" : "org.zenithblox.model.dataformat.CBORDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "objectMapper" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Object Mapper",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson."
      },
      "useDefaultObjectMapper" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Use Default Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to lookup and use default Jackson CBOR ObjectMapper from the registry."
      },
      "unmarshalType" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name of the java type to use when unmarshalling"
      },
      "collectionType" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Collection Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
      },
      "useList" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Use List",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To unmarshal to a List of Map or a List of Pojo."
      },
      "allowUnmarshallType" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Allow Unmarshall Type",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Jackson CBOR is allowed to attempt to use the ZwangineCBORUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
      },
      "prettyPrint" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Pretty Print",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To enable pretty printing output nicely formatted. Is by default false."
      },
      "allowJmsType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Allow Jms Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
      },
      "enableFeatures" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Enable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "disableFeatures" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Disable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      }
    },
    "propertiesSchema" : {
      "title" : "CBOR",
      "description" : "Unmarshal a CBOR payload to POJO and back.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "objectMapper" : {
          "type" : "string",
          "title" : "Object Mapper",
          "description" : "Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson."
        },
        "useDefaultObjectMapper" : {
          "type" : "boolean",
          "title" : "Use Default Object Mapper",
          "description" : "Whether to lookup and use default Jackson CBOR ObjectMapper from the registry."
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class name of the java type to use when unmarshalling"
        },
        "collectionType" : {
          "type" : "string",
          "title" : "Collection Type",
          "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
        },
        "useList" : {
          "type" : "boolean",
          "title" : "Use List",
          "description" : "To unmarshal to a List of Map or a List of Pojo."
        },
        "allowUnmarshallType" : {
          "type" : "boolean",
          "title" : "Allow Unmarshall Type",
          "description" : "If enabled then Jackson CBOR is allowed to attempt to use the ZwangineCBORUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
        },
        "prettyPrint" : {
          "type" : "boolean",
          "title" : "Pretty Print",
          "description" : "To enable pretty printing output nicely formatted. Is by default false."
        },
        "allowJmsType" : {
          "type" : "boolean",
          "title" : "Allow Jms Type",
          "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
        },
        "enableFeatures" : {
          "type" : "string",
          "title" : "Enable Features",
          "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "disableFeatures" : {
          "type" : "string",
          "title" : "Disable Features",
          "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        }
      },
      "required" : [ ]
    }
  },
  "crypto" : {
    "model" : {
      "kind" : "model",
      "name" : "crypto",
      "title" : "Crypto (Java Cryptographic Extension)",
      "description" : "Encrypt and decrypt messages using Java Cryptography Extension (JCE).",
      "deprecated" : false,
      "firstVersion" : "2.3.0",
      "label" : "dataformat,transformation,security",
      "javaType" : "org.zenithblox.model.dataformat.CryptoDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "algorithm" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The JCE algorithm name indicating the cryptographic algorithm that will be used."
      },
      "keyRef" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Key Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to the secret key to lookup from the register to use."
      },
      "cryptoProvider" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Crypto Provider",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The name of the JCE Security Provider that should be used."
      },
      "initVectorRef" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Init Vector Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher."
      },
      "algorithmParameterRef" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Algorithm Parameter Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type."
      },
      "bufferSize" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Buffer Size",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "4096",
        "description" : "The size of the buffer used in the signature process."
      },
      "macAlgorithm" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Mac Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "HmacSHA1",
        "description" : "The JCE algorithm name indicating the Message Authentication algorithm."
      },
      "shouldAppendHMAC" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Should Append HMAC",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data."
      },
      "inline" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Inline",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false."
      }
    },
    "propertiesSchema" : {
      "title" : "Crypto (Java Cryptographic Extension)",
      "description" : "Encrypt and decrypt messages using Java Cryptography Extension (JCE).",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "algorithm" : {
          "type" : "string",
          "title" : "Algorithm",
          "description" : "The JCE algorithm name indicating the cryptographic algorithm that will be used."
        },
        "keyRef" : {
          "type" : "string",
          "title" : "Key Ref",
          "description" : "Refers to the secret key to lookup from the register to use."
        },
        "cryptoProvider" : {
          "type" : "string",
          "title" : "Crypto Provider",
          "description" : "The name of the JCE Security Provider that should be used."
        },
        "initVectorRef" : {
          "type" : "string",
          "title" : "Init Vector Ref",
          "description" : "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher."
        },
        "algorithmParameterRef" : {
          "type" : "string",
          "title" : "Algorithm Parameter Ref",
          "description" : "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type."
        },
        "bufferSize" : {
          "type" : "number",
          "title" : "Buffer Size",
          "description" : "The size of the buffer used in the signature process.",
          "default" : "4096"
        },
        "macAlgorithm" : {
          "type" : "string",
          "title" : "Mac Algorithm",
          "description" : "The JCE algorithm name indicating the Message Authentication algorithm.",
          "default" : "HmacSHA1"
        },
        "shouldAppendHMAC" : {
          "type" : "boolean",
          "title" : "Should Append HMAC",
          "description" : "Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data."
        },
        "inline" : {
          "type" : "boolean",
          "title" : "Inline",
          "description" : "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false."
        }
      },
      "required" : [ ]
    }
  },
  "csv" : {
    "model" : {
      "kind" : "model",
      "name" : "csv",
      "title" : "CSV",
      "description" : "Handle CSV (Comma Separated Values) payloads.",
      "deprecated" : false,
      "firstVersion" : "1.3.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.CsvDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "formatRef" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Format Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The reference format to use, it will be updated with the other format options, the default value is CSVFormat.DEFAULT"
      },
      "formatName" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Format Name",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "DEFAULT", "EXCEL", "INFORMIX_UNLOAD", "INFORMIX_UNLOAD_CSV", "MYSQL", "RFC4180" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "DEFAULT",
        "description" : "The name of the format to use, the default value is CSVFormat.DEFAULT"
      },
      "commentMarkerDisabled" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Comment Marker Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Disables the comment marker of the reference format."
      },
      "commentMarker" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Comment Marker",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the comment marker of the reference format."
      },
      "delimiter" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the delimiter to use. The default value is , (comma)"
      },
      "escapeDisabled" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Escape Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Use for disabling using escape character"
      },
      "escape" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Escape",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the escape character to use"
      },
      "headerDisabled" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Header Disabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Use for disabling headers"
      },
      "header" : {
        "index" : 9,
        "kind" : "element",
        "displayName" : "Header",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<java.lang.String>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To configure the CSV headers"
      },
      "allowMissingColumnNames" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Allow Missing Column Names",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to allow missing column names."
      },
      "ignoreEmptyLines" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Ignore Empty Lines",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore empty lines."
      },
      "ignoreSurroundingSpaces" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Ignore Surrounding Spaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to ignore surrounding spaces"
      },
      "nullStringDisabled" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Null String Disabled",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used to disable null strings"
      },
      "nullString" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Null String",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the null string"
      },
      "quoteDisabled" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Quote Disabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used to disable quotes"
      },
      "quote" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Quote",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the quote to use which by default is double-quote character"
      },
      "recordSeparatorDisabled" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Record Separator Disabled",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Used for disabling record separator"
      },
      "recordSeparator" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Record Separator",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the record separator (aka new line) which by default is new line characters (CRLF)"
      },
      "skipHeaderRecord" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Skip Header Record",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to skip the header record in the output"
      },
      "quoteMode" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Quote Mode",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the quote mode"
      },
      "ignoreHeaderCase" : {
        "index" : 21,
        "kind" : "attribute",
        "displayName" : "Ignore Header Case",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether or not to ignore case when accessing header names."
      },
      "trim" : {
        "index" : 22,
        "kind" : "attribute",
        "displayName" : "Trim",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether or not to trim leading and trailing blanks."
      },
      "trailingDelimiter" : {
        "index" : 23,
        "kind" : "attribute",
        "displayName" : "Trailing Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets whether or not to add a trailing delimiter."
      },
      "marshallerFactoryRef" : {
        "index" : 24,
        "kind" : "attribute",
        "displayName" : "Marshaller Factory Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the implementation of the CsvMarshallerFactory interface which is able to customize marshalling/unmarshalling behavior by extending CsvMarshaller or creating it from scratch."
      },
      "lazyLoad" : {
        "index" : 25,
        "kind" : "attribute",
        "displayName" : "Lazy Load",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one."
      },
      "useMaps" : {
        "index" : 26,
        "kind" : "attribute",
        "displayName" : "Use Maps",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce maps (HashMap)for the lines values instead of lists. It requires to have header (either defined or collected)."
      },
      "useOrderedMaps" : {
        "index" : 27,
        "kind" : "attribute",
        "displayName" : "Use Ordered Maps",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce ordered maps (LinkedHashMap) for the lines values instead of lists. It requires to have header (either defined or collected)."
      },
      "recordConverterRef" : {
        "index" : 28,
        "kind" : "attribute",
        "displayName" : "Record Converter Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom CsvRecordConverter to lookup from the registry to use."
      },
      "captureHeaderRecord" : {
        "index" : 29,
        "kind" : "attribute",
        "displayName" : "Capture Header Record",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should capture the header record and store it in the message header"
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "formatRef" : {
          "type" : "string",
          "title" : "Format Ref",
          "description" : "The reference format to use, it will be updated with the other format options, the default value is CSVFormat.DEFAULT"
        },
        "formatName" : {
          "type" : "string",
          "title" : "Format Name",
          "description" : "The name of the format to use, the default value is CSVFormat.DEFAULT",
          "default" : "DEFAULT",
          "enum" : [ "DEFAULT", "EXCEL", "INFORMIX_UNLOAD", "INFORMIX_UNLOAD_CSV", "MYSQL", "RFC4180" ]
        },
        "commentMarkerDisabled" : {
          "type" : "boolean",
          "title" : "Comment Marker Disabled",
          "description" : "Disables the comment marker of the reference format."
        },
        "commentMarker" : {
          "type" : "string",
          "title" : "Comment Marker",
          "description" : "Sets the comment marker of the reference format."
        },
        "delimiter" : {
          "type" : "string",
          "title" : "Delimiter",
          "description" : "Sets the delimiter to use. The default value is , (comma)"
        },
        "escapeDisabled" : {
          "type" : "boolean",
          "title" : "Escape Disabled",
          "description" : "Use for disabling using escape character"
        },
        "escape" : {
          "type" : "string",
          "title" : "Escape",
          "description" : "Sets the escape character to use"
        },
        "headerDisabled" : {
          "type" : "boolean",
          "title" : "Header Disabled",
          "description" : "Use for disabling headers"
        },
        "header" : {
          "type" : "array",
          "title" : "Header",
          "description" : "To configure the CSV headers",
          "items" : {
            "type" : "string"
          }
        },
        "allowMissingColumnNames" : {
          "type" : "boolean",
          "title" : "Allow Missing Column Names",
          "description" : "Whether to allow missing column names."
        },
        "ignoreEmptyLines" : {
          "type" : "boolean",
          "title" : "Ignore Empty Lines",
          "description" : "Whether to ignore empty lines."
        },
        "ignoreSurroundingSpaces" : {
          "type" : "boolean",
          "title" : "Ignore Surrounding Spaces",
          "description" : "Whether to ignore surrounding spaces"
        },
        "nullStringDisabled" : {
          "type" : "boolean",
          "title" : "Null String Disabled",
          "description" : "Used to disable null strings"
        },
        "nullString" : {
          "type" : "string",
          "title" : "Null String",
          "description" : "Sets the null string"
        },
        "quoteDisabled" : {
          "type" : "boolean",
          "title" : "Quote Disabled",
          "description" : "Used to disable quotes"
        },
        "quote" : {
          "type" : "string",
          "title" : "Quote",
          "description" : "Sets the quote to use which by default is double-quote character"
        },
        "recordSeparatorDisabled" : {
          "type" : "string",
          "title" : "Record Separator Disabled",
          "description" : "Used for disabling record separator"
        },
        "recordSeparator" : {
          "type" : "string",
          "title" : "Record Separator",
          "description" : "Sets the record separator (aka new line) which by default is new line characters (CRLF)"
        },
        "skipHeaderRecord" : {
          "type" : "boolean",
          "title" : "Skip Header Record",
          "description" : "Whether to skip the header record in the output"
        },
        "quoteMode" : {
          "type" : "string",
          "title" : "Quote Mode",
          "description" : "Sets the quote mode",
          "enum" : [ "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE" ]
        },
        "ignoreHeaderCase" : {
          "type" : "boolean",
          "title" : "Ignore Header Case",
          "description" : "Sets whether or not to ignore case when accessing header names."
        },
        "trim" : {
          "type" : "boolean",
          "title" : "Trim",
          "description" : "Sets whether or not to trim leading and trailing blanks."
        },
        "trailingDelimiter" : {
          "type" : "boolean",
          "title" : "Trailing Delimiter",
          "description" : "Sets whether or not to add a trailing delimiter."
        },
        "marshallerFactoryRef" : {
          "type" : "string",
          "title" : "Marshaller Factory Ref",
          "description" : "Sets the implementation of the CsvMarshallerFactory interface which is able to customize marshalling/unmarshalling behavior by extending CsvMarshaller or creating it from scratch."
        },
        "lazyLoad" : {
          "type" : "boolean",
          "title" : "Lazy Load",
          "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at one."
        },
        "useMaps" : {
          "type" : "boolean",
          "title" : "Use Maps",
          "description" : "Whether the unmarshalling should produce maps (HashMap)for the lines values instead of lists. It requires to have header (either defined or collected)."
        },
        "useOrderedMaps" : {
          "type" : "boolean",
          "title" : "Use Ordered Maps",
          "description" : "Whether the unmarshalling should produce ordered maps (LinkedHashMap) for the lines values instead of lists. It requires to have header (either defined or collected)."
        },
        "recordConverterRef" : {
          "type" : "string",
          "title" : "Record Converter Ref",
          "description" : "Refers to a custom CsvRecordConverter to lookup from the registry to use."
        },
        "captureHeaderRecord" : {
          "type" : "boolean",
          "title" : "Capture Header Record",
          "description" : "Whether the unmarshalling should capture the header record and store it in the message header"
        }
      },
      "title" : "CSV",
      "description" : "Handle CSV (Comma Separated Values) payloads.",
      "required" : [ ]
    }
  },
  "custom" : {
    "model" : {
      "kind" : "model",
      "name" : "custom",
      "title" : "Custom",
      "description" : "Delegate to a custom org.zenithblox.spi.DataFormat implementation via Zwangine registry.",
      "deprecated" : false,
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.CustomDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "ref" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Ref",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Reference to the custom org.zenithblox.spi.DataFormat to lookup from the Zwangine registry."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "ref" : {
          "type" : "string",
          "title" : "Ref",
          "description" : "Reference to the custom org.zenithblox.spi.DataFormat to lookup from the Zwangine registry."
        }
      },
      "title" : "Custom",
      "description" : "Delegate to a custom org.zenithblox.spi.DataFormat implementation via Zwangine registry.",
      "required" : [ "ref" ]
    }
  },
  "fhirJson" : {
    "model" : {
      "kind" : "model",
      "name" : "fhirJson",
      "title" : "FHIR JSon",
      "description" : "Marshall and unmarshall FHIR objects to/from JSON.",
      "deprecated" : false,
      "firstVersion" : "2.21.0",
      "label" : "dataformat,transformation,hl7,json",
      "javaType" : "org.zenithblox.model.dataformat.FhirJsonDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "fhirVersion" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Fhir Version",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "R4",
        "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5"
      },
      "fhirContext" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Fhir Context",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext"
      },
      "prettyPrint" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Pretty Print",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible."
      },
      "parserErrorHandler" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Parser Error Handler",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler"
      },
      "parserOptions" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Parser Options",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions."
      },
      "preferTypes" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Prefer Types",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma."
      },
      "forceResourceId" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Force Resource Id",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType"
      },
      "serverBaseUrl" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Server Base Url",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base."
      },
      "omitResourceId" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Omit Resource Id",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID."
      },
      "encodeElementsAppliesToChildResourcesOnly" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Encode Elements Applies To Child Resources Only",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)"
      },
      "encodeElements" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Encode Elements",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded"
      },
      "dontEncodeElements" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Dont Encode Elements",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode."
      },
      "stripVersionsFromReferences" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Strip Versions From References",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)"
      },
      "overrideResourceIdWithBundleEntryFullUrl" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Override Resource Id With Bundle Entry Full Url",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id)."
      },
      "summaryMode" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Summary Mode",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included."
      },
      "suppressNarratives" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Suppress Narratives",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false), narratives will not be included in the encoded values."
      },
      "dontStripVersionsFromReferencesAtPaths" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Dont Strip Versions From References At Paths",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)"
      },
      "contentTypeHeader" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      }
    },
    "propertiesSchema" : {
      "title" : "FHIR JSon",
      "description" : "Marshall and unmarshall FHIR objects to/from JSON.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "fhirVersion" : {
          "type" : "string",
          "title" : "Fhir Version",
          "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
          "default" : "R4",
          "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ]
        },
        "fhirContext" : {
          "type" : "string",
          "title" : "Fhir Context",
          "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext"
        },
        "prettyPrint" : {
          "type" : "boolean",
          "title" : "Pretty Print",
          "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible."
        },
        "parserErrorHandler" : {
          "type" : "string",
          "title" : "Parser Error Handler",
          "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler"
        },
        "parserOptions" : {
          "type" : "string",
          "title" : "Parser Options",
          "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions."
        },
        "preferTypes" : {
          "type" : "string",
          "title" : "Prefer Types",
          "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma."
        },
        "forceResourceId" : {
          "type" : "string",
          "title" : "Force Resource Id",
          "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType"
        },
        "serverBaseUrl" : {
          "type" : "string",
          "title" : "Server Base Url",
          "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base."
        },
        "omitResourceId" : {
          "type" : "boolean",
          "title" : "Omit Resource Id",
          "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID."
        },
        "encodeElementsAppliesToChildResourcesOnly" : {
          "type" : "boolean",
          "title" : "Encode Elements Applies To Child Resources Only",
          "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)"
        },
        "encodeElements" : {
          "type" : "string",
          "title" : "Encode Elements",
          "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded"
        },
        "dontEncodeElements" : {
          "type" : "string",
          "title" : "Dont Encode Elements",
          "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode."
        },
        "stripVersionsFromReferences" : {
          "type" : "boolean",
          "title" : "Strip Versions From References",
          "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)"
        },
        "overrideResourceIdWithBundleEntryFullUrl" : {
          "type" : "boolean",
          "title" : "Override Resource Id With Bundle Entry Full Url",
          "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id)."
        },
        "summaryMode" : {
          "type" : "boolean",
          "title" : "Summary Mode",
          "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included."
        },
        "suppressNarratives" : {
          "type" : "boolean",
          "title" : "Suppress Narratives",
          "description" : "If set to true (default is false), narratives will not be included in the encoded values."
        },
        "dontStripVersionsFromReferencesAtPaths" : {
          "type" : "string",
          "title" : "Dont Strip Versions From References At Paths",
          "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)"
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        }
      },
      "required" : [ ]
    }
  },
  "fhirXml" : {
    "model" : {
      "kind" : "model",
      "name" : "fhirXml",
      "title" : "FHIR XML",
      "description" : "Marshall and unmarshall FHIR objects to/from XML.",
      "deprecated" : false,
      "firstVersion" : "2.21.0",
      "label" : "dataformat,transformation,hl7,xml",
      "javaType" : "org.zenithblox.model.dataformat.FhirXmlDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "fhirVersion" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Fhir Version",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "R4",
        "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5"
      },
      "fhirContext" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Fhir Context",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext"
      },
      "prettyPrint" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Pretty Print",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible."
      },
      "parserErrorHandler" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Parser Error Handler",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler"
      },
      "parserOptions" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Parser Options",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions."
      },
      "preferTypes" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Prefer Types",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma."
      },
      "forceResourceId" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Force Resource Id",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType"
      },
      "serverBaseUrl" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Server Base Url",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base."
      },
      "omitResourceId" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Omit Resource Id",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID."
      },
      "encodeElementsAppliesToChildResourcesOnly" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Encode Elements Applies To Child Resources Only",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)"
      },
      "encodeElements" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Encode Elements",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded"
      },
      "dontEncodeElements" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Dont Encode Elements",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode."
      },
      "stripVersionsFromReferences" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Strip Versions From References",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)"
      },
      "overrideResourceIdWithBundleEntryFullUrl" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Override Resource Id With Bundle Entry Full Url",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id)."
      },
      "summaryMode" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Summary Mode",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included."
      },
      "suppressNarratives" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Suppress Narratives",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true (default is false), narratives will not be included in the encoded values."
      },
      "dontStripVersionsFromReferencesAtPaths" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Dont Strip Versions From References At Paths",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)"
      },
      "contentTypeHeader" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      }
    },
    "propertiesSchema" : {
      "title" : "FHIR XML",
      "description" : "Marshall and unmarshall FHIR objects to/from XML.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "fhirVersion" : {
          "type" : "string",
          "title" : "Fhir Version",
          "description" : "The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4,R5",
          "default" : "R4",
          "enum" : [ "DSTU2", "DSTU2_HL7ORG", "DSTU2_1", "DSTU3", "R4", "R5" ]
        },
        "fhirContext" : {
          "type" : "string",
          "title" : "Fhir Context",
          "description" : "To use a custom fhir context. Reference to object of type ca.uhn.fhir.context.FhirContext"
        },
        "prettyPrint" : {
          "type" : "boolean",
          "title" : "Pretty Print",
          "description" : "Sets the pretty print flag, meaning that the parser will encode resources with human-readable spacing and newlines between elements instead of condensing output as much as possible."
        },
        "parserErrorHandler" : {
          "type" : "string",
          "title" : "Parser Error Handler",
          "description" : "Registers an error handler which will be invoked when any parse errors are found. Reference to object of type ca.uhn.fhir.parser.IParserErrorHandler"
        },
        "parserOptions" : {
          "type" : "string",
          "title" : "Parser Options",
          "description" : "Sets the parser options object which will be used to supply default options to newly created parsers. Reference to object of type ca.uhn.fhir.context.ParserOptions."
        },
        "preferTypes" : {
          "type" : "string",
          "title" : "Prefer Types",
          "description" : "If set (FQN class names), when parsing resources the parser will try to use the given types when possible, in the order that they are provided (from highest to lowest priority). For example, if a custom type which declares to implement the Patient resource is passed in here, and the parser is parsing a Bundle containing a Patient resource, the parser will use the given custom type. Multiple class names can be separated by comma."
        },
        "forceResourceId" : {
          "type" : "string",
          "title" : "Force Resource Id",
          "description" : "When encoding, force this resource ID to be encoded as the resource ID. Reference to object of type org.hl7.fhir.instance.model.api.IIdType"
        },
        "serverBaseUrl" : {
          "type" : "string",
          "title" : "Server Base Url",
          "description" : "Sets the server's base URL used by this parser. If a value is set, resource references will be turned into relative references if they are provided as absolute URLs but have a base matching the given base."
        },
        "omitResourceId" : {
          "type" : "boolean",
          "title" : "Omit Resource Id",
          "description" : "If set to true (default is false) the ID of any resources being encoded will not be included in the output. Note that this does not apply to contained resources, only to root resources. In other words, if this is set to true, contained resources will still have local IDs but the outer/containing ID will not have an ID."
        },
        "encodeElementsAppliesToChildResourcesOnly" : {
          "type" : "boolean",
          "title" : "Encode Elements Applies To Child Resources Only",
          "description" : "If set to true (default is false), the values supplied to setEncodeElements(Set) will not be applied to the root resource (typically a Bundle), but will be applied to any sub-resources contained within it (i.e. search result resources in that bundle)"
        },
        "encodeElements" : {
          "type" : "string",
          "title" : "Encode Elements",
          "description" : "If provided, specifies the elements which should be encoded, to the exclusion of all others. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Encode patient and all its children Patient.name - Encode only the patient's name Patient.name.family - Encode only the patient's family name .text - Encode the text element on any resource (only the very first position may contain a wildcard) .(mandatory) - This is a special case which causes any mandatory fields (min 0) to be encoded"
        },
        "dontEncodeElements" : {
          "type" : "string",
          "title" : "Dont Encode Elements",
          "description" : "If provided, specifies the elements which should NOT be encoded. Multiple elements can be separated by comma when using String parameter. Valid values for this field would include: Patient - Don't encode patient and all its children Patient.name - Don't encode the patient's name Patient.name.family - Don't encode the patient's family name .text - Don't encode the text element on any resource (only the very first position may contain a wildcard) DSTU2 note: Note that values including meta, such as Patient.meta will work for DSTU2 parsers, but values with subelements on meta such as Patient.meta.lastUpdated will only work in DSTU3 mode."
        },
        "stripVersionsFromReferences" : {
          "type" : "boolean",
          "title" : "Strip Versions From References",
          "description" : "If set to true (which is the default), resource references containing a version will have the version removed when the resource is encoded. This is generally good behaviour because in most situations, references from one resource to another should be to the resource by ID, not by ID and version. In some cases though, it may be desirable to preserve the version in resource links. In that case, this value should be set to false. This method provides the ability to globally disable reference encoding. If finer-grained control is needed, use setDontStripVersionsFromReferencesAtPaths(List)"
        },
        "overrideResourceIdWithBundleEntryFullUrl" : {
          "type" : "boolean",
          "title" : "Override Resource Id With Bundle Entry Full Url",
          "description" : "If set to true (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this to false if this is not the desired behavior (e.g. the client code wishes to perform additional validation checks between the fullUrl and the resource id)."
        },
        "summaryMode" : {
          "type" : "boolean",
          "title" : "Summary Mode",
          "description" : "If set to true (default is false) only elements marked by the FHIR specification as being summary elements will be included."
        },
        "suppressNarratives" : {
          "type" : "boolean",
          "title" : "Suppress Narratives",
          "description" : "If set to true (default is false), narratives will not be included in the encoded values."
        },
        "dontStripVersionsFromReferencesAtPaths" : {
          "type" : "string",
          "title" : "Dont Strip Versions From References At Paths",
          "description" : "If supplied value(s), any resource references at the specified paths will have their resource versions encoded instead of being automatically stripped during the encoding process. This setting has no effect on the parsing process. Multiple elements can be separated by comma when using String parameter. This method provides a finer-grained level of control than setStripVersionsFromReferences(String) and any paths specified by this method will be encoded even if setStripVersionsFromReferences(String) has been set to true (which is the default)"
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        }
      },
      "required" : [ ]
    }
  },
  "flatpack" : {
    "model" : {
      "kind" : "model",
      "name" : "flatpack",
      "title" : "Flatpack",
      "description" : "Marshal and unmarshal Java lists and maps to/from flat files (such as CSV, delimited, or fixed length formats) using Flatpack library.",
      "deprecated" : false,
      "firstVersion" : "2.1.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.FlatpackDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "definition" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Definition",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap."
      },
      "fixed" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Fixed",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Delimited or fixed. Is by default false = delimited"
      },
      "delimiter" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : ",",
        "description" : "The delimiter char (could be ; , or similar)"
      },
      "ignoreFirstRecord" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Ignore First Record",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the first line is ignored for delimited files (for the column headers). Is by default true."
      },
      "allowShortLines" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Allow Short Lines",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Allows for lines to be shorter than expected and ignores the extra characters"
      },
      "ignoreExtraColumns" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Ignore Extra Columns",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Allows for lines to be longer than expected and ignores the extra characters."
      },
      "textQualifier" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Text Qualifier",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If the text is qualified with a character. Uses quote character by default."
      },
      "parserFactoryRef" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Parser Factory Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "References to a custom parser factory to lookup in the registry"
      }
    },
    "propertiesSchema" : {
      "title" : "Flatpack",
      "description" : "Marshal and unmarshal Java lists and maps to/from flat files (such as CSV, delimited, or fixed length formats) using Flatpack library.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "definition" : {
          "type" : "string",
          "title" : "Definition",
          "description" : "The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap."
        },
        "fixed" : {
          "type" : "boolean",
          "title" : "Fixed",
          "description" : "Delimited or fixed. Is by default false = delimited"
        },
        "delimiter" : {
          "type" : "string",
          "title" : "Delimiter",
          "description" : "The delimiter char (could be ; , or similar)",
          "default" : ","
        },
        "ignoreFirstRecord" : {
          "type" : "boolean",
          "title" : "Ignore First Record",
          "description" : "Whether the first line is ignored for delimited files (for the column headers). Is by default true."
        },
        "allowShortLines" : {
          "type" : "boolean",
          "title" : "Allow Short Lines",
          "description" : "Allows for lines to be shorter than expected and ignores the extra characters"
        },
        "ignoreExtraColumns" : {
          "type" : "boolean",
          "title" : "Ignore Extra Columns",
          "description" : "Allows for lines to be longer than expected and ignores the extra characters."
        },
        "textQualifier" : {
          "type" : "string",
          "title" : "Text Qualifier",
          "description" : "If the text is qualified with a character. Uses quote character by default."
        },
        "parserFactoryRef" : {
          "type" : "string",
          "title" : "Parser Factory Ref",
          "description" : "References to a custom parser factory to lookup in the registry"
        }
      },
      "required" : [ ]
    }
  },
  "fury" : {
    "model" : {
      "kind" : "model",
      "name" : "fury",
      "title" : "Fury",
      "description" : "Serialize and deserialize messages using Apache Fury",
      "deprecated" : false,
      "firstVersion" : "4.9.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.FuryDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "unmarshalType" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class of the java type to use when unmarshalling"
      },
      "requireClassRegistration" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Require Class Registration",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to require register classes"
      },
      "threadSafe" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Thread Safe",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to use the threadsafe fury"
      },
      "allowAutoWiredFury" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Allow Auto Wired Fury",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to auto-discover Fury from the registry"
      }
    },
    "propertiesSchema" : {
      "title" : "Fury",
      "description" : "Serialize and deserialize messages using Apache Fury",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class of the java type to use when unmarshalling"
        },
        "requireClassRegistration" : {
          "type" : "boolean",
          "title" : "Require Class Registration",
          "description" : "Whether to require register classes"
        },
        "threadSafe" : {
          "type" : "boolean",
          "title" : "Thread Safe",
          "description" : "Whether to use the threadsafe fury"
        },
        "allowAutoWiredFury" : {
          "type" : "boolean",
          "title" : "Allow Auto Wired Fury",
          "description" : "Whether to auto-discover Fury from the registry"
        }
      },
      "required" : [ ]
    }
  },
  "grok" : {
    "model" : {
      "kind" : "model",
      "name" : "grok",
      "title" : "Grok",
      "description" : "Unmarshal unstructured data to objects using Logstash based Grok patterns.",
      "deprecated" : false,
      "firstVersion" : "3.0.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.GrokDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "pattern" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Pattern",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The grok pattern to match lines of input"
      },
      "flattened" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Flattened",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Turns on flattened mode. In flattened mode the exception is thrown when there are multiple pattern matches with same key."
      },
      "allowMultipleMatchesPerLine" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Allow Multiple Matches Per Line",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "If false, every line of input is matched for pattern only once. Otherwise the line can be scanned multiple times when non-terminal pattern is used."
      },
      "namedOnly" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Named Only",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})"
      }
    },
    "propertiesSchema" : {
      "title" : "Grok",
      "description" : "Unmarshal unstructured data to objects using Logstash based Grok patterns.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "pattern" : {
          "type" : "string",
          "title" : "Pattern",
          "description" : "The grok pattern to match lines of input"
        },
        "flattened" : {
          "type" : "boolean",
          "title" : "Flattened",
          "description" : "Turns on flattened mode. In flattened mode the exception is thrown when there are multiple pattern matches with same key."
        },
        "allowMultipleMatchesPerLine" : {
          "type" : "boolean",
          "title" : "Allow Multiple Matches Per Line",
          "description" : "If false, every line of input is matched for pattern only once. Otherwise the line can be scanned multiple times when non-terminal pattern is used."
        },
        "namedOnly" : {
          "type" : "boolean",
          "title" : "Named Only",
          "description" : "Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})"
        }
      },
      "required" : [ ]
    }
  },
  "gzipDeflater" : {
    "model" : {
      "kind" : "model",
      "name" : "gzipDeflater",
      "title" : "GZip Deflater",
      "description" : "Compress and decompress messages using java.util.zip.GZIPStream.",
      "deprecated" : false,
      "firstVersion" : "2.0.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.GzipDeflaterDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      }
    },
    "propertiesSchema" : {
      "title" : "GZip Deflater",
      "description" : "Compress and decompress messages using java.util.zip.GZIPStream.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        }
      },
      "required" : [ ]
    }
  },
  "hl7" : {
    "model" : {
      "kind" : "model",
      "name" : "hl7",
      "title" : "HL7",
      "description" : "Marshal and unmarshal HL7 (Health Care) model objects using the HL7 MLLP codec.",
      "deprecated" : false,
      "firstVersion" : "2.0.0",
      "label" : "dataformat,transformation,hl7",
      "javaType" : "org.zenithblox.model.dataformat.HL7DataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "validate" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Validate",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to validate the HL7 message Is by default true."
      }
    },
    "propertiesSchema" : {
      "title" : "HL7",
      "description" : "Marshal and unmarshal HL7 (Health Care) model objects using the HL7 MLLP codec.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "validate" : {
          "type" : "boolean",
          "title" : "Validate",
          "description" : "Whether to validate the HL7 message Is by default true."
        }
      },
      "required" : [ ]
    }
  },
  "ical" : {
    "model" : {
      "kind" : "model",
      "name" : "ical",
      "title" : "iCal",
      "description" : "Marshal and unmarshal iCal (.ics) documents to/from model objects.",
      "deprecated" : false,
      "firstVersion" : "2.12.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.IcalDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "validating" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Validating",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to validate."
      }
    },
    "propertiesSchema" : {
      "title" : "iCal",
      "description" : "Marshal and unmarshal iCal (.ics) documents to/from model objects.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "validating" : {
          "type" : "boolean",
          "title" : "Validating",
          "description" : "Whether to validate."
        }
      },
      "required" : [ ]
    }
  },
  "jacksonXml" : {
    "model" : {
      "kind" : "model",
      "name" : "jacksonXml",
      "title" : "Jackson XML",
      "description" : "Unmarshal an XML payloads to POJOs and back using XMLMapper extension of Jackson.",
      "deprecated" : false,
      "firstVersion" : "2.16.0",
      "label" : "dataformat,transformation,xml",
      "javaType" : "org.zenithblox.model.dataformat.JacksonXMLDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "xmlMapper" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Xml Mapper",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Lookup and use the existing XmlMapper with the given id."
      },
      "prettyPrint" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Pretty Print",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To enable pretty printing output nicely formatted. Is by default false."
      },
      "unmarshalType" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name of the java type to use when unmarshalling"
      },
      "allowUnmarshallType" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Allow Unmarshall Type",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
      },
      "jsonView" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Json View",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
      },
      "include" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Include",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
      },
      "allowJmsType" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Allow Jms Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
      },
      "collectionType" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Collection Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
      },
      "useList" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Use List",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To unmarshal to a List of Map or a List of Pojo."
      },
      "timezone" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Timezone",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling."
      },
      "enableJaxbAnnotationModule" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Enable Jaxb Annotation Module",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether to enable the JAXB annotations module when using jackson. When enabled then JAXB annotations can be used by Jackson."
      },
      "moduleClassNames" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Module Class Names",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
      },
      "moduleRefs" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Module Refs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
      },
      "enableFeatures" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Enable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "disableFeatures" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Disable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "contentTypeHeader" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      }
    },
    "propertiesSchema" : {
      "title" : "Jackson XML",
      "description" : "Unmarshal an XML payloads to POJOs and back using XMLMapper extension of Jackson.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "xmlMapper" : {
          "type" : "string",
          "title" : "Xml Mapper",
          "description" : "Lookup and use the existing XmlMapper with the given id."
        },
        "prettyPrint" : {
          "type" : "boolean",
          "title" : "Pretty Print",
          "description" : "To enable pretty printing output nicely formatted. Is by default false."
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class name of the java type to use when unmarshalling"
        },
        "allowUnmarshallType" : {
          "type" : "boolean",
          "title" : "Allow Unmarshall Type",
          "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
        },
        "jsonView" : {
          "type" : "string",
          "title" : "Json View",
          "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
        },
        "include" : {
          "type" : "string",
          "title" : "Include",
          "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
        },
        "allowJmsType" : {
          "type" : "boolean",
          "title" : "Allow Jms Type",
          "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
        },
        "collectionType" : {
          "type" : "string",
          "title" : "Collection Type",
          "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
        },
        "useList" : {
          "type" : "boolean",
          "title" : "Use List",
          "description" : "To unmarshal to a List of Map or a List of Pojo."
        },
        "timezone" : {
          "type" : "string",
          "title" : "Timezone",
          "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling."
        },
        "enableJaxbAnnotationModule" : {
          "type" : "boolean",
          "title" : "Enable Jaxb Annotation Module",
          "description" : "Whether to enable the JAXB annotations module when using jackson. When enabled then JAXB annotations can be used by Jackson."
        },
        "moduleClassNames" : {
          "type" : "string",
          "title" : "Module Class Names",
          "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
        },
        "moduleRefs" : {
          "type" : "string",
          "title" : "Module Refs",
          "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
        },
        "enableFeatures" : {
          "type" : "string",
          "title" : "Enable Features",
          "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "disableFeatures" : {
          "type" : "string",
          "title" : "Disable Features",
          "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        }
      },
      "required" : [ ]
    }
  },
  "jaxb" : {
    "model" : {
      "kind" : "model",
      "name" : "jaxb",
      "title" : "JAXB",
      "description" : "Unmarshal XML payloads to POJOs and back using JAXB2 XML marshalling standard.",
      "deprecated" : false,
      "firstVersion" : "1.0.0",
      "label" : "dataformat,transformation,xml",
      "javaType" : "org.zenithblox.model.dataformat.JaxbDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "contextPath" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Context Path",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Package name where your JAXB classes are located."
      },
      "contextPathIsClassName" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Context Path Is Class Name",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "This can be set to true to mark that the contextPath is referring to a classname and not a package name."
      },
      "schema" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Schema",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character."
      },
      "schemaSeverityLevel" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Schema Severity Level",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.Integer",
        "enum" : [ "0", "1", "2" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "0",
        "description" : "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error."
      },
      "prettyPrint" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Pretty Print",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "To enable pretty printing output nicely formatted. Is by default false."
      },
      "objectFactory" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Object Factory",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files."
      },
      "ignoreJAXBElement" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Ignore JAXBElement",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to ignore JAXBElement elements - only needed to be set to false in very special use-cases."
      },
      "mustBeJAXBElement" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Must Be JAXBElement",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether marhsalling must be java objects with JAXB annotations. And if not then it fails. This option can be set to false to relax that, such as when the data is already in XML format."
      },
      "filterNonXmlChars" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Filter Non Xml Chars",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To ignore non xml characheters and replace them with an empty space."
      },
      "encoding" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Encoding",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To overrule and use a specific encoding"
      },
      "fragment" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Fragment",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Zwangine will pass this class to JAXB's unmarshaler."
      },
      "partClass" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Part Class",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of class used for fragment parsing. See more details at the fragment option."
      },
      "partNamespace" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Part Namespace",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "XML namespace to use for fragment parsing. See more details at the fragment option."
      },
      "namespacePrefixRef" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Namespace Prefix Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping."
      },
      "xmlStreamWriterWrapper" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Xml Stream Writer Wrapper",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use a custom xml stream writer."
      },
      "schemaLocation" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Schema Location",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the location of the schema"
      },
      "noNamespaceSchemaLocation" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "No Namespace Schema Location",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To define the location of the namespaceless schema"
      },
      "jaxbProviderProperties" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Jaxb Provider Properties",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller."
      },
      "contentTypeHeader" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      },
      "accessExternalSchemaProtocols" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Access External Schema Protocols",
        "group" : "security",
        "label" : "security",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "false",
        "description" : "Only in use if schema validation has been enabled. Restrict access to the protocols specified for external reference set by the schemaLocation attribute, Import and Include element. Examples of protocols are file, http, jar:file. false or none to deny all access to external references; a specific protocol, such as file, to give permission to only the protocol; the keyword all to grant permission to all protocols."
      }
    },
    "propertiesSchema" : {
      "title" : "JAXB",
      "description" : "Unmarshal XML payloads to POJOs and back using JAXB2 XML marshalling standard.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "contextPath" : {
          "type" : "string",
          "title" : "Context Path",
          "description" : "Package name where your JAXB classes are located."
        },
        "contextPathIsClassName" : {
          "type" : "boolean",
          "title" : "Context Path Is Class Name",
          "description" : "This can be set to true to mark that the contextPath is referring to a classname and not a package name."
        },
        "schema" : {
          "type" : "string",
          "title" : "Schema",
          "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character."
        },
        "schemaSeverityLevel" : {
          "type" : "string",
          "title" : "Schema Severity Level",
          "description" : "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error.",
          "default" : "0",
          "enum" : [ "0", "1", "2" ]
        },
        "prettyPrint" : {
          "type" : "boolean",
          "title" : "Pretty Print",
          "description" : "To enable pretty printing output nicely formatted. Is by default false."
        },
        "objectFactory" : {
          "type" : "boolean",
          "title" : "Object Factory",
          "description" : "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files."
        },
        "ignoreJAXBElement" : {
          "type" : "boolean",
          "title" : "Ignore JAXBElement",
          "description" : "Whether to ignore JAXBElement elements - only needed to be set to false in very special use-cases."
        },
        "mustBeJAXBElement" : {
          "type" : "boolean",
          "title" : "Must Be JAXBElement",
          "description" : "Whether marhsalling must be java objects with JAXB annotations. And if not then it fails. This option can be set to false to relax that, such as when the data is already in XML format."
        },
        "filterNonXmlChars" : {
          "type" : "boolean",
          "title" : "Filter Non Xml Chars",
          "description" : "To ignore non xml characheters and replace them with an empty space."
        },
        "encoding" : {
          "type" : "string",
          "title" : "Encoding",
          "description" : "To overrule and use a specific encoding"
        },
        "fragment" : {
          "type" : "boolean",
          "title" : "Fragment",
          "description" : "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Zwangine will pass this class to JAXB's unmarshaler."
        },
        "partClass" : {
          "type" : "string",
          "title" : "Part Class",
          "description" : "Name of class used for fragment parsing. See more details at the fragment option."
        },
        "partNamespace" : {
          "type" : "string",
          "title" : "Part Namespace",
          "description" : "XML namespace to use for fragment parsing. See more details at the fragment option."
        },
        "namespacePrefixRef" : {
          "type" : "string",
          "title" : "Namespace Prefix Ref",
          "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping."
        },
        "xmlStreamWriterWrapper" : {
          "type" : "string",
          "title" : "Xml Stream Writer Wrapper",
          "description" : "To use a custom xml stream writer."
        },
        "schemaLocation" : {
          "type" : "string",
          "title" : "Schema Location",
          "description" : "To define the location of the schema"
        },
        "noNamespaceSchemaLocation" : {
          "type" : "string",
          "title" : "No Namespace Schema Location",
          "description" : "To define the location of the namespaceless schema"
        },
        "jaxbProviderProperties" : {
          "type" : "string",
          "title" : "Jaxb Provider Properties",
          "description" : "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller."
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        },
        "accessExternalSchemaProtocols" : {
          "type" : "string",
          "title" : "Access External Schema Protocols",
          "description" : "Only in use if schema validation has been enabled. Restrict access to the protocols specified for external reference set by the schemaLocation attribute, Import and Include element. Examples of protocols are file, http, jar:file. false or none to deny all access to external references; a specific protocol, such as file, to give permission to only the protocol; the keyword all to grant permission to all protocols.",
          "default" : "false"
        }
      },
      "required" : [ "contextPath" ]
    }
  },
  "json" : {
    "model" : {
      "kind" : "model",
      "name" : "json",
      "title" : "JSon",
      "description" : "Marshal POJOs to JSON and back.",
      "deprecated" : false,
      "label" : "dataformat,transformation,json",
      "javaType" : "org.zenithblox.model.dataformat.JsonDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "objectMapper" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson."
      },
      "useDefaultObjectMapper" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Use Default Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry."
      },
      "autoDiscoverObjectMapper" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Auto Discover Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true then Jackson will look for an objectMapper to use from the registry"
      },
      "prettyPrint" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Pretty Print",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To enable pretty printing output nicely formatted. Is by default false."
      },
      "library" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Library",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.dataformat.JsonLibrary",
        "enum" : [ "Fastjson", "Gson", "Jackson", "Johnzon", "Jsonb" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "Jackson",
        "description" : "Which json library to use."
      },
      "combineUnicodeSurrogates" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Combine Unicode Surrogates",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Force generator that outputs JSON content to combine surrogate pairs (if any) into 4-byte characters. This should be preferred when using 4-byte characters such as Japanese."
      },
      "unmarshalType" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name of the java type to use when unmarshalling"
      },
      "jsonView" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Json View",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
      },
      "include" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Include",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
      },
      "allowJmsType" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Allow Jms Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
      },
      "collectionType" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Collection Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows using different collection types than java.util.Collection based as default."
      },
      "useList" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Use List",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To unmarshal to a List of Map or a List of Pojo."
      },
      "moduleClassNames" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Module Class Names",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
      },
      "moduleRefs" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Module Refs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
      },
      "enableFeatures" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Enable Features",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "disableFeatures" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Disable Features",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "allowUnmarshallType" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Allow Unmarshall Type",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
      },
      "timezone" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Timezone",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling. This option will have no effect on the others Json DataFormat, like gson and fastjson."
      },
      "schemaResolver" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Schema Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "object",
        "javaType" : "org.zenithblox.component.jackson.SchemaResolver",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Optional schema resolver used to lookup schemas for the data in transit."
      },
      "autoDiscoverSchemaResolver" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Auto Discover Schema Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When not disabled, the SchemaResolver will be looked up into the registry"
      },
      "namingStrategy" : {
        "index" : 21,
        "kind" : "attribute",
        "displayName" : "Naming Strategy",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set then Jackson will use the the defined Property Naming Strategy.Possible values are: LOWER_CAMEL_CASE, LOWER_DOT_CASE, LOWER_CASE, KEBAB_CASE, SNAKE_CASE and UPPER_CAMEL_CASE"
      },
      "contentTypeHeader" : {
        "index" : 22,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      },
      "dateFormatPattern" : {
        "index" : 23,
        "kind" : "attribute",
        "displayName" : "Date Format Pattern",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To configure the date format while marshall or unmarshall Date fields in JSON using Gson"
      }
    },
    "propertiesSchema" : {
      "title" : "JSon",
      "description" : "Marshal POJOs to JSON and back.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "allowJmsType" : {
          "type" : "boolean",
          "title" : "Allow Jms Type",
          "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
        },
        "allowUnmarshallType" : {
          "type" : "boolean",
          "title" : "Allow Unmarshall Type",
          "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
        },
        "autoDiscoverObjectMapper" : {
          "type" : "boolean",
          "title" : "Auto Discover Object Mapper",
          "description" : "If set to true then Jackson will look for an objectMapper to use from the registry"
        },
        "autoDiscoverSchemaResolver" : {
          "type" : "boolean",
          "title" : "Auto Discover Schema Resolver",
          "description" : "When not disabled, the SchemaResolver will be looked up into the registry"
        },
        "collectionType" : {
          "type" : "string",
          "title" : "Collection Type",
          "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows using different collection types than java.util.Collection based as default."
        },
        "combineUnicodeSurrogates" : {
          "type" : "boolean",
          "title" : "Combine Unicode Surrogates",
          "description" : "Force generator that outputs JSON content to combine surrogate pairs (if any) into 4-byte characters. This should be preferred when using 4-byte characters such as Japanese."
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        },
        "dateFormatPattern" : {
          "type" : "string",
          "title" : "Date Format Pattern",
          "description" : "To configure the date format while marshall or unmarshall Date fields in JSON using Gson"
        },
        "disableFeatures" : {
          "type" : "string",
          "title" : "Disable Features",
          "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "enableFeatures" : {
          "type" : "string",
          "title" : "Enable Features",
          "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "include" : {
          "type" : "string",
          "title" : "Include",
          "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
        },
        "jsonView" : {
          "type" : "string",
          "title" : "Json View",
          "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
        },
        "library" : {
          "type" : "string",
          "title" : "Library",
          "description" : "Which json library to use.",
          "default" : "Jackson",
          "enum" : [ "Fastjson", "Gson", "Jackson", "Johnzon", "Jsonb" ]
        },
        "moduleClassNames" : {
          "type" : "string",
          "title" : "Module Class Names",
          "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
        },
        "moduleRefs" : {
          "type" : "string",
          "title" : "Module Refs",
          "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
        },
        "namingStrategy" : {
          "type" : "string",
          "title" : "Naming Strategy",
          "description" : "If set then Jackson will use the the defined Property Naming Strategy.Possible values are: LOWER_CAMEL_CASE, LOWER_DOT_CASE, LOWER_CASE, KEBAB_CASE, SNAKE_CASE and UPPER_CAMEL_CASE"
        },
        "objectMapper" : {
          "type" : "string",
          "title" : "Object Mapper",
          "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson."
        },
        "prettyPrint" : {
          "type" : "boolean",
          "title" : "Pretty Print",
          "description" : "To enable pretty printing output nicely formatted. Is by default false."
        },
        "schemaResolver" : {
          "type" : "string",
          "title" : "Schema Resolver",
          "description" : "Optional schema resolver used to lookup schemas for the data in transit."
        },
        "timezone" : {
          "type" : "string",
          "title" : "Timezone",
          "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling. This option will have no effect on the others Json DataFormat, like gson and fastjson."
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class name of the java type to use when unmarshalling"
        },
        "useDefaultObjectMapper" : {
          "type" : "boolean",
          "title" : "Use Default Object Mapper",
          "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry."
        },
        "useList" : {
          "type" : "boolean",
          "title" : "Use List",
          "description" : "To unmarshal to a List of Map or a List of Pojo."
        }
      },
      "required" : [ ]
    }
  },
  "jsonApi" : {
    "model" : {
      "kind" : "model",
      "name" : "jsonApi",
      "title" : "JSonApi",
      "description" : "Marshal and unmarshal JSON:API resources using JSONAPI-Converter library.",
      "deprecated" : false,
      "firstVersion" : "3.0.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.JsonApiDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "dataFormatTypes" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Data Format Types",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The classes to take into account for the marshalling. Multiple classes can be separated by comma."
      },
      "mainFormatType" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Main Format Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The class to take into account while unmarshalling."
      }
    },
    "propertiesSchema" : {
      "title" : "JSonApi",
      "description" : "Marshal and unmarshal JSON:API resources using JSONAPI-Converter library.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "dataFormatTypes" : {
          "type" : "string",
          "title" : "Data Format Types",
          "description" : "The classes to take into account for the marshalling. Multiple classes can be separated by comma."
        },
        "mainFormatType" : {
          "type" : "string",
          "title" : "Main Format Type",
          "description" : "The class to take into account while unmarshalling."
        }
      },
      "required" : [ ]
    }
  },
  "lzf" : {
    "model" : {
      "kind" : "model",
      "name" : "lzf",
      "title" : "LZF Deflate Compression",
      "description" : "Compress and decompress streams using LZF deflate algorithm.",
      "deprecated" : false,
      "firstVersion" : "2.17.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.LZFDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "usingParallelCompression" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Using Parallel Compression",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Enable encoding (compress) using multiple processing cores."
      }
    },
    "propertiesSchema" : {
      "title" : "LZF Deflate Compression",
      "description" : "Compress and decompress streams using LZF deflate algorithm.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "usingParallelCompression" : {
          "type" : "boolean",
          "title" : "Using Parallel Compression",
          "description" : "Enable encoding (compress) using multiple processing cores."
        }
      },
      "required" : [ ]
    }
  },
  "mimeMultipart" : {
    "model" : {
      "kind" : "model",
      "name" : "mimeMultipart",
      "title" : "MIME Multipart",
      "description" : "Marshal Zwangine messages with attachments into MIME-Multipart messages and back.",
      "deprecated" : false,
      "firstVersion" : "2.17.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.MimeMultipartDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "multipartSubType" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Multipart Sub Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "mixed",
        "description" : "Specify the subtype of the MIME Multipart. Default is mixed."
      },
      "multipartWithoutAttachment" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Multipart Without Attachment",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false."
      },
      "headersInline" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Headers Inline",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Zwangine headers (false). Default is false."
      },
      "includeHeaders" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Include Headers",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A regex that defines which Zwangine headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers"
      },
      "binaryContent" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Binary Content",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false."
      }
    },
    "propertiesSchema" : {
      "title" : "MIME Multipart",
      "description" : "Marshal Zwangine messages with attachments into MIME-Multipart messages and back.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "multipartSubType" : {
          "type" : "string",
          "title" : "Multipart Sub Type",
          "description" : "Specify the subtype of the MIME Multipart. Default is mixed.",
          "default" : "mixed"
        },
        "multipartWithoutAttachment" : {
          "type" : "boolean",
          "title" : "Multipart Without Attachment",
          "description" : "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false."
        },
        "headersInline" : {
          "type" : "boolean",
          "title" : "Headers Inline",
          "description" : "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Zwangine headers (false). Default is false."
        },
        "includeHeaders" : {
          "type" : "string",
          "title" : "Include Headers",
          "description" : "A regex that defines which Zwangine headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers"
        },
        "binaryContent" : {
          "type" : "boolean",
          "title" : "Binary Content",
          "description" : "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false."
        }
      },
      "required" : [ ]
    }
  },
  "parquetAvro" : {
    "model" : {
      "kind" : "model",
      "name" : "parquetAvro",
      "title" : "Parquet File",
      "description" : "Parquet Avro serialization and de-serialization.",
      "deprecated" : false,
      "firstVersion" : "4.0.0",
      "label" : "dataformat,transformation,file",
      "javaType" : "org.zenithblox.model.dataformat.ParquetAvroDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "compressionCodecName" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Compression Codec Name",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD", "LZ4_RAW" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "GZIP",
        "description" : "Compression codec to use when marshalling."
      },
      "unmarshalType" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class to use when (un)marshalling. If omitted, parquet files are converted into Avro's GenericRecords for unmarshalling and input objects are assumed as GenericRecords for marshalling."
      },
      "lazyLoad" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Lazy Load",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce an iterator of records or read all the records at once."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "compressionCodecName" : {
          "type" : "string",
          "title" : "Compression Codec Name",
          "description" : "Compression codec to use when marshalling.",
          "default" : "GZIP",
          "enum" : [ "UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD", "LZ4_RAW" ]
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class to use when (un)marshalling. If omitted, parquet files are converted into Avro's GenericRecords for unmarshalling and input objects are assumed as GenericRecords for marshalling."
        },
        "lazyLoad" : {
          "type" : "boolean",
          "title" : "Lazy Load",
          "description" : "Whether the unmarshalling should produce an iterator of records or read all the records at once."
        }
      },
      "title" : "Parquet File",
      "description" : "Parquet Avro serialization and de-serialization.",
      "required" : [ ]
    }
  },
  "pgp" : {
    "model" : {
      "kind" : "model",
      "name" : "pgp",
      "title" : "PGP",
      "description" : "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
      "deprecated" : false,
      "firstVersion" : "2.9.0",
      "label" : "dataformat,transformation,security",
      "javaType" : "org.zenithblox.model.dataformat.PGPDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "keyUserid" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Key Userid",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID."
      },
      "signatureKeyUserid" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Signature Key Userid",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID."
      },
      "password" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Password",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Password used when opening the private key (not used for encryption)."
      },
      "signaturePassword" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Signature Password",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Password used when opening the private key used for signing (during encryption)."
      },
      "keyFileName" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Key File Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix)."
      },
      "signatureKeyFileName" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Signature Key File Name",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix)."
      },
      "signatureKeyRing" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Signature Key Ring",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Keyring used for signing/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time."
      },
      "armored" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Armored",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "This option will cause PGP to base64 encode the encrypted text, making it available for copy/paste, etc."
      },
      "integrity" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Integrity",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Adds an integrity check/sign into the encryption file. The default value is true."
      },
      "provider" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Provider",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work."
      },
      "algorithm" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting."
      },
      "compressionAlgorithm" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Compression Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting."
      },
      "hashAlgorithm" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Hash Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing."
      },
      "signatureVerificationOption" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Signature Verification Option",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown."
      }
    },
    "propertiesSchema" : {
      "title" : "PGP",
      "description" : "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "keyUserid" : {
          "type" : "string",
          "title" : "Key Userid",
          "description" : "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID."
        },
        "signatureKeyUserid" : {
          "type" : "string",
          "title" : "Signature Key Userid",
          "description" : "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID."
        },
        "password" : {
          "type" : "string",
          "title" : "Password",
          "description" : "Password used when opening the private key (not used for encryption)."
        },
        "signaturePassword" : {
          "type" : "string",
          "title" : "Signature Password",
          "description" : "Password used when opening the private key used for signing (during encryption)."
        },
        "keyFileName" : {
          "type" : "string",
          "title" : "Key File Name",
          "description" : "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix)."
        },
        "signatureKeyFileName" : {
          "type" : "string",
          "title" : "Signature Key File Name",
          "description" : "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix)."
        },
        "signatureKeyRing" : {
          "type" : "string",
          "title" : "Signature Key Ring",
          "description" : "Keyring used for signing/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time."
        },
        "armored" : {
          "type" : "boolean",
          "title" : "Armored",
          "description" : "This option will cause PGP to base64 encode the encrypted text, making it available for copy/paste, etc."
        },
        "integrity" : {
          "type" : "boolean",
          "title" : "Integrity",
          "description" : "Adds an integrity check/sign into the encryption file. The default value is true."
        },
        "provider" : {
          "type" : "string",
          "title" : "Provider",
          "description" : "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work."
        },
        "algorithm" : {
          "type" : "number",
          "title" : "Algorithm",
          "description" : "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting."
        },
        "compressionAlgorithm" : {
          "type" : "number",
          "title" : "Compression Algorithm",
          "description" : "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting."
        },
        "hashAlgorithm" : {
          "type" : "number",
          "title" : "Hash Algorithm",
          "description" : "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing."
        },
        "signatureVerificationOption" : {
          "type" : "string",
          "title" : "Signature Verification Option",
          "description" : "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown."
        }
      },
      "required" : [ ]
    }
  },
  "protobuf" : {
    "model" : {
      "kind" : "model",
      "name" : "protobuf",
      "title" : "Protobuf",
      "description" : "Serialize and deserialize Java objects using Google's Protocol buffers.",
      "deprecated" : false,
      "firstVersion" : "2.2.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.ProtobufDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "instanceClass" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Instance Class",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of class to use when unmarshalling"
      },
      "objectMapper" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Object Mapper",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson."
      },
      "useDefaultObjectMapper" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Use Default Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry."
      },
      "autoDiscoverObjectMapper" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Auto Discover Object Mapper",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If set to true then Jackson will lookup for an objectMapper into the registry"
      },
      "library" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Library",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.dataformat.ProtobufLibrary",
        "enum" : [ "GoogleProtobuf", "Jackson" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "GoogleProtobuf",
        "description" : "Which Protobuf library to use."
      },
      "unmarshalType" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name of the java type to use when unmarshalling"
      },
      "jsonView" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Json View",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
      },
      "include" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Include",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
      },
      "allowJmsType" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Allow Jms Type",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
      },
      "collectionType" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Collection Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
      },
      "useList" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Use List",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "To unmarshal to a List of Map or a List of Pojo."
      },
      "moduleClassNames" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Module Class Names",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
      },
      "moduleRefs" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Module Refs",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
      },
      "enableFeatures" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Enable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "disableFeatures" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Disable Features",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
      },
      "allowUnmarshallType" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Allow Unmarshall Type",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
      },
      "timezone" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "Timezone",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling."
      },
      "schemaResolver" : {
        "index" : 18,
        "kind" : "attribute",
        "displayName" : "Schema Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Optional schema resolver used to lookup schemas for the data in transit."
      },
      "autoDiscoverSchemaResolver" : {
        "index" : 19,
        "kind" : "attribute",
        "displayName" : "Auto Discover Schema Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "When not disabled, the SchemaResolver will be looked up into the registry"
      },
      "contentTypeFormat" : {
        "index" : 20,
        "kind" : "attribute",
        "displayName" : "Content Type Format",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "native", "json" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "native",
        "description" : "Defines a content type format in which protobuf message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native protobuf or json fields representation. The default value is native."
      },
      "contentTypeHeader" : {
        "index" : 21,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "instanceClass" : {
          "type" : "string",
          "title" : "Instance Class",
          "description" : "Name of class to use when unmarshalling"
        },
        "objectMapper" : {
          "type" : "string",
          "title" : "Object Mapper",
          "description" : "Lookup and use the existing ObjectMapper with the given id when using Jackson."
        },
        "useDefaultObjectMapper" : {
          "type" : "boolean",
          "title" : "Use Default Object Mapper",
          "description" : "Whether to lookup and use default Jackson ObjectMapper from the registry."
        },
        "autoDiscoverObjectMapper" : {
          "type" : "boolean",
          "title" : "Auto Discover Object Mapper",
          "description" : "If set to true then Jackson will lookup for an objectMapper into the registry"
        },
        "library" : {
          "type" : "string",
          "title" : "Library",
          "description" : "Which Protobuf library to use.",
          "default" : "GoogleProtobuf",
          "enum" : [ "GoogleProtobuf", "Jackson" ]
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class name of the java type to use when unmarshalling"
        },
        "jsonView" : {
          "type" : "string",
          "title" : "Json View",
          "description" : "When marshalling a POJO to JSON you might want to exclude certain fields from the JSON output. With Jackson you can use JSON views to accomplish this. This option is to refer to the class which has JsonView annotations"
        },
        "include" : {
          "type" : "string",
          "title" : "Include",
          "description" : "If you want to marshal a pojo to JSON, and the pojo has some fields with null values. And you want to skip these null values, you can set this option to NON_NULL"
        },
        "allowJmsType" : {
          "type" : "boolean",
          "title" : "Allow Jms Type",
          "description" : "Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to."
        },
        "collectionType" : {
          "type" : "string",
          "title" : "Collection Type",
          "description" : "Refers to a custom collection type to lookup in the registry to use. This option should rarely be used, but allows to use different collection types than java.util.Collection based as default."
        },
        "useList" : {
          "type" : "boolean",
          "title" : "Use List",
          "description" : "To unmarshal to a List of Map or a List of Pojo."
        },
        "moduleClassNames" : {
          "type" : "string",
          "title" : "Module Class Names",
          "description" : "To use custom Jackson modules com.fasterxml.jackson.databind.Module specified as a String with FQN class names. Multiple classes can be separated by comma."
        },
        "moduleRefs" : {
          "type" : "string",
          "title" : "Module Refs",
          "description" : "To use custom Jackson modules referred from the Zwangine registry. Multiple modules can be separated by comma."
        },
        "enableFeatures" : {
          "type" : "string",
          "title" : "Enable Features",
          "description" : "Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "disableFeatures" : {
          "type" : "string",
          "title" : "Disable Features",
          "description" : "Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper. The features should be a name that matches a enum from com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.DeserializationFeature, or com.fasterxml.jackson.databind.MapperFeature Multiple features can be separated by comma"
        },
        "allowUnmarshallType" : {
          "type" : "boolean",
          "title" : "Allow Unmarshall Type",
          "description" : "If enabled then Jackson is allowed to attempt to use the ZwangineJacksonUnmarshalType header during the unmarshalling. This should only be enabled when desired to be used."
        },
        "timezone" : {
          "type" : "string",
          "title" : "Timezone",
          "description" : "If set then Jackson will use the Timezone when marshalling/unmarshalling."
        },
        "schemaResolver" : {
          "type" : "string",
          "title" : "Schema Resolver",
          "description" : "Optional schema resolver used to lookup schemas for the data in transit."
        },
        "autoDiscoverSchemaResolver" : {
          "type" : "boolean",
          "title" : "Auto Discover Schema Resolver",
          "description" : "When not disabled, the SchemaResolver will be looked up into the registry"
        },
        "contentTypeFormat" : {
          "type" : "string",
          "title" : "Content Type Format",
          "description" : "Defines a content type format in which protobuf message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native protobuf or json fields representation. The default value is native.",
          "default" : "native",
          "enum" : [ "native", "json" ]
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        }
      },
      "title" : "Protobuf",
      "description" : "Serialize and deserialize Java objects using Google's Protocol buffers.",
      "required" : [ ]
    }
  },
  "rss" : {
    "model" : {
      "kind" : "model",
      "name" : "rss",
      "title" : "RSS",
      "description" : "Transform from ROME SyndFeed Java Objects to XML and vice-versa.",
      "deprecated" : false,
      "firstVersion" : "2.1.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.RssDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      }
    },
    "propertiesSchema" : {
      "title" : "RSS",
      "description" : "Transform from ROME SyndFeed Java Objects to XML and vice-versa.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        }
      },
      "required" : [ ]
    }
  },
  "smooks" : {
    "model" : {
      "kind" : "model",
      "name" : "smooks",
      "title" : "Smooks",
      "description" : "Transform and bind XML as well as non-XML data, including EDI, CSV, JSON, and YAML using Smooks.",
      "deprecated" : false,
      "firstVersion" : "4.9.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.SmooksDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "smooksConfig" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Smooks Config",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Path to the Smooks configuration file."
      }
    },
    "propertiesSchema" : {
      "title" : "Smooks",
      "description" : "Transform and bind XML as well as non-XML data, including EDI, CSV, JSON, and YAML using Smooks.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "smooksConfig" : {
          "type" : "string",
          "title" : "Smooks Config",
          "description" : "Path to the Smooks configuration file."
        }
      },
      "required" : [ "smooksConfig" ]
    }
  },
  "soap" : {
    "model" : {
      "kind" : "model",
      "name" : "soap",
      "title" : "SOAP",
      "description" : "Marshal Java objects to SOAP messages and back.",
      "deprecated" : false,
      "firstVersion" : "2.3.0",
      "label" : "dataformat,transformation,xml",
      "javaType" : "org.zenithblox.model.dataformat.SoapDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "contextPath" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Context Path",
        "group" : "common",
        "required" : true,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Package name where your JAXB classes are located."
      },
      "encoding" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Encoding",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To overrule and use a specific encoding"
      },
      "elementNameStrategyRef" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Element Name Strategy Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.zenithblox.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy."
      },
      "version" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Version",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "1.1", "1.2" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "1.1",
        "description" : "SOAP version should either be 1.1 or 1.2. Is by default 1.1"
      },
      "namespacePrefixRef" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Namespace Prefix Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping."
      },
      "schema" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Schema",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "contextPath" : {
          "type" : "string",
          "title" : "Context Path",
          "description" : "Package name where your JAXB classes are located."
        },
        "encoding" : {
          "type" : "string",
          "title" : "Encoding",
          "description" : "To overrule and use a specific encoding"
        },
        "elementNameStrategyRef" : {
          "type" : "string",
          "title" : "Element Name Strategy Ref",
          "description" : "Refers to an element strategy to lookup from the registry. An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name. The following three element strategy class name is provided out of the box. QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported TypeNameStrategy - Uses the name and namespace from the XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault All three classes is located in the package name org.zenithblox.dataformat.soap.name If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy."
        },
        "version" : {
          "type" : "string",
          "title" : "Version",
          "description" : "SOAP version should either be 1.1 or 1.2. Is by default 1.1",
          "default" : "1.1",
          "enum" : [ "1.1", "1.2" ]
        },
        "namespacePrefixRef" : {
          "type" : "string",
          "title" : "Namespace Prefix Ref",
          "description" : "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Zwangine allows you to refer to a map which contains the desired mapping."
        },
        "schema" : {
          "type" : "string",
          "title" : "Schema",
          "description" : "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should be resolved. You can separate multiple schema files by using the ',' character."
        }
      },
      "title" : "SOAP",
      "description" : "Marshal Java objects to SOAP messages and back.",
      "required" : [ "contextPath" ]
    }
  },
  "swiftMt" : {
    "model" : {
      "kind" : "model",
      "name" : "swiftMt",
      "title" : "SWIFT MT",
      "description" : "Encode and decode SWIFT MT messages.",
      "deprecated" : false,
      "firstVersion" : "3.20.0",
      "label" : "dataformat,transformation,swift",
      "javaType" : "org.zenithblox.model.dataformat.SwiftMtDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "writeInJson" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Write In Json",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "The flag indicating that messages must be marshalled in a JSON format."
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "writeInJson" : {
          "type" : "boolean",
          "title" : "Write In Json",
          "description" : "The flag indicating that messages must be marshalled in a JSON format."
        }
      },
      "title" : "SWIFT MT",
      "description" : "Encode and decode SWIFT MT messages.",
      "required" : [ ]
    }
  },
  "swiftMx" : {
    "model" : {
      "kind" : "model",
      "name" : "swiftMx",
      "title" : "SWIFT MX",
      "description" : "Encode and decode SWIFT MX messages.",
      "deprecated" : false,
      "firstVersion" : "3.20.0",
      "label" : "dataformat,transformation,swift",
      "javaType" : "org.zenithblox.model.dataformat.SwiftMxDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "writeConfigRef" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Write Config Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a specific configuration to use when marshalling a message to lookup from the registry."
      },
      "writeInJson" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Write In Json",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "The flag indicating that messages must be marshalled in a JSON format."
      },
      "readMessageId" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Read Message Id",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The type of MX message to produce when unmarshalling an input stream. If not set, it will be automatically detected from the namespace used."
      },
      "readConfigRef" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Read Config Ref",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a specific configuration to use when unmarshalling an input stream to lookup from the registry."
      }
    },
    "propertiesSchema" : {
      "title" : "SWIFT MX",
      "description" : "Encode and decode SWIFT MX messages.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "writeConfigRef" : {
          "type" : "string",
          "title" : "Write Config Ref",
          "description" : "Refers to a specific configuration to use when marshalling a message to lookup from the registry."
        },
        "writeInJson" : {
          "type" : "boolean",
          "title" : "Write In Json",
          "description" : "The flag indicating that messages must be marshalled in a JSON format."
        },
        "readMessageId" : {
          "type" : "string",
          "title" : "Read Message Id",
          "description" : "The type of MX message to produce when unmarshalling an input stream. If not set, it will be automatically detected from the namespace used."
        },
        "readConfigRef" : {
          "type" : "string",
          "title" : "Read Config Ref",
          "description" : "Refers to a specific configuration to use when unmarshalling an input stream to lookup from the registry."
        }
      },
      "required" : [ ]
    }
  },
  "syslog" : {
    "model" : {
      "kind" : "model",
      "name" : "syslog",
      "title" : "Syslog",
      "description" : "Marshall SyslogMessages to RFC3164 and RFC5424 messages and back.",
      "deprecated" : false,
      "firstVersion" : "2.6.0",
      "label" : "dataformat,transformation,monitoring",
      "javaType" : "org.zenithblox.model.dataformat.SyslogDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      }
    },
    "propertiesSchema" : {
      "title" : "Syslog",
      "description" : "Marshall SyslogMessages to RFC3164 and RFC5424 messages and back.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        }
      },
      "required" : [ ]
    }
  },
  "tarFile" : {
    "model" : {
      "kind" : "model",
      "name" : "tarFile",
      "title" : "Tar File",
      "description" : "Archive files into tarballs or extract files from tarballs.",
      "deprecated" : false,
      "firstVersion" : "2.16.0",
      "label" : "dataformat,transformation,file",
      "javaType" : "org.zenithblox.model.dataformat.TarFileDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "usingIterator" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Using Iterator",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the tar file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode."
      },
      "allowEmptyDirectory" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Allow Empty Directory",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the tar file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty"
      },
      "preservePathElements" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Preserve Path Elements",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the tar file."
      },
      "maxDecompressedSize" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Max Decompressed Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Long",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "1073741824",
        "description" : "Set the maximum decompressed size of a tar file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size."
      }
    },
    "propertiesSchema" : {
      "title" : "Tar File",
      "description" : "Archive files into tarballs or extract files from tarballs.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "usingIterator" : {
          "type" : "boolean",
          "title" : "Using Iterator",
          "description" : "If the tar file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode."
        },
        "allowEmptyDirectory" : {
          "type" : "boolean",
          "title" : "Allow Empty Directory",
          "description" : "If the tar file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty"
        },
        "preservePathElements" : {
          "type" : "boolean",
          "title" : "Preserve Path Elements",
          "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the tar file."
        },
        "maxDecompressedSize" : {
          "type" : "number",
          "title" : "Max Decompressed Size",
          "description" : "Set the maximum decompressed size of a tar file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
          "default" : "1073741824"
        }
      },
      "required" : [ ]
    }
  },
  "thrift" : {
    "model" : {
      "kind" : "model",
      "name" : "thrift",
      "title" : "Thrift",
      "description" : "Serialize and deserialize messages using Apache Thrift binary data format.",
      "deprecated" : false,
      "firstVersion" : "2.20.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.ThriftDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "instanceClass" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Instance Class",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Name of class to use when unmarshalling"
      },
      "contentTypeFormat" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Content Type Format",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "binary", "json", "sjson" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "binary",
        "description" : "Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native binary thrift, json or simple json fields representation. The default value is binary."
      },
      "contentTypeHeader" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Content Type Header",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
      }
    },
    "propertiesSchema" : {
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "instanceClass" : {
          "type" : "string",
          "title" : "Instance Class",
          "description" : "Name of class to use when unmarshalling"
        },
        "contentTypeFormat" : {
          "type" : "string",
          "title" : "Content Type Format",
          "description" : "Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been. The format can either be native or json for either native binary thrift, json or simple json fields representation. The default value is binary.",
          "default" : "binary",
          "enum" : [ "binary", "json", "sjson" ]
        },
        "contentTypeHeader" : {
          "type" : "boolean",
          "title" : "Content Type Header",
          "description" : "Whether the data format should set the Content-Type header with the type from the data format. For example application/xml for data formats marshalling to XML, or application/json for data formats marshalling to JSON"
        }
      },
      "title" : "Thrift",
      "description" : "Serialize and deserialize messages using Apache Thrift binary data format.",
      "required" : [ ]
    }
  },
  "tidyMarkup" : {
    "model" : {
      "kind" : "model",
      "name" : "tidyMarkup",
      "title" : "TidyMarkup",
      "description" : "Parse (potentially invalid) HTML into valid HTML or DOM.",
      "deprecated" : false,
      "firstVersion" : "2.0.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.TidyMarkupDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "dataObjectType" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Data Object Type",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "org.w3c.dom.Node", "java.lang.String" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "org.w3c.dom.Node",
        "description" : "What data type to unmarshal as, can either be org.w3c.dom.Node or java.lang.String. Is by default org.w3c.dom.Node"
      },
      "omitXmlDeclaration" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Omit Xml Declaration",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "When returning a String, do we omit the XML declaration in the top."
      }
    },
    "propertiesSchema" : {
      "title" : "TidyMarkup",
      "description" : "Parse (potentially invalid) HTML into valid HTML or DOM.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "dataObjectType" : {
          "type" : "string",
          "title" : "Data Object Type",
          "description" : "What data type to unmarshal as, can either be org.w3c.dom.Node or java.lang.String. Is by default org.w3c.dom.Node",
          "default" : "org.w3c.dom.Node",
          "enum" : [ "org.w3c.dom.Node", "java.lang.String" ]
        },
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "omitXmlDeclaration" : {
          "type" : "boolean",
          "title" : "Omit Xml Declaration",
          "description" : "When returning a String, do we omit the XML declaration in the top."
        }
      },
      "required" : [ ]
    }
  },
  "univocityCsv" : {
    "model" : {
      "kind" : "model",
      "name" : "univocityCsv",
      "title" : "uniVocity CSV",
      "description" : "Marshal and unmarshal Java objects from and to CSV (Comma Separated Values) using UniVocity Parsers.",
      "deprecated" : false,
      "firstVersion" : "2.15.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.UniVocityCsvDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "delimiter" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Delimiter",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : ",",
        "description" : "The delimiter of values"
      },
      "quoteAllFields" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Quote All Fields",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not all values must be quoted when writing them."
      },
      "quote" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Quote",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "\"",
        "description" : "The quote symbol."
      },
      "quoteEscape" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Quote Escape",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "\"",
        "description" : "The quote escape symbol"
      },
      "nullValue" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Null Value",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The string representation of a null value. The default value is null"
      },
      "skipEmptyLines" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Skip Empty Lines",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the empty lines must be ignored. The default value is true"
      },
      "ignoreTrailingWhitespaces" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Ignore Trailing Whitespaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the trailing white spaces must be ignored. The default value is true"
      },
      "ignoreLeadingWhitespaces" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Ignore Leading Whitespaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the leading white spaces must be ignored. The default value is true"
      },
      "headersDisabled" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Headers Disabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false"
      },
      "headerExtractionEnabled" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Header Extraction Enabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the header must be read in the first line of the test document. The default value is false"
      },
      "numberOfRecordsToRead" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Number Of Records To Read",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The maximum number of record to read."
      },
      "emptyValue" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Empty Value",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The String representation of an empty value."
      },
      "lineSeparator" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The line separator of the files. The default value is to use the JVM platform line separator"
      },
      "normalizedLineSeparator" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Normalized Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The normalized line separator of the files. The default value is a new line character."
      },
      "comment" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Comment",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "#",
        "description" : "The comment symbol. The default value is #"
      },
      "lazyLoad" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "Lazy Load",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false"
      },
      "asMap" : {
        "index" : 17,
        "kind" : "attribute",
        "displayName" : "As Map",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false"
      },
      "univocityHeader" : { }
    },
    "propertiesSchema" : {
      "title" : "uniVocity CSV",
      "description" : "Marshal and unmarshal Java objects from and to CSV (Comma Separated Values) using UniVocity Parsers.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "delimiter" : {
          "type" : "string",
          "title" : "Delimiter",
          "description" : "The delimiter of values",
          "default" : ","
        },
        "quoteAllFields" : {
          "type" : "boolean",
          "title" : "Quote All Fields",
          "description" : "Whether or not all values must be quoted when writing them."
        },
        "quote" : {
          "type" : "string",
          "title" : "Quote",
          "description" : "The quote symbol.",
          "default" : "\""
        },
        "quoteEscape" : {
          "type" : "string",
          "title" : "Quote Escape",
          "description" : "The quote escape symbol",
          "default" : "\""
        },
        "nullValue" : {
          "type" : "string",
          "title" : "Null Value",
          "description" : "The string representation of a null value. The default value is null"
        },
        "skipEmptyLines" : {
          "type" : "boolean",
          "title" : "Skip Empty Lines",
          "description" : "Whether or not the empty lines must be ignored. The default value is true"
        },
        "ignoreTrailingWhitespaces" : {
          "type" : "boolean",
          "title" : "Ignore Trailing Whitespaces",
          "description" : "Whether or not the trailing white spaces must be ignored. The default value is true"
        },
        "ignoreLeadingWhitespaces" : {
          "type" : "boolean",
          "title" : "Ignore Leading Whitespaces",
          "description" : "Whether or not the leading white spaces must be ignored. The default value is true"
        },
        "headersDisabled" : {
          "type" : "boolean",
          "title" : "Headers Disabled",
          "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false"
        },
        "headerExtractionEnabled" : {
          "type" : "boolean",
          "title" : "Header Extraction Enabled",
          "description" : "Whether or not the header must be read in the first line of the test document. The default value is false"
        },
        "numberOfRecordsToRead" : {
          "type" : "number",
          "title" : "Number Of Records To Read",
          "description" : "The maximum number of record to read."
        },
        "emptyValue" : {
          "type" : "string",
          "title" : "Empty Value",
          "description" : "The String representation of an empty value."
        },
        "lineSeparator" : {
          "type" : "string",
          "title" : "Line Separator",
          "description" : "The line separator of the files. The default value is to use the JVM platform line separator"
        },
        "normalizedLineSeparator" : {
          "type" : "string",
          "title" : "Normalized Line Separator",
          "description" : "The normalized line separator of the files. The default value is a new line character."
        },
        "comment" : {
          "type" : "string",
          "title" : "Comment",
          "description" : "The comment symbol. The default value is #",
          "default" : "#"
        },
        "lazyLoad" : {
          "type" : "boolean",
          "title" : "Lazy Load",
          "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false"
        },
        "asMap" : {
          "type" : "boolean",
          "title" : "As Map",
          "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false"
        },
        "univocityHeader" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.dataformat.UniVocityHeader" : {
          "title" : "uniVocity Header",
          "description" : "To configure headers for UniVocity data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "length" : {
              "type" : "string",
              "title" : "Length",
              "description" : "Header length"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Header name"
            }
          }
        }
      },
      "required" : [ ]
    }
  },
  "univocityFixed" : {
    "model" : {
      "kind" : "model",
      "name" : "univocityFixed",
      "title" : "uniVocity Fixed Length",
      "description" : "Marshal and unmarshal Java objects from and to fixed length records using UniVocity Parsers.",
      "deprecated" : false,
      "firstVersion" : "2.15.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.UniVocityFixedDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "padding" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Padding",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The padding character. The default value is a space"
      },
      "skipTrailingCharsUntilNewline" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Skip Trailing Chars Until Newline",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the trailing characters until new line must be ignored. The default value is false"
      },
      "recordEndsOnNewline" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Record Ends On Newline",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the record ends on new line. The default value is false"
      },
      "nullValue" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Null Value",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The string representation of a null value. The default value is null"
      },
      "skipEmptyLines" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Skip Empty Lines",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the empty lines must be ignored. The default value is true"
      },
      "ignoreTrailingWhitespaces" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Ignore Trailing Whitespaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the trailing white spaces must be ignored. The default value is true"
      },
      "ignoreLeadingWhitespaces" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Ignore Leading Whitespaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the leading white spaces must be ignored. The default value is true"
      },
      "headersDisabled" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Headers Disabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false"
      },
      "headerExtractionEnabled" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Header Extraction Enabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the header must be read in the first line of the test document. The default value is false"
      },
      "numberOfRecordsToRead" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Number Of Records To Read",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The maximum number of record to read."
      },
      "emptyValue" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Empty Value",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The String representation of an empty value."
      },
      "lineSeparator" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The line separator of the files. The default value is to use the JVM platform line separator"
      },
      "normalizedLineSeparator" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Normalized Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The normalized line separator of the files. The default value is a new line character."
      },
      "comment" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "Comment",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "#",
        "description" : "The comment symbol. The default value is #"
      },
      "lazyLoad" : {
        "index" : 15,
        "kind" : "attribute",
        "displayName" : "Lazy Load",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false"
      },
      "asMap" : {
        "index" : 16,
        "kind" : "attribute",
        "displayName" : "As Map",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false"
      },
      "univocityHeader" : { }
    },
    "propertiesSchema" : {
      "title" : "uniVocity Fixed Length",
      "description" : "Marshal and unmarshal Java objects from and to fixed length records using UniVocity Parsers.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "padding" : {
          "type" : "string",
          "title" : "Padding",
          "description" : "The padding character. The default value is a space"
        },
        "skipTrailingCharsUntilNewline" : {
          "type" : "boolean",
          "title" : "Skip Trailing Chars Until Newline",
          "description" : "Whether or not the trailing characters until new line must be ignored. The default value is false"
        },
        "recordEndsOnNewline" : {
          "type" : "boolean",
          "title" : "Record Ends On Newline",
          "description" : "Whether or not the record ends on new line. The default value is false"
        },
        "nullValue" : {
          "type" : "string",
          "title" : "Null Value",
          "description" : "The string representation of a null value. The default value is null"
        },
        "skipEmptyLines" : {
          "type" : "boolean",
          "title" : "Skip Empty Lines",
          "description" : "Whether or not the empty lines must be ignored. The default value is true"
        },
        "ignoreTrailingWhitespaces" : {
          "type" : "boolean",
          "title" : "Ignore Trailing Whitespaces",
          "description" : "Whether or not the trailing white spaces must be ignored. The default value is true"
        },
        "ignoreLeadingWhitespaces" : {
          "type" : "boolean",
          "title" : "Ignore Leading Whitespaces",
          "description" : "Whether or not the leading white spaces must be ignored. The default value is true"
        },
        "headersDisabled" : {
          "type" : "boolean",
          "title" : "Headers Disabled",
          "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false"
        },
        "headerExtractionEnabled" : {
          "type" : "boolean",
          "title" : "Header Extraction Enabled",
          "description" : "Whether or not the header must be read in the first line of the test document. The default value is false"
        },
        "numberOfRecordsToRead" : {
          "type" : "number",
          "title" : "Number Of Records To Read",
          "description" : "The maximum number of record to read."
        },
        "emptyValue" : {
          "type" : "string",
          "title" : "Empty Value",
          "description" : "The String representation of an empty value."
        },
        "lineSeparator" : {
          "type" : "string",
          "title" : "Line Separator",
          "description" : "The line separator of the files. The default value is to use the JVM platform line separator"
        },
        "normalizedLineSeparator" : {
          "type" : "string",
          "title" : "Normalized Line Separator",
          "description" : "The normalized line separator of the files. The default value is a new line character."
        },
        "comment" : {
          "type" : "string",
          "title" : "Comment",
          "description" : "The comment symbol. The default value is #",
          "default" : "#"
        },
        "lazyLoad" : {
          "type" : "boolean",
          "title" : "Lazy Load",
          "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false"
        },
        "asMap" : {
          "type" : "boolean",
          "title" : "As Map",
          "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false"
        },
        "univocityHeader" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.dataformat.UniVocityHeader" : {
          "title" : "uniVocity Header",
          "description" : "To configure headers for UniVocity data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "length" : {
              "type" : "string",
              "title" : "Length",
              "description" : "Header length"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Header name"
            }
          }
        }
      },
      "required" : [ ]
    }
  },
  "univocityTsv" : {
    "model" : {
      "kind" : "model",
      "name" : "univocityTsv",
      "title" : "uniVocity TSV",
      "description" : "Marshal and unmarshal Java objects from and to TSV (Tab-Separated Values) records using UniVocity Parsers.",
      "deprecated" : false,
      "firstVersion" : "2.15.0",
      "label" : "dataformat,transformation,csv",
      "javaType" : "org.zenithblox.model.dataformat.UniVocityTsvDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "escapeChar" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Escape Char",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "\\",
        "description" : "The escape character."
      },
      "nullValue" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Null Value",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The string representation of a null value. The default value is null"
      },
      "skipEmptyLines" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Skip Empty Lines",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the empty lines must be ignored. The default value is true"
      },
      "ignoreTrailingWhitespaces" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Ignore Trailing Whitespaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the trailing white spaces must be ignored. The default value is true"
      },
      "ignoreLeadingWhitespaces" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Ignore Leading Whitespaces",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether or not the leading white spaces must be ignored. The default value is true"
      },
      "headersDisabled" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Headers Disabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false"
      },
      "headerExtractionEnabled" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Header Extraction Enabled",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether or not the header must be read in the first line of the test document. The default value is false"
      },
      "numberOfRecordsToRead" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Number Of Records To Read",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The maximum number of record to read."
      },
      "emptyValue" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Empty Value",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The String representation of an empty value."
      },
      "lineSeparator" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The line separator of the files. The default value is to use the JVM platform line separator"
      },
      "normalizedLineSeparator" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Normalized Line Separator",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The normalized line separator of the files. The default value is a new line character."
      },
      "comment" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Comment",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "#",
        "description" : "The comment symbol. The default value is #"
      },
      "lazyLoad" : {
        "index" : 13,
        "kind" : "attribute",
        "displayName" : "Lazy Load",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false"
      },
      "asMap" : {
        "index" : 14,
        "kind" : "attribute",
        "displayName" : "As Map",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false"
      },
      "univocityHeader" : { }
    },
    "propertiesSchema" : {
      "title" : "uniVocity TSV",
      "description" : "Marshal and unmarshal Java objects from and to TSV (Tab-Separated Values) records using UniVocity Parsers.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "escapeChar" : {
          "type" : "string",
          "title" : "Escape Char",
          "description" : "The escape character.",
          "default" : "\\"
        },
        "nullValue" : {
          "type" : "string",
          "title" : "Null Value",
          "description" : "The string representation of a null value. The default value is null"
        },
        "skipEmptyLines" : {
          "type" : "boolean",
          "title" : "Skip Empty Lines",
          "description" : "Whether or not the empty lines must be ignored. The default value is true"
        },
        "ignoreTrailingWhitespaces" : {
          "type" : "boolean",
          "title" : "Ignore Trailing Whitespaces",
          "description" : "Whether or not the trailing white spaces must be ignored. The default value is true"
        },
        "ignoreLeadingWhitespaces" : {
          "type" : "boolean",
          "title" : "Ignore Leading Whitespaces",
          "description" : "Whether or not the leading white spaces must be ignored. The default value is true"
        },
        "headersDisabled" : {
          "type" : "boolean",
          "title" : "Headers Disabled",
          "description" : "Whether or not the headers are disabled. When defined, this option explicitly sets the headers as null which indicates that there is no header. The default value is false"
        },
        "headerExtractionEnabled" : {
          "type" : "boolean",
          "title" : "Header Extraction Enabled",
          "description" : "Whether or not the header must be read in the first line of the test document. The default value is false"
        },
        "numberOfRecordsToRead" : {
          "type" : "number",
          "title" : "Number Of Records To Read",
          "description" : "The maximum number of record to read."
        },
        "emptyValue" : {
          "type" : "string",
          "title" : "Empty Value",
          "description" : "The String representation of an empty value."
        },
        "lineSeparator" : {
          "type" : "string",
          "title" : "Line Separator",
          "description" : "The line separator of the files. The default value is to use the JVM platform line separator"
        },
        "normalizedLineSeparator" : {
          "type" : "string",
          "title" : "Normalized Line Separator",
          "description" : "The normalized line separator of the files. The default value is a new line character."
        },
        "comment" : {
          "type" : "string",
          "title" : "Comment",
          "description" : "The comment symbol. The default value is #",
          "default" : "#"
        },
        "lazyLoad" : {
          "type" : "boolean",
          "title" : "Lazy Load",
          "description" : "Whether the unmarshalling should produce an iterator that reads the lines on the fly or if all the lines must be read at once. The default value is false"
        },
        "asMap" : {
          "type" : "boolean",
          "title" : "As Map",
          "description" : "Whether the unmarshalling should produce maps for the lines values instead of lists. It requires to have header (either defined or collected). The default value is false"
        },
        "univocityHeader" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.dataformat.UniVocityHeader"
          }
        }
      },
      "definitions" : {
        "org.zenithblox.model.dataformat.UniVocityHeader" : {
          "title" : "uniVocity Header",
          "description" : "To configure headers for UniVocity data formats.",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "length" : {
              "type" : "string",
              "title" : "Length",
              "description" : "Header length"
            },
            "name" : {
              "type" : "string",
              "title" : "Name",
              "description" : "Header name"
            }
          }
        }
      },
      "required" : [ ]
    }
  },
  "xmlSecurity" : {
    "model" : {
      "kind" : "model",
      "name" : "xmlSecurity",
      "title" : "XML Security",
      "description" : "Encrypt and decrypt XML payloads using Apache Santuario.",
      "deprecated" : false,
      "firstVersion" : "2.0.0",
      "label" : "dataformat,transformation,xml",
      "javaType" : "org.zenithblox.model.dataformat.XMLSecurityDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "xmlCipherAlgorithm" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Xml Cipher Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "TRIPLEDES", "AES_128", "AES_128_GCM", "AES_192", "AES_192_GCM", "AES_256", "AES_256_GCM", "SEED_128", "CAMELLIA_128", "CAMELLIA_192", "CAMELLIA_256" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "AES-256-GCM",
        "description" : "The cipher algorithm to be used for encryption/decryption of the XML message content. The available choices are: XMLCipher.TRIPLEDES XMLCipher.AES_128 XMLCipher.AES_128_GCM XMLCipher.AES_192 XMLCipher.AES_192_GCM XMLCipher.AES_256 XMLCipher.AES_256_GCM XMLCipher.SEED_128 XMLCipher.CAMELLIA_128 XMLCipher.CAMELLIA_192 XMLCipher.CAMELLIA_256 The default value is XMLCipher.AES_256_GCM"
      },
      "passPhrase" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Pass Phrase",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A String used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key"
      },
      "passPhraseByte" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Pass Phrase Byte",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "byte[]",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "A byte used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key"
      },
      "secureTag" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Secure Tag",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The XPath reference to the XML Element selected for encryption/decryption. If no tag is specified, the entire payload is encrypted/decrypted."
      },
      "secureTagContents" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Secure Tag Contents",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "A boolean value to specify whether the XML Element is to be encrypted or the contents of the XML Element. false = Element Level. true = Element Content Level."
      },
      "keyCipherAlgorithm" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Key Cipher Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "RSA_v1dot5", "RSA_OAEP", "RSA_OAEP_11" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "RSA_OAEP",
        "description" : "The cipher algorithm to be used for encryption/decryption of the asymmetric key. The available choices are: XMLCipher.RSA_v1dot5 XMLCipher.RSA_OAEP XMLCipher.RSA_OAEP_11 The default value is XMLCipher.RSA_OAEP"
      },
      "recipientKeyAlias" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Recipient Key Alias",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The key alias to be used when retrieving the recipient's public or private key from a KeyStore when performing asymmetric key encryption or decryption."
      },
      "keyOrTrustStoreParametersRef" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Key Or Trust Store Parameters Ref",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Refers to a KeyStore instance to lookup in the registry, which is used for configuration options for creating and loading a KeyStore instance that represents the sender's trustStore or recipient's keyStore."
      },
      "keyPassword" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Key Password",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The password to be used for retrieving the private key from the KeyStore. This key is used for asymmetric decryption."
      },
      "digestAlgorithm" : {
        "index" : 10,
        "kind" : "attribute",
        "displayName" : "Digest Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "SHA1", "SHA256", "SHA512" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "SHA1",
        "description" : "The digest algorithm to use with the RSA OAEP algorithm. The available choices are: XMLCipher.SHA1 XMLCipher.SHA256 XMLCipher.SHA512 The default value is XMLCipher.SHA1"
      },
      "mgfAlgorithm" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Mgf Algorithm",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.String",
        "enum" : [ "MGF1_SHA1", "MGF1_SHA256", "MGF1_SHA512" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "MGF1_SHA1",
        "description" : "The MGF Algorithm to use with the RSA OAEP algorithm. The available choices are: EncryptionConstants.MGF1_SHA1 EncryptionConstants.MGF1_SHA256 EncryptionConstants.MGF1_SHA512 The default value is EncryptionConstants.MGF1_SHA1"
      },
      "addKeyValueForEncryptedKey" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Add Key Value For Encrypted Key",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Whether to add the public key used to encrypt the session key as a KeyValue in the EncryptedKey structure or not."
      }
    },
    "propertiesSchema" : {
      "title" : "XML Security",
      "description" : "Encrypt and decrypt XML payloads using Apache Santuario.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "xmlCipherAlgorithm" : {
          "type" : "string",
          "title" : "Xml Cipher Algorithm",
          "description" : "The cipher algorithm to be used for encryption/decryption of the XML message content. The available choices are: XMLCipher.TRIPLEDES XMLCipher.AES_128 XMLCipher.AES_128_GCM XMLCipher.AES_192 XMLCipher.AES_192_GCM XMLCipher.AES_256 XMLCipher.AES_256_GCM XMLCipher.SEED_128 XMLCipher.CAMELLIA_128 XMLCipher.CAMELLIA_192 XMLCipher.CAMELLIA_256 The default value is XMLCipher.AES_256_GCM",
          "default" : "AES-256-GCM",
          "enum" : [ "TRIPLEDES", "AES_128", "AES_128_GCM", "AES_192", "AES_192_GCM", "AES_256", "AES_256_GCM", "SEED_128", "CAMELLIA_128", "CAMELLIA_192", "CAMELLIA_256" ]
        },
        "passPhrase" : {
          "type" : "string",
          "title" : "Pass Phrase",
          "description" : "A String used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key"
        },
        "passPhraseByte" : {
          "type" : "string",
          "title" : "Pass Phrase Byte",
          "description" : "A byte used as passPhrase to encrypt/decrypt content. The passPhrase has to be provided. The passPhrase needs to be put together in conjunction with the appropriate encryption algorithm. For example using TRIPLEDES the passPhase can be a Only another 24 Byte key",
          "format" : "binary"
        },
        "secureTag" : {
          "type" : "string",
          "title" : "Secure Tag",
          "description" : "The XPath reference to the XML Element selected for encryption/decryption. If no tag is specified, the entire payload is encrypted/decrypted."
        },
        "secureTagContents" : {
          "type" : "boolean",
          "title" : "Secure Tag Contents",
          "description" : "A boolean value to specify whether the XML Element is to be encrypted or the contents of the XML Element. false = Element Level. true = Element Content Level."
        },
        "keyCipherAlgorithm" : {
          "type" : "string",
          "title" : "Key Cipher Algorithm",
          "description" : "The cipher algorithm to be used for encryption/decryption of the asymmetric key. The available choices are: XMLCipher.RSA_v1dot5 XMLCipher.RSA_OAEP XMLCipher.RSA_OAEP_11 The default value is XMLCipher.RSA_OAEP",
          "default" : "RSA_OAEP",
          "enum" : [ "RSA_v1dot5", "RSA_OAEP", "RSA_OAEP_11" ]
        },
        "recipientKeyAlias" : {
          "type" : "string",
          "title" : "Recipient Key Alias",
          "description" : "The key alias to be used when retrieving the recipient's public or private key from a KeyStore when performing asymmetric key encryption or decryption."
        },
        "keyOrTrustStoreParametersRef" : {
          "type" : "string",
          "title" : "Key Or Trust Store Parameters Ref",
          "description" : "Refers to a KeyStore instance to lookup in the registry, which is used for configuration options for creating and loading a KeyStore instance that represents the sender's trustStore or recipient's keyStore."
        },
        "keyPassword" : {
          "type" : "string",
          "title" : "Key Password",
          "description" : "The password to be used for retrieving the private key from the KeyStore. This key is used for asymmetric decryption."
        },
        "digestAlgorithm" : {
          "type" : "string",
          "title" : "Digest Algorithm",
          "description" : "The digest algorithm to use with the RSA OAEP algorithm. The available choices are: XMLCipher.SHA1 XMLCipher.SHA256 XMLCipher.SHA512 The default value is XMLCipher.SHA1",
          "default" : "SHA1",
          "enum" : [ "SHA1", "SHA256", "SHA512" ]
        },
        "mgfAlgorithm" : {
          "type" : "string",
          "title" : "Mgf Algorithm",
          "description" : "The MGF Algorithm to use with the RSA OAEP algorithm. The available choices are: EncryptionConstants.MGF1_SHA1 EncryptionConstants.MGF1_SHA256 EncryptionConstants.MGF1_SHA512 The default value is EncryptionConstants.MGF1_SHA1",
          "default" : "MGF1_SHA1",
          "enum" : [ "MGF1_SHA1", "MGF1_SHA256", "MGF1_SHA512" ]
        },
        "addKeyValueForEncryptedKey" : {
          "type" : "boolean",
          "title" : "Add Key Value For Encrypted Key",
          "description" : "Whether to add the public key used to encrypt the session key as a KeyValue in the EncryptedKey structure or not."
        }
      },
      "required" : [ ]
    }
  },
  "yaml" : {
    "model" : {
      "kind" : "model",
      "name" : "yaml",
      "title" : "YAML",
      "description" : "Marshal and unmarshal Java objects to and from YAML.",
      "deprecated" : false,
      "firstVersion" : "2.17.0",
      "label" : "dataformat,transformation,yaml",
      "javaType" : "org.zenithblox.model.dataformat.YAMLDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "library" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Library",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "org.zenithblox.model.dataformat.YAMLLibrary",
        "enum" : [ "SnakeYAML" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "SnakeYAML",
        "description" : "Which yaml library to use. By default it is SnakeYAML"
      },
      "unmarshalType" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Unmarshal Type",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Class name of the java type to use when unmarshalling"
      },
      "constructor" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Constructor",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "BaseConstructor to construct incoming documents."
      },
      "representer" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Representer",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Representer to emit outgoing objects."
      },
      "dumperOptions" : {
        "index" : 5,
        "kind" : "attribute",
        "displayName" : "Dumper Options",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "DumperOptions to configure outgoing objects."
      },
      "resolver" : {
        "index" : 6,
        "kind" : "attribute",
        "displayName" : "Resolver",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Resolver to detect implicit type"
      },
      "useApplicationContextClassLoader" : {
        "index" : 7,
        "kind" : "attribute",
        "displayName" : "Use Application Context Class Loader",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : true,
        "description" : "Use ApplicationContextClassLoader as custom ClassLoader"
      },
      "prettyFlow" : {
        "index" : 8,
        "kind" : "attribute",
        "displayName" : "Pretty Flow",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Force the emitter to produce a pretty YAML document when using the flow style."
      },
      "allowAnyType" : {
        "index" : 9,
        "kind" : "attribute",
        "displayName" : "Allow Any Type",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Allow any class to be un-marshaled"
      },
      "typeFilter" : {
        "index" : 10,
        "kind" : "element",
        "displayName" : "Type Filter",
        "group" : "common",
        "required" : false,
        "type" : "array",
        "javaType" : "java.util.List<org.zenithblox.model.dataformat.YAMLTypeFilterDefinition>",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "Set the types SnakeYAML is allowed to un-marshall"
      },
      "maxAliasesForCollections" : {
        "index" : 11,
        "kind" : "attribute",
        "displayName" : "Max Aliases For Collections",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Integer",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "50",
        "description" : "Set the maximum amount of aliases allowed for collections."
      },
      "allowRecursiveKeys" : {
        "index" : 12,
        "kind" : "attribute",
        "displayName" : "Allow Recursive Keys",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "Set whether recursive keys are allowed."
      }
    },
    "propertiesSchema" : {
      "title" : "YAML",
      "description" : "Marshal and unmarshal Java objects to and from YAML.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "allowAnyType" : {
          "type" : "boolean",
          "title" : "Allow Any Type",
          "description" : "Allow any class to be un-marshaled"
        },
        "allowRecursiveKeys" : {
          "type" : "boolean",
          "title" : "Allow Recursive Keys",
          "description" : "Set whether recursive keys are allowed."
        },
        "constructor" : {
          "type" : "string",
          "title" : "Constructor",
          "description" : "BaseConstructor to construct incoming documents."
        },
        "dumperOptions" : {
          "type" : "string",
          "title" : "Dumper Options",
          "description" : "DumperOptions to configure outgoing objects."
        },
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "library" : {
          "type" : "string",
          "title" : "Library",
          "description" : "Which yaml library to use. By default it is SnakeYAML",
          "default" : "SnakeYAML",
          "enum" : [ "SnakeYAML" ]
        },
        "maxAliasesForCollections" : {
          "type" : "number",
          "title" : "Max Aliases For Collections",
          "description" : "Set the maximum amount of aliases allowed for collections.",
          "default" : "50"
        },
        "prettyFlow" : {
          "type" : "boolean",
          "title" : "Pretty Flow",
          "description" : "Force the emitter to produce a pretty YAML document when using the flow style."
        },
        "representer" : {
          "type" : "string",
          "title" : "Representer",
          "description" : "Representer to emit outgoing objects."
        },
        "resolver" : {
          "type" : "string",
          "title" : "Resolver",
          "description" : "Resolver to detect implicit type"
        },
        "typeFilter" : {
          "type" : "array",
          "title" : "Type Filter",
          "description" : "Set the types SnakeYAML is allowed to un-marshall",
          "items" : {
            "$ref" : "#/definitions/org.zenithblox.model.dataformat.YAMLTypeFilterDefinition"
          }
        },
        "unmarshalType" : {
          "type" : "string",
          "title" : "Unmarshal Type",
          "description" : "Class name of the java type to use when unmarshalling"
        },
        "useApplicationContextClassLoader" : {
          "type" : "boolean",
          "title" : "Use Application Context Class Loader",
          "description" : "Use ApplicationContextClassLoader as custom ClassLoader"
        }
      },
      "definitions" : {
        "org.zenithblox.model.dataformat.YAMLTypeFilterDefinition" : {
          "title" : "YAML Type Filter",
          "type" : "object",
          "additionalProperties" : false,
          "properties" : {
            "type" : {
              "type" : "string",
              "title" : "Type",
              "description" : "Whether to filter by class type or regular expression"
            },
            "value" : {
              "type" : "string",
              "title" : "Value",
              "description" : "Value of type such as class name or regular expression"
            }
          }
        }
      },
      "required" : [ ]
    }
  },
  "zipDeflater" : {
    "model" : {
      "kind" : "model",
      "name" : "zipDeflater",
      "title" : "Zip Deflater",
      "description" : "Compress and decompress streams using java.util.zip.Deflater and java.util.zip.Inflater.",
      "deprecated" : false,
      "firstVersion" : "2.12.0",
      "label" : "dataformat,transformation",
      "javaType" : "org.zenithblox.model.dataformat.ZipDeflaterDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "compressionLevel" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Compression Level",
        "group" : "common",
        "required" : false,
        "type" : "enum",
        "javaType" : "java.lang.Integer",
        "enum" : [ "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ],
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "-1",
        "description" : "To specify a specific compression between 0-9. -1 is default compression, 0 is no compression, and 9 is the best compression."
      }
    },
    "propertiesSchema" : {
      "title" : "Zip Deflater",
      "description" : "Compress and decompress streams using java.util.zip.Deflater and java.util.zip.Inflater.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "compressionLevel" : {
          "type" : "string",
          "title" : "Compression Level",
          "description" : "To specify a specific compression between 0-9. -1 is default compression, 0 is no compression, and 9 is the best compression.",
          "default" : "-1",
          "enum" : [ "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
        }
      },
      "required" : [ ]
    }
  },
  "zipFile" : {
    "model" : {
      "kind" : "model",
      "name" : "zipFile",
      "title" : "Zip File",
      "description" : "Compression and decompress streams using java.util.zip.ZipStream.",
      "deprecated" : false,
      "firstVersion" : "2.11.0",
      "label" : "dataformat,transformation,file",
      "javaType" : "org.zenithblox.model.dataformat.ZipFileDataFormat",
      "supportLevel" : "Stable",
      "abstract" : false,
      "input" : false,
      "output" : false
    },
    "properties" : {
      "id" : {
        "index" : 0,
        "kind" : "attribute",
        "displayName" : "Id",
        "group" : "common",
        "required" : false,
        "type" : "string",
        "javaType" : "java.lang.String",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "description" : "The id of this node"
      },
      "usingIterator" : {
        "index" : 1,
        "kind" : "attribute",
        "displayName" : "Using Iterator",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the zip file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode."
      },
      "allowEmptyDirectory" : {
        "index" : 2,
        "kind" : "attribute",
        "displayName" : "Allow Empty Directory",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the zip file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty"
      },
      "preservePathElements" : {
        "index" : 3,
        "kind" : "attribute",
        "displayName" : "Preserve Path Elements",
        "group" : "common",
        "required" : false,
        "type" : "boolean",
        "javaType" : "java.lang.Boolean",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : false,
        "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file."
      },
      "maxDecompressedSize" : {
        "index" : 4,
        "kind" : "attribute",
        "displayName" : "Max Decompressed Size",
        "group" : "advanced",
        "label" : "advanced",
        "required" : false,
        "type" : "integer",
        "javaType" : "java.lang.Long",
        "deprecated" : false,
        "autowired" : false,
        "secret" : false,
        "defaultValue" : "1073741824",
        "description" : "Set the maximum decompressed size of a zip file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size."
      }
    },
    "propertiesSchema" : {
      "title" : "Zip File",
      "description" : "Compression and decompress streams using java.util.zip.ZipStream.",
      "type" : "object",
      "additionalProperties" : false,
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "Id",
          "description" : "The id of this node"
        },
        "usingIterator" : {
          "type" : "boolean",
          "title" : "Using Iterator",
          "description" : "If the zip file has more than one entry, the setting this option to true, allows working with the splitter EIP, to split the data using an iterator in a streaming mode."
        },
        "allowEmptyDirectory" : {
          "type" : "boolean",
          "title" : "Allow Empty Directory",
          "description" : "If the zip file has more than one entry, setting this option to true, allows to get the iterator even if the directory is empty"
        },
        "preservePathElements" : {
          "type" : "boolean",
          "title" : "Preserve Path Elements",
          "description" : "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file."
        },
        "maxDecompressedSize" : {
          "type" : "number",
          "title" : "Max Decompressed Size",
          "description" : "Set the maximum decompressed size of a zip file (in bytes). The default value if not specified corresponds to 1 gigabyte. An IOException will be thrown if the decompressed size exceeds this amount. Set to -1 to disable setting a maximum decompressed size.",
          "default" : "1073741824"
        }
      },
      "required" : [ ]
    }
  }
}